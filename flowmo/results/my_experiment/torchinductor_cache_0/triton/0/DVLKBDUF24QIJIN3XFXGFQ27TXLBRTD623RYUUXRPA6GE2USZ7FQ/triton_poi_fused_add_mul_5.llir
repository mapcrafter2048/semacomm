; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_add_mul_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 10, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 3, !dbg !11
  %11 = and i32 %10, 1016, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = srem i32 %12, 1152, !dbg !13
  %14 = sdiv i32 %12, 4718592, !dbg !14
  %15 = sext i32 %12 to i64, !dbg !15
  %16 = getelementptr bfloat, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %16) #1, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !16
  %26 = mul nsw i32 %14, 6912, !dbg !17
  %27 = add nsw i32 %26, %13, !dbg !18
  %28 = sext i32 %27 to i64, !dbg !19
  %29 = getelementptr bfloat, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %29) #1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !20
  %39 = getelementptr bfloat, ptr addrspace(1) %2, i64 %15, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %39) #1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !22
  %49 = getelementptr bfloat, ptr addrspace(1) %3, i64 %15, !dbg !23
  %50 = fpext <2 x bfloat> %19 to <2 x float>, !dbg !24
  %51 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !25
  %52 = fpext <2 x bfloat> %42 to <2 x float>, !dbg !26
  %53 = fmul <2 x float> %51, %52, !dbg !27
  %54 = fadd <2 x float> %53, %50, !dbg !28
  %55 = fptrunc <2 x float> %54 to <2 x bfloat>, !dbg !29
  %56 = fpext <2 x bfloat> %21 to <2 x float>, !dbg !24
  %57 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !25
  %58 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !26
  %59 = fmul <2 x float> %57, %58, !dbg !27
  %60 = fadd <2 x float> %59, %56, !dbg !28
  %61 = fptrunc <2 x float> %60 to <2 x bfloat>, !dbg !29
  %62 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !24
  %63 = fpext <2 x bfloat> %36 to <2 x float>, !dbg !25
  %64 = fpext <2 x bfloat> %46 to <2 x float>, !dbg !26
  %65 = fmul <2 x float> %63, %64, !dbg !27
  %66 = fadd <2 x float> %65, %62, !dbg !28
  %67 = fptrunc <2 x float> %66 to <2 x bfloat>, !dbg !29
  %68 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !24
  %69 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !25
  %70 = fpext <2 x bfloat> %48 to <2 x float>, !dbg !26
  %71 = fmul <2 x float> %69, %70, !dbg !27
  %72 = fadd <2 x float> %71, %68, !dbg !28
  %73 = fptrunc <2 x float> %72 to <2 x bfloat>, !dbg !29
  %74 = bitcast <2 x bfloat> %55 to i32, !dbg !29
  %75 = bitcast <2 x bfloat> %61 to i32, !dbg !29
  %76 = bitcast <2 x bfloat> %67 to i32, !dbg !29
  %77 = bitcast <2 x bfloat> %73 to i32, !dbg !29
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %74, i32 %75, i32 %76, i32 %77, ptr addrspace(1) %49) #1, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjeykrd52774mcce752yilnhc3qm4nv4jotis2bcmqptx3o67iqy.py", directory: "results/my_experiment/torchinductor_cache_0/je")
!4 = !{ptr @triton_poi_fused_add_mul_5, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_5", linkageName: "triton_poi_fused_add_mul_5", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 19, scope: !6)
!14 = !DILocation(line: 25, column: 19, scope: !6)
!15 = !DILocation(line: 26, column: 30, scope: !6)
!16 = !DILocation(line: 26, column: 35, scope: !6)
!17 = !DILocation(line: 27, column: 40, scope: !6)
!18 = !DILocation(line: 27, column: 35, scope: !6)
!19 = !DILocation(line: 27, column: 30, scope: !6)
!20 = !DILocation(line: 27, column: 45, scope: !6)
!21 = !DILocation(line: 28, column: 30, scope: !6)
!22 = !DILocation(line: 28, column: 35, scope: !6)
!23 = !DILocation(line: 31, column: 25, scope: !6)
!24 = !DILocation(line: 26, column: 44, scope: !6)
!25 = !DILocation(line: 27, column: 84, scope: !6)
!26 = !DILocation(line: 28, column: 44, scope: !6)
!27 = !DILocation(line: 29, column: 18, scope: !6)
!28 = !DILocation(line: 30, column: 18, scope: !6)
!29 = !DILocation(line: 31, column: 36, scope: !6)
!30 = !DILocation(line: 31, column: 4, scope: !6)
