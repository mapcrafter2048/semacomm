; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_poi_fused__to_copy_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 10, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 3, !dbg !11
  %14 = and i32 %13, 1016, !dbg !11
  %15 = or disjoint i32 %14, 4, !dbg !11
  %16 = shl i32 %12, 2, !dbg !11
  %17 = and i32 %16, 508, !dbg !11
  %18 = or disjoint i32 %17, 512, !dbg !11
  %19 = or disjoint i32 %14, %11, !dbg !12
  %20 = or disjoint i32 %15, %11, !dbg !12
  %21 = or disjoint i32 %17, %11, !dbg !12
  %22 = or disjoint i32 %18, %11, !dbg !12
  %23 = sdiv i32 %19, 64, !dbg !13
  %24 = srem i32 %23, 4352, !dbg !14
  %25 = mul i32 %23, 64, !dbg !15
  %.decomposed = sub i32 %19, %25, !dbg !15
  %26 = srem i32 %20, 64, !dbg !15
  %27 = sdiv i32 %19, 278528, !dbg !16
  %.lhs.trunc = trunc nsw i32 %27 to i16, !dbg !17
  %28 = srem i16 %.lhs.trunc, 12, !dbg !17
  %.sext = sext i16 %28 to i32, !dbg !17
  %29 = sdiv i32 %19, 3342336, !dbg !18
  %30 = icmp slt i32 %24, 256, !dbg !19
  %31 = add nsw i32 %.decomposed, 768, !dbg !20
  %32 = shl nsw i32 %.sext, 6, !dbg !21
  %33 = add nsw i32 %31, %32, !dbg !22
  %34 = mul nsw i32 %24, 2304, !dbg !23
  %35 = mul nsw i32 %29, 589824, !dbg !24
  %36 = add nsw i32 %34, %35, !dbg !25
  %37 = add nsw i32 %36, %33, !dbg !26
  %38 = sext i32 %37 to i64, !dbg !27
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %30) #2, !dbg !28
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !28
  %49 = extractelement <2 x bfloat> %42, i64 0, !dbg !28
  %50 = extractelement <2 x bfloat> %42, i64 1, !dbg !28
  %51 = extractelement <2 x bfloat> %44, i64 0, !dbg !28
  %52 = extractelement <2 x bfloat> %44, i64 1, !dbg !28
  %53 = extractelement <2 x bfloat> %46, i64 0, !dbg !28
  %54 = extractelement <2 x bfloat> %46, i64 1, !dbg !28
  %55 = extractelement <2 x bfloat> %48, i64 0, !dbg !28
  %56 = extractelement <2 x bfloat> %48, i64 1, !dbg !28
  %57 = fpext bfloat %49 to float, !dbg !29
  %58 = fpext bfloat %50 to float, !dbg !29
  %59 = fpext bfloat %51 to float, !dbg !29
  %60 = fpext bfloat %52 to float, !dbg !29
  %61 = fpext bfloat %53 to float, !dbg !29
  %62 = fpext bfloat %54 to float, !dbg !29
  %63 = fpext bfloat %55 to float, !dbg !29
  %64 = fpext bfloat %56 to float, !dbg !29
  %65 = shl nsw i32 %27, 8, !dbg !30
  %66 = add nsw i32 %65, %24, !dbg !31
  %67 = sext i32 %66 to i64, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %30) #2, !dbg !33
  %70 = bitcast i32 %69 to float, !dbg !33
  %71 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %30) #2, !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %30) #2, !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %30) #2, !dbg !33
  %76 = bitcast i32 %75 to float, !dbg !33
  %77 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %30) #2, !dbg !33
  %78 = bitcast i32 %77 to float, !dbg !33
  %79 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %30) #2, !dbg !33
  %80 = bitcast i32 %79 to float, !dbg !33
  %81 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %30) #2, !dbg !33
  %82 = bitcast i32 %81 to float, !dbg !33
  %83 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %30) #2, !dbg !33
  %84 = bitcast i32 %83 to float, !dbg !33
  %85 = fmul float %70, %57, !dbg !34
  %86 = fmul float %72, %58, !dbg !34
  %87 = fmul float %59, %74, !dbg !34
  %88 = fmul float %60, %76, !dbg !34
  %89 = fmul float %61, %78, !dbg !34
  %90 = fmul float %62, %80, !dbg !34
  %91 = fmul float %63, %82, !dbg !34
  %92 = fmul float %64, %84, !dbg !34
  %93 = sext i32 %.decomposed to i64, !dbg !35
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !35
  %95 = sext i32 %26 to i64, !dbg !35
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !35
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %94, i1 %30) #2, !dbg !36
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !36
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !36
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !36
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !36
  %102 = bitcast i32 %98 to float, !dbg !36
  %103 = bitcast i32 %99 to float, !dbg !36
  %104 = bitcast i32 %100 to float, !dbg !36
  %105 = bitcast i32 %101 to float, !dbg !36
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %96, i1 %30) #2, !dbg !36
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !36
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !36
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !36
  %111 = bitcast i32 %107 to float, !dbg !36
  %112 = bitcast i32 %108 to float, !dbg !36
  %113 = bitcast i32 %109 to float, !dbg !36
  %114 = bitcast i32 %110 to float, !dbg !36
  %115 = fmul float %85, %102, !dbg !37
  %116 = fmul float %86, %103, !dbg !37
  %117 = fmul float %87, %104, !dbg !37
  %118 = fmul float %88, %105, !dbg !37
  %119 = fmul float %89, %111, !dbg !37
  %120 = fmul float %90, %112, !dbg !37
  %121 = fmul float %91, %113, !dbg !37
  %122 = fmul float %92, %114, !dbg !37
  %123 = icmp sgt i32 %24, 255, !dbg !38
  %124 = add nsw i32 %24, -256, !dbg !39
  %125 = mul nsw i32 %124, 2304, !dbg !40
  %126 = mul i32 %29, 9437184, !dbg !41
  %127 = add i32 %125, %126, !dbg !42
  %128 = add i32 %127, %33, !dbg !43
  %129 = sext i32 %128 to i64, !dbg !44
  %130 = getelementptr bfloat, ptr addrspace(1) %3, i64 %129, !dbg !44
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %130, i1 %123) #2, !dbg !45
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !45
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !45
  %134 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !45
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !45
  %136 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !45
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !45
  %138 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !45
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !45
  %140 = extractelement <2 x bfloat> %133, i64 0, !dbg !45
  %141 = extractelement <2 x bfloat> %133, i64 1, !dbg !45
  %142 = extractelement <2 x bfloat> %135, i64 0, !dbg !45
  %143 = extractelement <2 x bfloat> %135, i64 1, !dbg !45
  %144 = extractelement <2 x bfloat> %137, i64 0, !dbg !45
  %145 = extractelement <2 x bfloat> %137, i64 1, !dbg !45
  %146 = extractelement <2 x bfloat> %139, i64 0, !dbg !45
  %147 = extractelement <2 x bfloat> %139, i64 1, !dbg !45
  %148 = fpext bfloat %140 to float, !dbg !46
  %149 = fpext bfloat %141 to float, !dbg !46
  %150 = fpext bfloat %142 to float, !dbg !46
  %151 = fpext bfloat %143 to float, !dbg !46
  %152 = fpext bfloat %144 to float, !dbg !46
  %153 = fpext bfloat %145 to float, !dbg !46
  %154 = fpext bfloat %146 to float, !dbg !46
  %155 = fpext bfloat %147 to float, !dbg !46
  %156 = shl nsw i32 %27, 12, !dbg !47
  %157 = add nsw i32 %124, %156, !dbg !48
  %158 = sext i32 %157 to i64, !dbg !49
  %159 = getelementptr float, ptr addrspace(1) %4, i64 %158, !dbg !49
  %160 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %159, i1 %123) #2, !dbg !50
  %161 = bitcast i32 %160 to float, !dbg !50
  %162 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %159, i1 %123) #2, !dbg !50
  %163 = bitcast i32 %162 to float, !dbg !50
  %164 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %159, i1 %123) #2, !dbg !50
  %165 = bitcast i32 %164 to float, !dbg !50
  %166 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %159, i1 %123) #2, !dbg !50
  %167 = bitcast i32 %166 to float, !dbg !50
  %168 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %159, i1 %123) #2, !dbg !50
  %169 = bitcast i32 %168 to float, !dbg !50
  %170 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %159, i1 %123) #2, !dbg !50
  %171 = bitcast i32 %170 to float, !dbg !50
  %172 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %159, i1 %123) #2, !dbg !50
  %173 = bitcast i32 %172 to float, !dbg !50
  %174 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %159, i1 %123) #2, !dbg !50
  %175 = bitcast i32 %174 to float, !dbg !50
  %176 = fmul float %161, %148, !dbg !51
  %177 = fmul float %163, %149, !dbg !51
  %178 = fmul float %150, %165, !dbg !51
  %179 = fmul float %151, %167, !dbg !51
  %180 = fmul float %152, %169, !dbg !51
  %181 = fmul float %153, %171, !dbg !51
  %182 = fmul float %154, %173, !dbg !51
  %183 = fmul float %155, %175, !dbg !51
  %184 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !52
  %185 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !52
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i1 %123) #2, !dbg !53
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !53
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !53
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !53
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !53
  %191 = bitcast i32 %187 to float, !dbg !53
  %192 = bitcast i32 %188 to float, !dbg !53
  %193 = bitcast i32 %189 to float, !dbg !53
  %194 = bitcast i32 %190 to float, !dbg !53
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %185, i1 %123) #2, !dbg !53
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !53
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !53
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !53
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !53
  %200 = bitcast i32 %196 to float, !dbg !53
  %201 = bitcast i32 %197 to float, !dbg !53
  %202 = bitcast i32 %198 to float, !dbg !53
  %203 = bitcast i32 %199 to float, !dbg !53
  %204 = fmul float %176, %191, !dbg !54
  %205 = fmul float %177, %192, !dbg !54
  %206 = fmul float %178, %193, !dbg !54
  %207 = fmul float %179, %194, !dbg !54
  %208 = fmul float %180, %200, !dbg !54
  %209 = fmul float %181, %201, !dbg !54
  %210 = fmul float %182, %202, !dbg !54
  %211 = fmul float %183, %203, !dbg !54
  %212 = select i1 %30, float %115, float %204, !dbg !55
  %213 = select i1 %30, float %116, float %205, !dbg !55
  %214 = select i1 %30, float %117, float %206, !dbg !55
  %215 = select i1 %30, float %118, float %207, !dbg !55
  %216 = select i1 %30, float %119, float %208, !dbg !55
  %217 = select i1 %30, float %120, float %209, !dbg !55
  %218 = select i1 %30, float %121, float %210, !dbg !55
  %219 = select i1 %30, float %122, float %211, !dbg !55
  %220 = sext i32 %21 to i64, !dbg !56
  %221 = getelementptr float, ptr addrspace(1) %6, i64 %220, !dbg !56
  %222 = sext i32 %22 to i64, !dbg !56
  %223 = getelementptr float, ptr addrspace(1) %6, i64 %222, !dbg !56
  %224 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !57
  %225 = bitcast float %212 to i32, !dbg !57
  %226 = bitcast float %213 to i32, !dbg !57
  %227 = bitcast float %214 to i32, !dbg !57
  %228 = bitcast float %215 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %224, i32 %225, i32 %226, i32 %227, i32 %228, i1 true) #2, !dbg !57
  %229 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !57
  %230 = bitcast float %216 to i32, !dbg !57
  %231 = bitcast float %217 to i32, !dbg !57
  %232 = bitcast float %218 to i32, !dbg !57
  %233 = bitcast float %219 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %229, i32 %230, i32 %231, i32 %232, i32 %233, i1 true) #2, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %234 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !57
  %235 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18, !dbg !57
  %236 = load <4 x i32>, ptr addrspace(3) %235, align 16, !dbg !57
  %.extract = load i32, ptr addrspace(3) %234, align 16, !dbg !57
  %237 = getelementptr inbounds nuw i8, ptr addrspace(3) %234, i32 4, !dbg !57
  %.extract8 = load i32, ptr addrspace(3) %237, align 4, !dbg !57
  %238 = getelementptr inbounds nuw i8, ptr addrspace(3) %234, i32 8, !dbg !57
  %.extract9 = load i32, ptr addrspace(3) %238, align 8, !dbg !57
  %239 = getelementptr inbounds nuw i8, ptr addrspace(3) %234, i32 12, !dbg !57
  %.extract10 = load i32, ptr addrspace(3) %239, align 4, !dbg !57
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %221) #2, !dbg !57
  %.extract11 = extractelement <4 x i32> %236, i64 0, !dbg !57
  %.extract12 = extractelement <4 x i32> %236, i64 1, !dbg !57
  %.extract13 = extractelement <4 x i32> %236, i64 2, !dbg !57
  %.extract14 = extractelement <4 x i32> %236, i64 3, !dbg !57
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %223) #2, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5gdelzulq5ow5mx3v2yovivavkij5h3ebcxjsdsaawey53eofro.py", directory: "results/my_experiment/torchinductor_cache_0/5g")
!4 = !{ptr @triton_poi_fused__to_copy_cat_16, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_cat_16", linkageName: "triton_poi_fused__to_copy_cat_16", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 27, scope: !6)
!15 = !DILocation(line: 24, column: 19, scope: !6)
!16 = !DILocation(line: 25, column: 21, scope: !6)
!17 = !DILocation(line: 25, column: 31, scope: !6)
!18 = !DILocation(line: 26, column: 19, scope: !6)
!19 = !DILocation(line: 33, column: 18, scope: !6)
!20 = !DILocation(line: 34, column: 36, scope: !6)
!21 = !DILocation(line: 34, column: 44, scope: !6)
!22 = !DILocation(line: 34, column: 41, scope: !6)
!23 = !DILocation(line: 34, column: 55, scope: !6)
!24 = !DILocation(line: 34, column: 68, scope: !6)
!25 = !DILocation(line: 34, column: 49, scope: !6)
!26 = !DILocation(line: 34, column: 61, scope: !6)
!27 = !DILocation(line: 34, column: 30, scope: !6)
!28 = !DILocation(line: 34, column: 73, scope: !6)
!29 = !DILocation(line: 34, column: 93, scope: !6)
!30 = !DILocation(line: 36, column: 34, scope: !6)
!31 = !DILocation(line: 36, column: 40, scope: !6)
!32 = !DILocation(line: 36, column: 30, scope: !6)
!33 = !DILocation(line: 36, column: 46, scope: !6)
!34 = !DILocation(line: 37, column: 18, scope: !6)
!35 = !DILocation(line: 40, column: 31, scope: !6)
!36 = !DILocation(line: 40, column: 36, scope: !6)
!37 = !DILocation(line: 41, column: 20, scope: !6)
!38 = !DILocation(line: 45, column: 20, scope: !6)
!39 = !DILocation(line: 48, column: 65, scope: !6)
!40 = !DILocation(line: 48, column: 56, scope: !6)
!41 = !DILocation(line: 48, column: 79, scope: !6)
!42 = !DILocation(line: 48, column: 50, scope: !6)
!43 = !DILocation(line: 48, column: 71, scope: !6)
!44 = !DILocation(line: 48, column: 31, scope: !6)
!45 = !DILocation(line: 48, column: 84, scope: !6)
!46 = !DILocation(line: 48, column: 105, scope: !6)
!47 = !DILocation(line: 50, column: 36, scope: !6)
!48 = !DILocation(line: 50, column: 42, scope: !6)
!49 = !DILocation(line: 50, column: 31, scope: !6)
!50 = !DILocation(line: 50, column: 57, scope: !6)
!51 = !DILocation(line: 51, column: 20, scope: !6)
!52 = !DILocation(line: 54, column: 31, scope: !6)
!53 = !DILocation(line: 54, column: 36, scope: !6)
!54 = !DILocation(line: 55, column: 20, scope: !6)
!55 = !DILocation(line: 0, scope: !6)
!56 = !DILocation(line: 61, column: 25, scope: !6)
!57 = !DILocation(line: 61, column: 37, scope: !6)
!58 = !DILocation(line: 61, column: 4, scope: !6)
