; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_clone_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 4, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %8, 3, !dbg !12
  %12 = shl i32 %10, 7, !dbg !13
  %13 = insertelement <2 x i32> poison, i32 %7, i64 0, !dbg !14
  %14 = insertelement <2 x i32> %13, i32 %10, i64 1, !dbg !14
  %15 = shl <2 x i32> %14, <i32 3, i32 7>, !dbg !14
  %16 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !10
  %17 = insertelement <2 x i32> %16, i32 %11, i64 1, !dbg !10
  %18 = and <2 x i32> %17, <i32 7, i32 120>, !dbg !10
  %19 = or disjoint <2 x i32> %18, %15, !dbg !15
  %20 = extractelement <2 x i32> %19, i64 0, !dbg !16
  %21 = icmp slt i32 %20, 6, !dbg !17
  %22 = or disjoint i32 %12, 1, !dbg !18
  %23 = or disjoint i32 %12, 2, !dbg !18
  %24 = or disjoint i32 %12, 3, !dbg !18
  %25 = srem i32 %22, 4, !dbg !19
  %26 = srem i32 %24, 4, !dbg !19
  %27 = extractelement <2 x i32> %19, i64 1, !dbg !20
  %28 = ashr exact i32 %27, 2, !dbg !20
  %29 = or disjoint i32 %28, 1, !dbg !20
  %30 = srem i32 %29, 64, !dbg !21
  %31 = sdiv i32 %27, 256, !dbg !22
  %32 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !23
  %33 = shufflevector <2 x i32> %32, <2 x i32> %19, <2 x i32> <i32 0, i32 2>, !dbg !23
  %34 = srem <2 x i32> %33, <i32 4, i32 3>, !dbg !23
  %35 = sdiv <2 x i32> %19, <i32 3, i32 1024>, !dbg !24
  %36 = mul nsw i32 %25, 3, !dbg !25
  %37 = mul nsw i32 %26, 3, !dbg !25
  %38 = extractelement <2 x i32> %34, i64 0, !dbg !26
  %39 = mul nsw i32 %38, 12, !dbg !26
  %40 = mul nsw i32 %30, 48, !dbg !27
  %41 = mul <2 x i32> %35, <i32 196608, i32 3072>, !dbg !28
  %42 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !21
  %43 = insertelement <2 x i32> %42, i32 %23, i64 1, !dbg !21
  %44 = srem <2 x i32> %43, <i32 64, i32 4>, !dbg !21
  %45 = insertelement <2 x i32> %41, i32 %39, i64 1, !dbg !29
  %46 = shufflevector <2 x i32> %41, <2 x i32> %34, <2 x i32> <i32 1, i32 3>, !dbg !29
  %47 = add <2 x i32> %45, %46, !dbg !29
  %48 = extractelement <2 x i32> %47, i64 1, !dbg !30
  %49 = add nsw i32 %48, %36, !dbg !31
  %50 = add nsw i32 %48, %37, !dbg !31
  %51 = mul nsw <2 x i32> %44, <i32 48, i32 3>, !dbg !27
  %52 = add <2 x i32> %47, %51, !dbg !32
  %53 = extractelement <2 x i32> %52, i64 0, !dbg !30
  %54 = add i32 %53, %48, !dbg !30
  %55 = add i32 %53, %49, !dbg !30
  %56 = extractelement <2 x i32> %52, i64 1, !dbg !32
  %57 = add i32 %53, %56, !dbg !30
  %58 = add i32 %53, %50, !dbg !30
  %59 = extractelement <2 x i32> %47, i64 0, !dbg !32
  %60 = add i32 %59, %40, !dbg !32
  %61 = add i32 %60, %48, !dbg !30
  %62 = add i32 %59, %49, !dbg !32
  %63 = add i32 %62, %40, !dbg !30
  %64 = add i32 %59, %56, !dbg !32
  %65 = add i32 %64, %40, !dbg !30
  %66 = add i32 %59, %50, !dbg !32
  %67 = add i32 %66, %40, !dbg !30
  %68 = sext i32 %54 to i64, !dbg !33
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !33
  %70 = sext i32 %55 to i64, !dbg !33
  %71 = getelementptr bfloat, ptr addrspace(1) %0, i64 %70, !dbg !33
  %72 = sext i32 %57 to i64, !dbg !33
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !33
  %74 = sext i32 %58 to i64, !dbg !33
  %75 = getelementptr bfloat, ptr addrspace(1) %0, i64 %74, !dbg !33
  %76 = sext i32 %61 to i64, !dbg !33
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !33
  %78 = sext i32 %63 to i64, !dbg !33
  %79 = getelementptr bfloat, ptr addrspace(1) %0, i64 %78, !dbg !33
  %80 = sext i32 %65 to i64, !dbg !33
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !33
  %82 = sext i32 %67 to i64, !dbg !33
  %83 = getelementptr bfloat, ptr addrspace(1) %0, i64 %82, !dbg !33
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %69, i1 %21) #1, !dbg !34
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %21) #1, !dbg !34
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %21) #1, !dbg !34
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %75, i1 %21) #1, !dbg !34
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %77, i1 %21) #1, !dbg !34
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %21) #1, !dbg !34
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !34
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %83, i1 %21) #1, !dbg !34
  %92 = sext i32 %48 to i64, !dbg !35
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !35
  %94 = sext i32 %49 to i64, !dbg !35
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !35
  %96 = sext i32 %56 to i64, !dbg !35
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !35
  %98 = sext i32 %50 to i64, !dbg !35
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %21) #1, !dbg !36
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #1, !dbg !36
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %21) #1, !dbg !36
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %21) #1, !dbg !36
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %21) #1, !dbg !36
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #1, !dbg !36
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %21) #1, !dbg !36
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %21) #1, !dbg !36
  %108 = shl i32 %20, 16, !dbg !16
  %109 = add i32 %108, %27, !dbg !37
  %110 = sext i32 %109 to i64, !dbg !38
  %111 = getelementptr bfloat, ptr addrspace(1) %2, i64 %110, !dbg !38
  %112 = insertelement <2 x i16> poison, i16 %84, i64 0, !dbg !34
  %113 = insertelement <2 x i16> %112, i16 %85, i64 1, !dbg !34
  %114 = bitcast <2 x i16> %113 to <2 x bfloat>, !dbg !34
  %115 = fpext <2 x bfloat> %114 to <2 x float>, !dbg !39
  %116 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !36
  %117 = insertelement <2 x i32> %116, i32 %101, i64 1, !dbg !36
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !36
  %119 = fadd <2 x float> %115, %118, !dbg !40
  %120 = fptrunc <2 x float> %119 to <2 x bfloat>, !dbg !41
  %121 = insertelement <2 x i16> poison, i16 %86, i64 0, !dbg !34
  %122 = insertelement <2 x i16> %121, i16 %87, i64 1, !dbg !34
  %123 = bitcast <2 x i16> %122 to <2 x bfloat>, !dbg !34
  %124 = fpext <2 x bfloat> %123 to <2 x float>, !dbg !39
  %125 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !36
  %126 = insertelement <2 x i32> %125, i32 %103, i64 1, !dbg !36
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !36
  %128 = fadd <2 x float> %124, %127, !dbg !40
  %129 = fptrunc <2 x float> %128 to <2 x bfloat>, !dbg !41
  %130 = insertelement <2 x i16> poison, i16 %88, i64 0, !dbg !34
  %131 = insertelement <2 x i16> %130, i16 %89, i64 1, !dbg !34
  %132 = bitcast <2 x i16> %131 to <2 x bfloat>, !dbg !34
  %133 = fpext <2 x bfloat> %132 to <2 x float>, !dbg !39
  %134 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !36
  %135 = insertelement <2 x i32> %134, i32 %105, i64 1, !dbg !36
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !36
  %137 = fadd <2 x float> %133, %136, !dbg !40
  %138 = fptrunc <2 x float> %137 to <2 x bfloat>, !dbg !41
  %139 = insertelement <2 x i16> poison, i16 %90, i64 0, !dbg !34
  %140 = insertelement <2 x i16> %139, i16 %91, i64 1, !dbg !34
  %141 = bitcast <2 x i16> %140 to <2 x bfloat>, !dbg !34
  %142 = fpext <2 x bfloat> %141 to <2 x float>, !dbg !39
  %143 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !36
  %144 = insertelement <2 x i32> %143, i32 %107, i64 1, !dbg !36
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !36
  %146 = fadd <2 x float> %142, %145, !dbg !40
  %147 = fptrunc <2 x float> %146 to <2 x bfloat>, !dbg !41
  %148 = bitcast <2 x bfloat> %120 to i32, !dbg !41
  %149 = bitcast <2 x bfloat> %129 to i32, !dbg !41
  %150 = bitcast <2 x bfloat> %138 to i32, !dbg !41
  %151 = bitcast <2 x bfloat> %147 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %149, i32 %150, i32 %151, ptr addrspace(1) %111, i1 %21) #1, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "copafnfol5e5rf4oh4jgpacrw4kazcsg6d6p2e2fj5ie3j5iukus.py", directory: "results/my_experiment/torchinductor_cache_0/op")
!4 = !{ptr @triton_poi_fused_clone_6, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_clone_6", linkageName: "triton_poi_fused_clone_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 21, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 44, scope: !6)
!11 = !DILocation(line: 24, column: 28, scope: !6)
!12 = !DILocation(line: 25, column: 44, scope: !6)
!13 = !DILocation(line: 24, column: 33, scope: !6)
!14 = !DILocation(line: 21, column: 33, scope: !6)
!15 = !DILocation(line: 22, column: 23, scope: !6)
!16 = !DILocation(line: 39, column: 36, scope: !6)
!17 = !DILocation(line: 23, column: 21, scope: !6)
!18 = !DILocation(line: 25, column: 23, scope: !6)
!19 = !DILocation(line: 27, column: 19, scope: !6)
!20 = !DILocation(line: 28, column: 21, scope: !6)
!21 = !DILocation(line: 28, column: 26, scope: !6)
!22 = !DILocation(line: 29, column: 21, scope: !6)
!23 = !DILocation(line: 29, column: 28, scope: !6)
!24 = !DILocation(line: 32, column: 19, scope: !6)
!25 = !DILocation(line: 35, column: 37, scope: !6)
!26 = !DILocation(line: 35, column: 45, scope: !6)
!27 = !DILocation(line: 35, column: 53, scope: !6)
!28 = !DILocation(line: 35, column: 75, scope: !6)
!29 = !DILocation(line: 35, column: 50, scope: !6)
!30 = !DILocation(line: 35, column: 68, scope: !6)
!31 = !DILocation(line: 35, column: 42, scope: !6)
!32 = !DILocation(line: 35, column: 58, scope: !6)
!33 = !DILocation(line: 35, column: 30, scope: !6)
!34 = !DILocation(line: 35, column: 80, scope: !6)
!35 = !DILocation(line: 36, column: 30, scope: !6)
!36 = !DILocation(line: 36, column: 50, scope: !6)
!37 = !DILocation(line: 39, column: 30, scope: !6)
!38 = !DILocation(line: 39, column: 25, scope: !6)
!39 = !DILocation(line: 35, column: 120, scope: !6)
!40 = !DILocation(line: 38, column: 18, scope: !6)
!41 = !DILocation(line: 39, column: 47, scope: !6)
!42 = !DILocation(line: 39, column: 4, scope: !6)
