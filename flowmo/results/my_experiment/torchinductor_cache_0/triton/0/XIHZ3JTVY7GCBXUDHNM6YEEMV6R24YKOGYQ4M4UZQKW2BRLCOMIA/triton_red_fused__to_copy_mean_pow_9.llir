; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = icmp slt i32 %6, 6144, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 1, !dbg !11
  %12 = and i32 %11, 126, !dbg !11
  %13 = sdiv i32 %6, 12, !dbg !12
  %14 = mul i32 %13, 12, !dbg !13
  %.decomposed = sub i32 %6, %14, !dbg !13
  %15 = icmp samesign ult i32 %12, 96, !dbg !14
  %16 = or disjoint i32 %12, 1152, !dbg !15
  %17 = mul nsw i32 %.decomposed, 96, !dbg !16
  %18 = add nsw i32 %16, %17, !dbg !17
  %19 = mul i32 %13, 3456, !dbg !18
  %20 = add i32 %18, %19, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !20
  %23 = and i1 %7, %15, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 %23) #3, !dbg !22
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !22
  %26 = extractelement <2 x bfloat> %25, i64 0, !dbg !22
  %27 = extractelement <2 x bfloat> %25, i64 1, !dbg !22
  %28 = fpext bfloat %26 to float, !dbg !23
  %29 = fpext bfloat %27 to float, !dbg !23
  %30 = fmul float %28, %28, !dbg !24
  %31 = fmul float %29, %29, !dbg !24
  %32 = fadd float %30, %31, !dbg !25
  %33 = select i1 %23, float %32, float 0.000000e+00, !dbg !25
  %34 = bitcast float %33 to i32, !dbg !30
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !30
  %36 = bitcast i32 %35 to float, !dbg !30
  %37 = fadd float %33, %36, !dbg !25
  %38 = bitcast float %37 to i32, !dbg !30
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !30
  %40 = bitcast i32 %39 to float, !dbg !30
  %41 = fadd float %37, %40, !dbg !25
  %42 = bitcast float %41 to i32, !dbg !30
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = fadd float %41, %44, !dbg !25
  %46 = bitcast float %45 to i32, !dbg !30
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = fadd float %45, %48, !dbg !25
  %50 = bitcast float %49 to i32, !dbg !30
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !30
  %52 = bitcast i32 %51 to float, !dbg !30
  %53 = fadd float %49, %52, !dbg !25
  %54 = and i32 %10, 1, !dbg !30
  %55 = icmp eq i32 %9, 0, !dbg !30
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %54, !dbg !30
  %57 = bitcast float %53 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 %55) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %58 = icmp slt i32 %8, 2, !dbg !30
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !30
  %60 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %59, i1 %58) #3, !dbg !30
  %61 = bitcast i32 %60 to float, !dbg !30
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = fadd float %61, %63, !dbg !25
  %65 = and i32 %8, 1, !dbg !30
  %66 = icmp eq i32 %65, 0, !dbg !30
  %67 = and i1 %58, %66, !dbg !30
  %68 = bitcast float %64 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %68, i1 %67) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %69 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %70 = sext i32 %6 to i64, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !31
  %72 = and i32 %8, 63, !dbg !32
  %73 = icmp eq i32 %72, 0, !dbg !32
  %74 = and i1 %7, %73, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %69, ptr addrspace(1) %71, i1 %74) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwgp6q2xoojbitpl7faygm7upgsuy75sl7h66reu5avftunejd7.py", directory: "results/my_experiment/torchinductor_cache_0/uw")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_9, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_9", linkageName: "triton_red_fused__to_copy_mean_pow_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 19, scope: !6)
!13 = !DILocation(line: 28, column: 19, scope: !6)
!14 = !DILocation(line: 34, column: 29, scope: !6)
!15 = !DILocation(line: 38, column: 41, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 48, scope: !6)
!18 = !DILocation(line: 38, column: 61, scope: !6)
!19 = !DILocation(line: 38, column: 56, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 74, scope: !6)
!22 = !DILocation(line: 38, column: 66, scope: !6)
!23 = !DILocation(line: 38, column: 128, scope: !6)
!24 = !DILocation(line: 40, column: 22, scope: !6)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!29 = !DILocation(line: 44, column: 25, scope: !6)
!30 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 45, column: 25, scope: !6)
!32 = !DILocation(line: 45, column: 36, scope: !6)
!33 = !DILocation(line: 45, column: 4, scope: !6)
