; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 3, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = shl i32 %8, 3, !dbg !13
  %13 = and i32 %12, 56, !dbg !13
  %14 = sdiv i32 %11, 12, !dbg !14
  %15 = mul i32 %14, 12, !dbg !15
  %.decomposed = sub i32 %11, %15, !dbg !15
  %16 = mul nsw i32 %.decomposed, 96, !dbg !16
  %17 = mul i32 %14, 3456, !dbg !17
  %18 = add nsw i32 %16, 1152
  %19 = add i32 %18, %17
  %20 = add i32 %19, %13, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !20
  %32 = extractelement <2 x bfloat> %27, i64 0, !dbg !20
  %33 = extractelement <2 x bfloat> %27, i64 1, !dbg !20
  %34 = extractelement <2 x bfloat> %29, i64 0, !dbg !20
  %35 = extractelement <2 x bfloat> %29, i64 1, !dbg !20
  %36 = extractelement <2 x bfloat> %31, i64 0, !dbg !20
  %37 = extractelement <2 x bfloat> %31, i64 1, !dbg !20
  %38 = fpext bfloat %32 to float, !dbg !21
  %39 = fpext bfloat %33 to float, !dbg !21
  %40 = fpext bfloat %34 to float, !dbg !21
  %41 = fpext bfloat %35 to float, !dbg !21
  %42 = fpext bfloat %36 to float, !dbg !21
  %43 = fpext bfloat %37 to float, !dbg !21
  %44 = fmul float %38, %38, !dbg !22
  %45 = fmul float %39, %39, !dbg !22
  %46 = fmul float %40, %40, !dbg !22
  %47 = fmul float %41, %41, !dbg !22
  %48 = fmul float %42, %42, !dbg !22
  %49 = fmul float %43, %43, !dbg !22
  %50 = or disjoint i32 %13, 64, !dbg !23
  %51 = icmp samesign ult i32 %50, 96, !dbg !24
  %52 = add i32 %19, %50, !dbg !18
  %53 = sext i32 %52 to i64, !dbg !19
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %54, i1 %51) #3, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !20
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !20
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !20
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !20
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !20
  %64 = extractelement <2 x bfloat> %59, i64 0, !dbg !20
  %65 = extractelement <2 x bfloat> %59, i64 1, !dbg !20
  %66 = extractelement <2 x bfloat> %61, i64 0, !dbg !20
  %67 = extractelement <2 x bfloat> %61, i64 1, !dbg !20
  %68 = extractelement <2 x bfloat> %63, i64 0, !dbg !20
  %69 = extractelement <2 x bfloat> %63, i64 1, !dbg !20
  %70 = fpext bfloat %64 to float, !dbg !21
  %71 = fpext bfloat %65 to float, !dbg !21
  %72 = fpext bfloat %66 to float, !dbg !21
  %73 = fpext bfloat %67 to float, !dbg !21
  %74 = fpext bfloat %68 to float, !dbg !21
  %75 = fpext bfloat %69 to float, !dbg !21
  %76 = fmul float %70, %70, !dbg !22
  %77 = fmul float %71, %71, !dbg !22
  %78 = fmul float %72, %72, !dbg !22
  %79 = fmul float %73, %73, !dbg !22
  %80 = fmul float %74, %74, !dbg !22
  %81 = fmul float %75, %75, !dbg !22
  %82 = fadd float %44, %76, !dbg !25
  %83 = fadd float %45, %77, !dbg !25
  %84 = fadd float %46, %78, !dbg !25
  %85 = fadd float %47, %79, !dbg !25
  %86 = fadd float %48, %80, !dbg !25
  %87 = fadd float %49, %81, !dbg !25
  %88 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !21
  %89 = fmul <2 x float> %88, %88, !dbg !22
  %90 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !21
  %91 = fmul <2 x float> %90, %90, !dbg !22
  %92 = fadd <2 x float> %89, %91, !dbg !25
  %93 = insertelement <2 x i1> poison, i1 %51, i64 0, !dbg !26
  %94 = shufflevector <2 x i1> %93, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !26
  %95 = select <2 x i1> %94, <2 x float> %92, <2 x float> %89, !dbg !26
  %96 = select i1 %51, float %82, float %44, !dbg !26
  %97 = select i1 %51, float %83, float %45, !dbg !26
  %98 = select i1 %51, float %84, float %46, !dbg !26
  %99 = select i1 %51, float %85, float %47, !dbg !26
  %100 = select i1 %51, float %86, float %48, !dbg !26
  %101 = select i1 %51, float %87, float %49, !dbg !26
  %102 = and i32 %8, 63, !dbg !11
  %103 = or disjoint i32 %7, %102, !dbg !12
  %shift = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %104 = fadd <2 x float> %95, %shift, !dbg !27
  %105 = extractelement <2 x float> %104, i64 0, !dbg !27
  %106 = fadd float %96, %105, !dbg !27
  %107 = fadd float %97, %106, !dbg !27
  %108 = fadd float %98, %107, !dbg !27
  %109 = fadd float %99, %108, !dbg !27
  %110 = fadd float %100, %109, !dbg !27
  %111 = fadd float %101, %110, !dbg !27
  %112 = bitcast float %111 to i32, !dbg !32
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = fadd float %111, %114, !dbg !27
  %116 = bitcast float %115 to i32, !dbg !32
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = fadd float %115, %118, !dbg !27
  %120 = bitcast float %119 to i32, !dbg !32
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = fadd float %119, %122, !dbg !27
  %124 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !33
  %125 = bitcast float %123 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %126 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %102, !dbg !33
  %127 = load i32, ptr addrspace(3) %126, align 4, !dbg !33
  %128 = sext i32 %103 to i64, !dbg !34
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !34
  %130 = and i32 %8, 448, !dbg !35
  %131 = icmp eq i32 %130, 0, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %129, i1 %131) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py", directory: "results/my_experiment/torchinductor_cache_0/5z")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_5, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_5", linkageName: "triton_red_fused__to_copy_mean_pow_5", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 61, scope: !6)
!18 = !DILocation(line: 38, column: 56, scope: !6)
!19 = !DILocation(line: 38, column: 34, scope: !6)
!20 = !DILocation(line: 38, column: 66, scope: !6)
!21 = !DILocation(line: 38, column: 120, scope: !6)
!22 = !DILocation(line: 40, column: 22, scope: !6)
!23 = !DILocation(line: 33, column: 31, scope: !6)
!24 = !DILocation(line: 34, column: 29, scope: !6)
!25 = !DILocation(line: 42, column: 23, scope: !6)
!26 = !DILocation(line: 43, column: 40, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 44, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 44, column: 28, scope: !6)
!34 = !DILocation(line: 45, column: 25, scope: !6)
!35 = !DILocation(line: 45, column: 36, scope: !6)
!36 = !DILocation(line: 45, column: 4, scope: !6)
