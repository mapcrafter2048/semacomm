#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [16, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 8], order = [0, 1]}>
#loc = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":18:0)
#loc1 = loc(unknown)
#loc25 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":44:25)
#loc32 = loc(callsite(#loc1 at #loc25))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 16 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_mean_pow_5(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":18:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":18:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":18:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<12> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3456> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<96> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1152> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<96> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = arith.remsi %8, %cst_1 : tensor<64x1xi32, #blocked> loc(#loc7)
    %13 = arith.divsi %8, %cst_1 : tensor<64x1xi32, #blocked> loc(#loc8)
    %14 = arith.muli %12, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc9)
    %15 = tt.broadcast %14 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc10)
    %16 = arith.muli %13, %cst_2 : tensor<64x1xi32, #blocked> loc(#loc11)
    %17 = tt.broadcast %16 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc12)
    %18 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %19 = scf.for %arg4 = %c0_i32 to %c96_i32 step %c64_i32 iter_args(%arg5 = %cst) -> (tensor<64x64xf32, #blocked>)  : i32 {
      %25 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked> loc(#loc15)
      %26 = arith.addi %25, %11 : tensor<1x64xi32, #blocked> loc(#loc15)
      %27 = arith.cmpi slt, %26, %cst_5 : tensor<1x64xi32, #blocked> loc(#loc16)
      %28 = arith.addi %26, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc17)
      %29 = tt.broadcast %28 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc10)
      %30 = arith.addi %29, %15 : tensor<64x64xi32, #blocked> loc(#loc10)
      %31 = arith.addi %30, %17 : tensor<64x64xi32, #blocked> loc(#loc12)
      %32 = tt.addptr %18, %31 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc13)
      %33 = tt.broadcast %27 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc18)
      %34 = tt.load %32, %33, %cst_0 evictionPolicy = evict_first : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc18)
      %35 = arith.extf %34 : tensor<64x64xbf16, #blocked> to tensor<64x64xf32, #blocked> loc(#loc19)
      %36 = arith.mulf %35, %35 : tensor<64x64xf32, #blocked> loc(#loc20)
      %37 = arith.addf %arg5, %36 : tensor<64x64xf32, #blocked> loc(#loc21)
      %38 = arith.select %33, %37, %arg5 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc22)
      scf.yield %38 : tensor<64x64xf32, #blocked> loc(#loc23)
    } loc(#loc14)
    %20 = "tt.reduce"(%19) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc25)), %arg5: f32 loc(callsite(#loc1 at #loc25))):
      %25 = arith.addf %arg4, %arg5 : f32 loc(#loc34)
      tt.reduce.return %25 : f32 loc(#loc31)
    }) : (tensor<64x64xf32, #blocked>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %21 = ttg.convert_layout %20 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc27)
    %23 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    %24 = tt.addptr %23, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc28)
    tt.store %24, %22 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc29)
    tt.return loc(#loc30)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":23:28)
#loc3 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":23:33)
#loc4 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":24:44)
#loc5 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":24:23)
#loc6 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":26:37)
#loc7 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":28:19)
#loc8 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":29:19)
#loc9 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":38:51)
#loc10 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":38:48)
#loc11 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":38:61)
#loc12 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":38:56)
#loc13 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":38:34)
#loc14 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":32:40)
#loc15 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":33:31)
#loc16 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":34:29)
#loc17 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":38:41)
#loc18 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":38:66)
#loc19 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":38:120)
#loc20 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":40:22)
#loc21 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":42:23)
#loc22 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":43:40)
#loc23 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":43:8)
#loc24 = loc("/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc26 = loc("/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":44:28)
#loc28 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":45:25)
#loc29 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":45:36)
#loc30 = loc("results/my_experiment/torchinductor_cache_0/5z/c5zuhqjw62zqwqut67rx5ngffugnllo24du3crqj3k54ag7nczyp.py":45:4)
#loc31 = loc(callsite(#loc24 at #loc25))
#loc33 = loc(callsite(#loc26 at #loc24))
#loc34 = loc(callsite(#loc33 at #loc25))
