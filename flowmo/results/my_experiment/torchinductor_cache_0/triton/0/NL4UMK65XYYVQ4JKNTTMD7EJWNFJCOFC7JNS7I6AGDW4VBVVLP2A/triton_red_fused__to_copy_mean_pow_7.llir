; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 2, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = and i32 %8, 3, !dbg !11
  %12 = or disjoint i32 %10, %7, !dbg !12
  %13 = icmp slt i32 %12, 6144, !dbg !13
  %14 = sdiv i32 %12, 12, !dbg !14
  %15 = mul i32 %14, 12, !dbg !15
  %.decomposed = sub i32 %12, %15, !dbg !15
  %16 = mul nsw i32 %.decomposed, 96, !dbg !16
  %17 = mul i32 %14, 3456, !dbg !17
  %18 = or disjoint i32 %16, %11
  %19 = add i32 %18, %17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !18
  br i1 %13, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %5
  %22 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %21, i1 false) #3, !dbg !19
  %23 = or disjoint i32 %19, 4, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !18
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 false) #3, !dbg !19
  %27 = or disjoint i32 %19, 8, !dbg !20
  %28 = sext i32 %27 to i64, !dbg !18
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !18
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 false) #3, !dbg !19
  %31 = or disjoint i32 %19, 12, !dbg !20
  %32 = sext i32 %31 to i64, !dbg !18
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 false) #3, !dbg !19
  %35 = or disjoint i32 %19, 16, !dbg !20
  %36 = sext i32 %35 to i64, !dbg !18
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 false) #3, !dbg !19
  %39 = or disjoint i32 %19, 20, !dbg !20
  %40 = sext i32 %39 to i64, !dbg !18
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %41, i1 false) #3, !dbg !19
  %43 = or disjoint i32 %19, 24, !dbg !20
  %44 = sext i32 %43 to i64, !dbg !18
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %45, i1 false) #3, !dbg !19
  %47 = or disjoint i32 %19, 28, !dbg !20
  %48 = sext i32 %47 to i64, !dbg !18
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !18
  %50 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %49, i1 false) #3, !dbg !19
  %51 = add i32 %19, 32, !dbg !20
  %52 = sext i32 %51 to i64, !dbg !18
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %53, i1 false) #3, !dbg !19
  %55 = add i32 %19, 36, !dbg !20
  %56 = sext i32 %55 to i64, !dbg !18
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 false) #3, !dbg !19
  %59 = add i32 %19, 40, !dbg !20
  %60 = sext i32 %59 to i64, !dbg !18
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %61, i1 false) #3, !dbg !19
  %63 = add i32 %19, 44, !dbg !20
  %64 = sext i32 %63 to i64, !dbg !18
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %65, i1 false) #3, !dbg !19
  %67 = add i32 %19, 48, !dbg !20
  %68 = sext i32 %67 to i64, !dbg !18
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !18
  %70 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %69, i1 false) #3, !dbg !19
  %71 = add i32 %19, 52, !dbg !20
  %72 = sext i32 %71 to i64, !dbg !18
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %73, i1 false) #3, !dbg !19
  %75 = add i32 %19, 56, !dbg !20
  %76 = sext i32 %75 to i64, !dbg !18
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !18
  %78 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %77, i1 false) #3, !dbg !19
  %79 = add i32 %19, 60, !dbg !20
  %80 = sext i32 %79 to i64, !dbg !18
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !18
  %82 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %81, i1 false) #3, !dbg !19
  %83 = add i32 %19, 64, !dbg !20
  %84 = sext i32 %83 to i64, !dbg !18
  %85 = getelementptr bfloat, ptr addrspace(1) %0, i64 %84, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %85, i1 false) #3, !dbg !19
  %87 = add i32 %19, 68, !dbg !20
  %88 = sext i32 %87 to i64, !dbg !18
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !18
  %90 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %89, i1 false) #3, !dbg !19
  %91 = add i32 %19, 72, !dbg !20
  %92 = sext i32 %91 to i64, !dbg !18
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !18
  %94 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %93, i1 false) #3, !dbg !19
  %95 = add i32 %19, 76, !dbg !20
  %96 = sext i32 %95 to i64, !dbg !18
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !18
  %98 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 false) #3, !dbg !19
  %99 = add i32 %19, 80, !dbg !20
  %100 = sext i32 %99 to i64, !dbg !18
  %101 = getelementptr bfloat, ptr addrspace(1) %0, i64 %100, !dbg !18
  %102 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %101, i1 false) #3, !dbg !19
  %103 = add i32 %19, 84, !dbg !20
  %104 = sext i32 %103 to i64, !dbg !18
  %105 = getelementptr bfloat, ptr addrspace(1) %0, i64 %104, !dbg !18
  %106 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %105, i1 false) #3, !dbg !19
  %107 = add i32 %19, 88, !dbg !20
  %108 = sext i32 %107 to i64, !dbg !18
  %109 = getelementptr bfloat, ptr addrspace(1) %0, i64 %108, !dbg !18
  %110 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %109, i1 false) #3, !dbg !19
  %111 = add i32 %19, 92, !dbg !20
  %112 = sext i32 %111 to i64, !dbg !18
  %113 = getelementptr bfloat, ptr addrspace(1) %0, i64 %112, !dbg !18
  %114 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %113, i1 false) #3, !dbg !19
  br label %.split3.us, !dbg !11

.split.us.preheader:                              ; preds = %5
  %115 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %116 = bitcast i16 %115 to bfloat, !dbg !19
  %117 = fpext bfloat %116 to float, !dbg !21
  %118 = fmul float %117, %117, !dbg !22
  %119 = or disjoint i32 %19, 4, !dbg !20
  %120 = sext i32 %119 to i64, !dbg !18
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %120, !dbg !18
  %122 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %121, i1 true) #3, !dbg !19
  %123 = bitcast i16 %122 to bfloat, !dbg !19
  %124 = fpext bfloat %123 to float, !dbg !21
  %125 = fmul float %124, %124, !dbg !22
  %126 = fadd float %118, %125, !dbg !23
  %127 = or disjoint i32 %19, 8, !dbg !20
  %128 = sext i32 %127 to i64, !dbg !18
  %129 = getelementptr bfloat, ptr addrspace(1) %0, i64 %128, !dbg !18
  %130 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %129, i1 true) #3, !dbg !19
  %131 = bitcast i16 %130 to bfloat, !dbg !19
  %132 = fpext bfloat %131 to float, !dbg !21
  %133 = fmul float %132, %132, !dbg !22
  %134 = fadd float %126, %133, !dbg !23
  %135 = or disjoint i32 %19, 12, !dbg !20
  %136 = sext i32 %135 to i64, !dbg !18
  %137 = getelementptr bfloat, ptr addrspace(1) %0, i64 %136, !dbg !18
  %138 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %137, i1 true) #3, !dbg !19
  %139 = bitcast i16 %138 to bfloat, !dbg !19
  %140 = fpext bfloat %139 to float, !dbg !21
  %141 = fmul float %140, %140, !dbg !22
  %142 = fadd float %134, %141, !dbg !23
  %143 = or disjoint i32 %19, 16, !dbg !20
  %144 = sext i32 %143 to i64, !dbg !18
  %145 = getelementptr bfloat, ptr addrspace(1) %0, i64 %144, !dbg !18
  %146 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %145, i1 true) #3, !dbg !19
  %147 = bitcast i16 %146 to bfloat, !dbg !19
  %148 = fpext bfloat %147 to float, !dbg !21
  %149 = fmul float %148, %148, !dbg !22
  %150 = fadd float %142, %149, !dbg !23
  %151 = or disjoint i32 %19, 20, !dbg !20
  %152 = sext i32 %151 to i64, !dbg !18
  %153 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !18
  %154 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %153, i1 true) #3, !dbg !19
  %155 = bitcast i16 %154 to bfloat, !dbg !19
  %156 = fpext bfloat %155 to float, !dbg !21
  %157 = fmul float %156, %156, !dbg !22
  %158 = fadd float %150, %157, !dbg !23
  %159 = or disjoint i32 %19, 24, !dbg !20
  %160 = sext i32 %159 to i64, !dbg !18
  %161 = getelementptr bfloat, ptr addrspace(1) %0, i64 %160, !dbg !18
  %162 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %161, i1 true) #3, !dbg !19
  %163 = bitcast i16 %162 to bfloat, !dbg !19
  %164 = fpext bfloat %163 to float, !dbg !21
  %165 = fmul float %164, %164, !dbg !22
  %166 = fadd float %158, %165, !dbg !23
  %167 = or disjoint i32 %19, 28, !dbg !20
  %168 = sext i32 %167 to i64, !dbg !18
  %169 = getelementptr bfloat, ptr addrspace(1) %0, i64 %168, !dbg !18
  %170 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %169, i1 true) #3, !dbg !19
  %171 = bitcast i16 %170 to bfloat, !dbg !19
  %172 = fpext bfloat %171 to float, !dbg !21
  %173 = fmul float %172, %172, !dbg !22
  %174 = fadd float %166, %173, !dbg !23
  %175 = add i32 %19, 32, !dbg !20
  %176 = sext i32 %175 to i64, !dbg !18
  %177 = getelementptr bfloat, ptr addrspace(1) %0, i64 %176, !dbg !18
  %178 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %177, i1 true) #3, !dbg !19
  %179 = bitcast i16 %178 to bfloat, !dbg !19
  %180 = fpext bfloat %179 to float, !dbg !21
  %181 = fmul float %180, %180, !dbg !22
  %182 = fadd float %174, %181, !dbg !23
  %183 = add i32 %19, 36, !dbg !20
  %184 = sext i32 %183 to i64, !dbg !18
  %185 = getelementptr bfloat, ptr addrspace(1) %0, i64 %184, !dbg !18
  %186 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %185, i1 true) #3, !dbg !19
  %187 = bitcast i16 %186 to bfloat, !dbg !19
  %188 = fpext bfloat %187 to float, !dbg !21
  %189 = fmul float %188, %188, !dbg !22
  %190 = fadd float %182, %189, !dbg !23
  %191 = add i32 %19, 40, !dbg !20
  %192 = sext i32 %191 to i64, !dbg !18
  %193 = getelementptr bfloat, ptr addrspace(1) %0, i64 %192, !dbg !18
  %194 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %193, i1 true) #3, !dbg !19
  %195 = bitcast i16 %194 to bfloat, !dbg !19
  %196 = fpext bfloat %195 to float, !dbg !21
  %197 = fmul float %196, %196, !dbg !22
  %198 = fadd float %190, %197, !dbg !23
  %199 = add i32 %19, 44, !dbg !20
  %200 = sext i32 %199 to i64, !dbg !18
  %201 = getelementptr bfloat, ptr addrspace(1) %0, i64 %200, !dbg !18
  %202 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %201, i1 true) #3, !dbg !19
  %203 = bitcast i16 %202 to bfloat, !dbg !19
  %204 = fpext bfloat %203 to float, !dbg !21
  %205 = fmul float %204, %204, !dbg !22
  %206 = fadd float %198, %205, !dbg !23
  %207 = add i32 %19, 48, !dbg !20
  %208 = sext i32 %207 to i64, !dbg !18
  %209 = getelementptr bfloat, ptr addrspace(1) %0, i64 %208, !dbg !18
  %210 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %209, i1 true) #3, !dbg !19
  %211 = add i32 %19, 52, !dbg !20
  %212 = sext i32 %211 to i64, !dbg !18
  %213 = getelementptr bfloat, ptr addrspace(1) %0, i64 %212, !dbg !18
  %214 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %213, i1 true) #3, !dbg !19
  %215 = insertelement <2 x i16> poison, i16 %210, i64 0, !dbg !19
  %216 = insertelement <2 x i16> %215, i16 %214, i64 1, !dbg !19
  %217 = bitcast <2 x i16> %216 to <2 x bfloat>, !dbg !19
  %218 = fpext <2 x bfloat> %217 to <2 x float>, !dbg !21
  %219 = fmul <2 x float> %218, %218, !dbg !22
  %220 = extractelement <2 x float> %219, i64 0, !dbg !23
  %221 = fadd float %206, %220, !dbg !23
  %222 = extractelement <2 x float> %219, i64 1, !dbg !23
  %223 = fadd float %221, %222, !dbg !23
  %224 = add i32 %19, 56, !dbg !20
  %225 = sext i32 %224 to i64, !dbg !18
  %226 = getelementptr bfloat, ptr addrspace(1) %0, i64 %225, !dbg !18
  %227 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %226, i1 true) #3, !dbg !19
  %228 = add i32 %19, 60, !dbg !20
  %229 = sext i32 %228 to i64, !dbg !18
  %230 = getelementptr bfloat, ptr addrspace(1) %0, i64 %229, !dbg !18
  %231 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %230, i1 true) #3, !dbg !19
  %232 = insertelement <2 x i16> poison, i16 %227, i64 0, !dbg !19
  %233 = insertelement <2 x i16> %232, i16 %231, i64 1, !dbg !19
  %234 = bitcast <2 x i16> %233 to <2 x bfloat>, !dbg !19
  %235 = fpext <2 x bfloat> %234 to <2 x float>, !dbg !21
  %236 = fmul <2 x float> %235, %235, !dbg !22
  %237 = extractelement <2 x float> %236, i64 0, !dbg !23
  %238 = fadd float %223, %237, !dbg !23
  %239 = extractelement <2 x float> %236, i64 1, !dbg !23
  %240 = fadd float %238, %239, !dbg !23
  %241 = add i32 %19, 64, !dbg !20
  %242 = sext i32 %241 to i64, !dbg !18
  %243 = getelementptr bfloat, ptr addrspace(1) %0, i64 %242, !dbg !18
  %244 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %243, i1 true) #3, !dbg !19
  %245 = add i32 %19, 68, !dbg !20
  %246 = sext i32 %245 to i64, !dbg !18
  %247 = getelementptr bfloat, ptr addrspace(1) %0, i64 %246, !dbg !18
  %248 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %247, i1 true) #3, !dbg !19
  %249 = insertelement <2 x i16> poison, i16 %244, i64 0, !dbg !19
  %250 = insertelement <2 x i16> %249, i16 %248, i64 1, !dbg !19
  %251 = bitcast <2 x i16> %250 to <2 x bfloat>, !dbg !19
  %252 = fpext <2 x bfloat> %251 to <2 x float>, !dbg !21
  %253 = fmul <2 x float> %252, %252, !dbg !22
  %254 = extractelement <2 x float> %253, i64 0, !dbg !23
  %255 = fadd float %240, %254, !dbg !23
  %256 = extractelement <2 x float> %253, i64 1, !dbg !23
  %257 = fadd float %255, %256, !dbg !23
  %258 = add i32 %19, 72, !dbg !20
  %259 = sext i32 %258 to i64, !dbg !18
  %260 = getelementptr bfloat, ptr addrspace(1) %0, i64 %259, !dbg !18
  %261 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %260, i1 true) #3, !dbg !19
  %262 = add i32 %19, 76, !dbg !20
  %263 = sext i32 %262 to i64, !dbg !18
  %264 = getelementptr bfloat, ptr addrspace(1) %0, i64 %263, !dbg !18
  %265 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %264, i1 true) #3, !dbg !19
  %266 = insertelement <2 x i16> poison, i16 %261, i64 0, !dbg !19
  %267 = insertelement <2 x i16> %266, i16 %265, i64 1, !dbg !19
  %268 = bitcast <2 x i16> %267 to <2 x bfloat>, !dbg !19
  %269 = fpext <2 x bfloat> %268 to <2 x float>, !dbg !21
  %270 = fmul <2 x float> %269, %269, !dbg !22
  %271 = extractelement <2 x float> %270, i64 0, !dbg !23
  %272 = fadd float %257, %271, !dbg !23
  %273 = extractelement <2 x float> %270, i64 1, !dbg !23
  %274 = fadd float %272, %273, !dbg !23
  %275 = add i32 %19, 80, !dbg !20
  %276 = sext i32 %275 to i64, !dbg !18
  %277 = getelementptr bfloat, ptr addrspace(1) %0, i64 %276, !dbg !18
  %278 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %277, i1 true) #3, !dbg !19
  %279 = add i32 %19, 84, !dbg !20
  %280 = sext i32 %279 to i64, !dbg !18
  %281 = getelementptr bfloat, ptr addrspace(1) %0, i64 %280, !dbg !18
  %282 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %281, i1 true) #3, !dbg !19
  %283 = insertelement <2 x i16> poison, i16 %278, i64 0, !dbg !19
  %284 = insertelement <2 x i16> %283, i16 %282, i64 1, !dbg !19
  %285 = bitcast <2 x i16> %284 to <2 x bfloat>, !dbg !19
  %286 = fpext <2 x bfloat> %285 to <2 x float>, !dbg !21
  %287 = fmul <2 x float> %286, %286, !dbg !22
  %288 = extractelement <2 x float> %287, i64 0, !dbg !23
  %289 = fadd float %274, %288, !dbg !23
  %290 = extractelement <2 x float> %287, i64 1, !dbg !23
  %291 = fadd float %289, %290, !dbg !23
  %292 = add i32 %19, 88, !dbg !20
  %293 = sext i32 %292 to i64, !dbg !18
  %294 = getelementptr bfloat, ptr addrspace(1) %0, i64 %293, !dbg !18
  %295 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %294, i1 true) #3, !dbg !19
  %296 = add i32 %19, 92, !dbg !20
  %297 = sext i32 %296 to i64, !dbg !18
  %298 = getelementptr bfloat, ptr addrspace(1) %0, i64 %297, !dbg !18
  %299 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %298, i1 true) #3, !dbg !19
  %300 = insertelement <2 x i16> poison, i16 %295, i64 0, !dbg !19
  %301 = insertelement <2 x i16> %300, i16 %299, i64 1, !dbg !19
  %302 = bitcast <2 x i16> %301 to <2 x bfloat>, !dbg !19
  %303 = fpext <2 x bfloat> %302 to <2 x float>, !dbg !21
  %304 = fmul <2 x float> %303, %303, !dbg !22
  %305 = extractelement <2 x float> %304, i64 0, !dbg !23
  %306 = fadd float %291, %305, !dbg !23
  %307 = extractelement <2 x float> %304, i64 1, !dbg !23
  %308 = fadd float %306, %307, !dbg !23
  br label %.split3.us, !dbg !11

.split3.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.us-phi = phi float [ %308, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !11
  %309 = and i32 %8, 63, !dbg !11
  %310 = or disjoint i32 %7, %309, !dbg !12
  %311 = icmp slt i32 %310, 6144, !dbg !13
  %312 = bitcast float %.us-phi to i32, !dbg !24
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 2, i32 31), !dbg !24
  %314 = bitcast i32 %313 to float, !dbg !24
  %315 = fadd float %.us-phi, %314, !dbg !28
  %316 = bitcast float %315 to i32, !dbg !24
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 1, i32 31), !dbg !24
  %318 = bitcast i32 %317 to float, !dbg !24
  %319 = fadd float %315, %318, !dbg !28
  %320 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %321 = bitcast float %319 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %322 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %309, !dbg !30
  %323 = load i32, ptr addrspace(3) %322, align 4, !dbg !30
  %324 = sext i32 %310 to i64, !dbg !31
  %325 = getelementptr float, ptr addrspace(1) %1, i64 %324, !dbg !31
  %326 = and i32 %8, 192, !dbg !32
  %327 = icmp eq i32 %326, 0, !dbg !32
  %328 = and i1 %327, %311, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %323, ptr addrspace(1) %325, i1 %328) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3sg2gpb3pdyenoywzsdvtinxcpgtgfewdle2u5ewpsnkitx2ubu.py", directory: "results/my_experiment/torchinductor_cache_0/3s")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_7, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_7", linkageName: "triton_red_fused__to_copy_mean_pow_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 44, scope: !6)
!17 = !DILocation(line: 38, column: 54, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 59, scope: !6)
!20 = !DILocation(line: 38, column: 49, scope: !6)
!21 = !DILocation(line: 38, column: 121, scope: !6)
!22 = !DILocation(line: 40, column: 22, scope: !6)
!23 = !DILocation(line: 42, column: 23, scope: !6)
!24 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 44, column: 25, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 44, column: 28, scope: !6)
!31 = !DILocation(line: 45, column: 25, scope: !6)
!32 = !DILocation(line: 45, column: 36, scope: !6)
!33 = !DILocation(line: 45, column: 4, scope: !6)
