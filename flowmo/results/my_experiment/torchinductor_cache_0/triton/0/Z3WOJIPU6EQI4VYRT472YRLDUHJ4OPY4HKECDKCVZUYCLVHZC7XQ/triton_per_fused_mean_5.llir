; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused_mean_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = shl i32 %9, 2, !dbg !10
  %13 = and i32 %12, 508, !dbg !10
  %14 = shl nuw nsw i32 %13, 9, !dbg !11
  %15 = add i32 %14, %8, !dbg !12
  %16 = add i32 %8, 512, !dbg !11
  %17 = add i32 %16, %14, !dbg !12
  %18 = add i32 %8, 1024, !dbg !11
  %19 = add i32 %18, %14, !dbg !12
  %20 = add i32 %8, 1536, !dbg !11
  %21 = add i32 %20, %14, !dbg !12
  %22 = sext i32 %15 to i64, !dbg !13
  %23 = getelementptr bfloat, ptr addrspace(1) %1, i64 %22, !dbg !13
  %24 = sext i32 %17 to i64, !dbg !13
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !13
  %26 = sext i32 %19 to i64, !dbg !13
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !13
  %28 = sext i32 %21 to i64, !dbg !13
  %29 = getelementptr bfloat, ptr addrspace(1) %1, i64 %28, !dbg !13
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %23) #4, !dbg !14
  %31 = bitcast i16 %30 to bfloat, !dbg !14
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %25) #4, !dbg !14
  %33 = bitcast i16 %32 to bfloat, !dbg !14
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %27) #4, !dbg !14
  %35 = bitcast i16 %34 to bfloat, !dbg !14
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %29) #4, !dbg !14
  %37 = bitcast i16 %36 to bfloat, !dbg !14
  %38 = fpext bfloat %31 to float, !dbg !15
  %39 = fpext bfloat %33 to float, !dbg !15
  %40 = fpext bfloat %35 to float, !dbg !15
  %41 = fpext bfloat %37 to float, !dbg !15
  %42 = zext nneg i32 %13 to i64, !dbg !16
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !16
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %43) #4, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !17
  %49 = bitcast i32 %45 to float, !dbg !17
  %50 = bitcast i32 %46 to float, !dbg !17
  %51 = bitcast i32 %47 to float, !dbg !17
  %52 = bitcast i32 %48 to float, !dbg !17
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !18
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %53) #4, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !19
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !19
  %59 = bitcast i32 %55 to float, !dbg !19
  %60 = bitcast i32 %56 to float, !dbg !19
  %61 = bitcast i32 %57 to float, !dbg !19
  %62 = bitcast i32 %58 to float, !dbg !19
  %63 = fmul float %38, 2.000000e+00, !dbg !20
  %64 = fmul float %39, 2.000000e+00, !dbg !20
  %65 = fmul float %40, 2.000000e+00, !dbg !20
  %66 = fmul float %41, 2.000000e+00, !dbg !20
  %67 = fsub float %63, %49, !dbg !21
  %68 = fsub float %64, %50, !dbg !21
  %69 = fsub float %65, %51, !dbg !21
  %70 = fsub float %66, %52, !dbg !21
  %71 = fmul float %67, 1.000000e+01, !dbg !22
  %72 = fmul float %68, 1.000000e+01, !dbg !22
  %73 = fmul float %69, 1.000000e+01, !dbg !22
  %74 = fmul float %70, 1.000000e+01, !dbg !22
  %75 = fmul float %71, 0x3FF7154760000000, !dbg !23
  %76 = tail call float @llvm.nvvm.ex2.approx.f(float %75), !dbg !23
  %77 = fmul float %72, 0x3FF7154760000000, !dbg !23
  %78 = tail call float @llvm.nvvm.ex2.approx.f(float %77), !dbg !23
  %79 = fmul float %73, 0x3FF7154760000000, !dbg !23
  %80 = tail call float @llvm.nvvm.ex2.approx.f(float %79), !dbg !23
  %81 = fmul float %74, 0x3FF7154760000000, !dbg !23
  %82 = tail call float @llvm.nvvm.ex2.approx.f(float %81), !dbg !23
  %83 = tail call float @llvm.nvvm.div.full(float %76, float %59), !dbg !24
  %84 = tail call float @llvm.nvvm.div.full(float %78, float %60), !dbg !24
  %85 = tail call float @llvm.nvvm.div.full(float %80, float %61), !dbg !24
  %86 = tail call float @llvm.nvvm.div.full(float %82, float %62), !dbg !24
  %87 = fadd float %83, %84, !dbg !25
  %88 = fadd float %87, %85, !dbg !25
  %89 = fadd float %88, %86, !dbg !25
  %90 = bitcast float %89 to i32, !dbg !30
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !30
  %92 = bitcast i32 %91 to float, !dbg !30
  %93 = fadd float %89, %92, !dbg !25
  %94 = bitcast float %93 to i32, !dbg !30
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = fadd float %93, %96, !dbg !25
  %98 = bitcast float %97 to i32, !dbg !30
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = fadd float %97, %100, !dbg !25
  %102 = bitcast float %101 to i32, !dbg !30
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = fadd float %101, %104, !dbg !25
  %106 = bitcast float %105 to i32, !dbg !30
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = fadd float %105, %108, !dbg !25
  %110 = and i32 %11, 3, !dbg !30
  %111 = icmp eq i32 %10, 0, !dbg !30
  %112 = zext nneg i32 %110 to i64, !dbg !30
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i64 %112, !dbg !30
  %114 = bitcast float %109 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 %111) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %115 = icmp slt i32 %9, 4, !dbg !30
  %116 = sext i32 %9 to i64, !dbg !30
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %116, !dbg !30
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %115) #4, !dbg !30
  %119 = bitcast i32 %118 to float, !dbg !30
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !30
  %121 = bitcast i32 %120 to float, !dbg !30
  %122 = fadd float %119, %121, !dbg !25
  %123 = bitcast float %122 to i32, !dbg !30
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !30
  %125 = bitcast i32 %124 to float, !dbg !30
  %126 = fadd float %122, %125, !dbg !25
  %127 = and i32 %9, 3, !dbg !30
  %128 = icmp eq i32 %127, 0, !dbg !30
  %129 = and i1 %115, %128, !dbg !30
  %130 = bitcast float %126 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %130, i1 %129) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %131 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %132 = fadd float %131, 0.000000e+00, !dbg !31
  %133 = tail call float @llvm.nvvm.div.full(float %132, float 5.120000e+02), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %134 = sext i32 %8 to i64, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !37
  %136 = and i32 %9, 127, !dbg !38
  %137 = icmp eq i32 %136, 0, !dbg !38
  %138 = bitcast float %133 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %135, i1 %137) #4, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4u3qn25xsqgeyfnua2bo73unnpp4tdzibbvnujonupx5n24hsoq.py", directory: "results/my_experiment/torchinductor_cache_0/4u")
!4 = !{ptr @triton_per_fused_mean_5, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused_mean_5", linkageName: "triton_per_fused_mean_5", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 25, column: 28, scope: !6)
!10 = !DILocation(line: 28, column: 28, scope: !6)
!11 = !DILocation(line: 35, column: 39, scope: !6)
!12 = !DILocation(line: 35, column: 35, scope: !6)
!13 = !DILocation(line: 35, column: 30, scope: !6)
!14 = !DILocation(line: 35, column: 46, scope: !6)
!15 = !DILocation(line: 35, column: 55, scope: !6)
!16 = !DILocation(line: 36, column: 30, scope: !6)
!17 = !DILocation(line: 36, column: 37, scope: !6)
!18 = !DILocation(line: 37, column: 31, scope: !6)
!19 = !DILocation(line: 37, column: 38, scope: !6)
!20 = !DILocation(line: 39, column: 18, scope: !6)
!21 = !DILocation(line: 43, column: 18, scope: !6)
!22 = !DILocation(line: 45, column: 18, scope: !6)
!23 = !DILocation(line: 46, column: 24, scope: !6)
!24 = !DILocation(line: 47, column: 21, scope: !6)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!29 = !DILocation(line: 49, column: 59, scope: !6)
!30 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 57, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 49, column: 45, scope: !6)
!35 = !DILocation(line: 51, column: 21, scope: !6)
!36 = !DILocation(line: 52, column: 4, scope: !6)
!37 = !DILocation(line: 53, column: 28, scope: !6)
!38 = !DILocation(line: 53, column: 40, scope: !6)
!39 = !DILocation(line: 53, column: 4, scope: !6)
