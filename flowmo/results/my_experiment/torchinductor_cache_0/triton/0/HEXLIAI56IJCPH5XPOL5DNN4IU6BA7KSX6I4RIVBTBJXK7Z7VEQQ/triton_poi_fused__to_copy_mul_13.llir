; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused__to_copy_mul_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 10, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 3, !dbg !11
  %11 = and i32 %10, 1016, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = or disjoint i32 %12, 4, !dbg !12
  %14 = sdiv i32 %12, 768, !dbg !13
  %15 = sdiv i32 %12, 64, !dbg !14
  %16 = srem i32 %15, 12, !dbg !15
  %17 = srem i32 %14, 4096, !dbg !16
  %18 = sdiv i32 %12, 3145728, !dbg !17
  %19 = mul i32 %15, 64, !dbg !18
  %.decomposed = sub i32 %12, %19, !dbg !18
  %20 = srem i32 %13, 64, !dbg !18
  %21 = mul i32 %14, 1536, !dbg !19
  %22 = add i32 %21, %12, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %24) #1, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !21
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !21
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !21
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !21
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !21
  %34 = shl nsw i32 %16, 12, !dbg !22
  %35 = mul nsw i32 %18, 49152, !dbg !23
  %36 = add nsw i32 %35, %17, !dbg !24
  %37 = add nsw i32 %36, %34, !dbg !25
  %38 = sext i32 %37 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %39) #1, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %39) #1, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %39) #1, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %39) #1, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %39) #1, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %39) #1, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %39) #1, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %39) #1, !dbg !27
  %48 = sext i32 %.decomposed to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !28
  %50 = sext i32 %20 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %49) #1, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %51) #1, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !29
  %62 = sext i32 %12 to i64, !dbg !30
  %63 = getelementptr bfloat, ptr addrspace(1) %3, i64 %62, !dbg !30
  %64 = fpext <2 x bfloat> %27 to <2 x float>, !dbg !31
  %65 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !27
  %66 = insertelement <2 x i32> %65, i32 %41, i64 1, !dbg !27
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !27
  %68 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !29
  %69 = insertelement <2 x i32> %68, i32 %54, i64 1, !dbg !29
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !29
  %71 = fmul <2 x float> %67, %64, !dbg !32
  %72 = fmul <2 x float> %71, %70, !dbg !33
  %73 = fptrunc <2 x float> %72 to <2 x bfloat>, !dbg !34
  %74 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !31
  %75 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !27
  %76 = insertelement <2 x i32> %75, i32 %43, i64 1, !dbg !27
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !27
  %78 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !29
  %79 = insertelement <2 x i32> %78, i32 %56, i64 1, !dbg !29
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !29
  %81 = fmul <2 x float> %74, %77, !dbg !32
  %82 = fmul <2 x float> %81, %80, !dbg !33
  %83 = fptrunc <2 x float> %82 to <2 x bfloat>, !dbg !34
  %84 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !31
  %85 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !27
  %86 = insertelement <2 x i32> %85, i32 %45, i64 1, !dbg !27
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !27
  %88 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !29
  %89 = insertelement <2 x i32> %88, i32 %59, i64 1, !dbg !29
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !29
  %91 = fmul <2 x float> %84, %87, !dbg !32
  %92 = fmul <2 x float> %91, %90, !dbg !33
  %93 = fptrunc <2 x float> %92 to <2 x bfloat>, !dbg !34
  %94 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !31
  %95 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !27
  %96 = insertelement <2 x i32> %95, i32 %47, i64 1, !dbg !27
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !27
  %98 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !29
  %99 = insertelement <2 x i32> %98, i32 %61, i64 1, !dbg !29
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !29
  %101 = fmul <2 x float> %94, %97, !dbg !32
  %102 = fmul <2 x float> %101, %100, !dbg !33
  %103 = fptrunc <2 x float> %102 to <2 x bfloat>, !dbg !34
  %104 = bitcast <2 x bfloat> %73 to i32, !dbg !34
  %105 = bitcast <2 x bfloat> %83 to i32, !dbg !34
  %106 = bitcast <2 x bfloat> %93 to i32, !dbg !34
  %107 = bitcast <2 x bfloat> %103 to i32, !dbg !34
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %104, i32 %105, i32 %106, i32 %107, ptr addrspace(1) %63) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5cv7t6dhky5crhipklaoojjbbnmlzp5wv3td7rm53q2qpulpbug.py", directory: "results/my_experiment/torchinductor_cache_0/5c")
!4 = !{ptr @triton_poi_fused__to_copy_mul_13, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_mul_13", linkageName: "triton_poi_fused__to_copy_mul_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 19, scope: !6)
!14 = !DILocation(line: 25, column: 21, scope: !6)
!15 = !DILocation(line: 25, column: 27, scope: !6)
!16 = !DILocation(line: 26, column: 28, scope: !6)
!17 = !DILocation(line: 27, column: 19, scope: !6)
!18 = !DILocation(line: 28, column: 19, scope: !6)
!19 = !DILocation(line: 30, column: 35, scope: !6)
!20 = !DILocation(line: 30, column: 30, scope: !6)
!21 = !DILocation(line: 30, column: 45, scope: !6)
!22 = !DILocation(line: 31, column: 40, scope: !6)
!23 = !DILocation(line: 31, column: 51, scope: !6)
!24 = !DILocation(line: 31, column: 35, scope: !6)
!25 = !DILocation(line: 31, column: 45, scope: !6)
!26 = !DILocation(line: 31, column: 30, scope: !6)
!27 = !DILocation(line: 31, column: 56, scope: !6)
!28 = !DILocation(line: 32, column: 30, scope: !6)
!29 = !DILocation(line: 32, column: 35, scope: !6)
!30 = !DILocation(line: 39, column: 25, scope: !6)
!31 = !DILocation(line: 30, column: 54, scope: !6)
!32 = !DILocation(line: 34, column: 18, scope: !6)
!33 = !DILocation(line: 37, column: 18, scope: !6)
!34 = !DILocation(line: 39, column: 36, scope: !6)
!35 = !DILocation(line: 39, column: 4, scope: !6)
