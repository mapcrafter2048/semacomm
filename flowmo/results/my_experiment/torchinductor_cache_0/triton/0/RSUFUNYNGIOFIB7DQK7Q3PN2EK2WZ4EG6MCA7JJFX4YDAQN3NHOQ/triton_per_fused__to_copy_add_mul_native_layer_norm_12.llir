; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused__to_copy_add_mul_native_layer_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = shl i32 %9, 2, !dbg !10
  %13 = and i32 %12, 1020, !dbg !10
  %14 = icmp samesign ult i32 %13, 768, !dbg !11
  %15 = mul i32 %8, 768, !dbg !12
  %16 = add i32 %13, %15, !dbg !13
  %17 = sext i32 %16 to i64, !dbg !14
  %18 = getelementptr bfloat, ptr addrspace(1) %1, i64 %17, !dbg !14
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %18, i1 %14) #5, !dbg !15
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !15
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !15
  %22 = extractvalue { i32, i32 } %19, 1, !dbg !15
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !15
  %24 = extractelement <2 x bfloat> %21, i64 0, !dbg !15
  %25 = extractelement <2 x bfloat> %21, i64 1, !dbg !15
  %26 = extractelement <2 x bfloat> %23, i64 0, !dbg !15
  %27 = extractelement <2 x bfloat> %23, i64 1, !dbg !15
  %28 = fpext bfloat %24 to float, !dbg !16
  %29 = fpext bfloat %25 to float, !dbg !16
  %30 = fpext bfloat %26 to float, !dbg !16
  %31 = fpext bfloat %27 to float, !dbg !16
  %32 = fadd float %28, %29, !dbg !17
  %33 = fadd float %32, %30, !dbg !17
  %34 = fadd float %33, %31, !dbg !17
  %35 = select i1 %14, float %34, float 0.000000e+00, !dbg !17
  %36 = bitcast float %35 to i32, !dbg !22
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 16, i32 31), !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = fadd float %35, %38, !dbg !17
  %40 = bitcast float %39 to i32, !dbg !22
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = fadd float %39, %42, !dbg !17
  %44 = bitcast float %43 to i32, !dbg !22
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = fadd float %43, %46, !dbg !17
  %48 = bitcast float %47 to i32, !dbg !22
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = fadd float %47, %50, !dbg !17
  %52 = bitcast float %51 to i32, !dbg !22
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = fadd float %51, %54, !dbg !17
  %56 = and i32 %11, 7, !dbg !22
  %57 = icmp eq i32 %10, 0, !dbg !22
  %58 = zext nneg i32 %56 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !22
  %60 = bitcast float %55 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 %57) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %61 = icmp slt i32 %9, 8, !dbg !22
  %62 = sext i32 %9 to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !22
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #5, !dbg !22
  %65 = bitcast i32 %64 to float, !dbg !22
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !22
  %67 = bitcast i32 %66 to float, !dbg !22
  %68 = fadd float %65, %67, !dbg !17
  %69 = bitcast float %68 to i32, !dbg !22
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = fadd float %68, %71, !dbg !17
  %73 = bitcast float %72 to i32, !dbg !22
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !22
  %75 = bitcast i32 %74 to float, !dbg !22
  %76 = fadd float %72, %75, !dbg !17
  %77 = and i32 %9, 7, !dbg !22
  %78 = icmp eq i32 %77, 0, !dbg !22
  %79 = and i1 %61, %78, !dbg !22
  %80 = bitcast float %76 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %80, i1 %79) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %81 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %82 = fadd float %81, 0.000000e+00, !dbg !23
  %83 = tail call float @llvm.nvvm.div.full(float %82, float 7.680000e+02), !dbg !27
  %84 = fsub float %28, %83, !dbg !28
  %85 = fsub float %29, %83, !dbg !28
  %86 = fsub float %30, %83, !dbg !28
  %87 = fsub float %31, %83, !dbg !28
  %88 = fmul float %84, %84, !dbg !29
  %89 = fmul float %85, %85, !dbg !29
  %90 = fmul float %86, %86, !dbg !29
  %91 = fmul float %87, %87, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %92 = fadd float %88, %89, !dbg !32
  %93 = fadd float %90, %92, !dbg !32
  %94 = fadd float %91, %93, !dbg !32
  %95 = select i1 %14, float %94, float 0.000000e+00, !dbg !32
  %96 = bitcast float %95 to i32, !dbg !30
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 16, i32 31), !dbg !30
  %98 = bitcast i32 %97 to float, !dbg !30
  %99 = fadd float %95, %98, !dbg !32
  %100 = bitcast float %99 to i32, !dbg !30
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = fadd float %99, %102, !dbg !32
  %104 = bitcast float %103 to i32, !dbg !30
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = fadd float %103, %106, !dbg !32
  %108 = bitcast float %107 to i32, !dbg !30
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !30
  %110 = bitcast i32 %109 to float, !dbg !30
  %111 = fadd float %107, %110, !dbg !32
  %112 = bitcast float %111 to i32, !dbg !30
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = fadd float %111, %114, !dbg !32
  %116 = bitcast float %115 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %116, i1 %57) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %117 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #5, !dbg !30
  %118 = bitcast i32 %117 to float, !dbg !30
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !30
  %120 = bitcast i32 %119 to float, !dbg !30
  %121 = fadd float %118, %120, !dbg !32
  %122 = bitcast float %121 to i32, !dbg !30
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !30
  %124 = bitcast i32 %123 to float, !dbg !30
  %125 = fadd float %121, %124, !dbg !32
  %126 = bitcast float %125 to i32, !dbg !30
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !30
  %128 = bitcast i32 %127 to float, !dbg !30
  %129 = fadd float %125, %128, !dbg !32
  %130 = bitcast float %129 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %130, i1 %79) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %131 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %132 = fadd float %131, 0.000000e+00, !dbg !33
  %133 = tail call float @llvm.nvvm.div.full(float %132, float 7.680000e+02), !dbg !35
  %134 = fadd float %133, 0x3EB0C6F7A0000000, !dbg !36
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %135, 0, !dbg !37
  br i1 %.not.i, label %138, label %136, !dbg !37

136:                                              ; preds = %7
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

138:                                              ; preds = %7
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %136, %138
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], !dbg !37
  %140 = fmul float %84, %.0.i, !dbg !38
  %141 = fmul float %85, %.0.i, !dbg !38
  %142 = fmul float %86, %.0.i, !dbg !38
  %143 = fmul float %87, %.0.i, !dbg !38
  %144 = fadd float %140, 0.000000e+00, !dbg !39
  %145 = fadd float %141, 0.000000e+00, !dbg !39
  %146 = fadd float %142, 0.000000e+00, !dbg !39
  %147 = fadd float %143, 0.000000e+00, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %148 = sext i32 %8 to i64, !dbg !41
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !41
  %150 = and i32 %9, 255, !dbg !42
  %151 = icmp eq i32 %150, 0, !dbg !42
  %152 = bitcast float %.0.i to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %149, i1 %151) #5, !dbg !42
  %153 = getelementptr bfloat, ptr addrspace(1) %3, i64 %17, !dbg !43
  %154 = fptrunc float %144 to bfloat, !dbg !44
  %155 = fptrunc float %145 to bfloat, !dbg !44
  %156 = fptrunc float %146 to bfloat, !dbg !44
  %157 = fptrunc float %147 to bfloat, !dbg !44
  %158 = insertelement <2 x bfloat> poison, bfloat %154, i64 0, !dbg !44
  %159 = insertelement <2 x bfloat> %158, bfloat %155, i64 1, !dbg !44
  %160 = bitcast <2 x bfloat> %159 to i32, !dbg !44
  %161 = insertelement <2 x bfloat> poison, bfloat %156, i64 0, !dbg !44
  %162 = insertelement <2 x bfloat> %161, bfloat %157, i64 1, !dbg !44
  %163 = bitcast <2 x bfloat> %162 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %163, ptr addrspace(1) %153, i1 %14) #5, !dbg !44
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !45
  %165 = bitcast float %83 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %164, i1 %151) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clo6dvttlumzhd2g6jdbv7djlktt6qkjuzp6cgxvv2xctcbohrpz.py", directory: "results/my_experiment/torchinductor_cache_0/lo")
!4 = !{ptr @triton_per_fused__to_copy_add_mul_native_layer_norm_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mul_native_layer_norm_12", linkageName: "triton_per_fused__to_copy_add_mul_native_layer_norm_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 25, column: 28, scope: !6)
!10 = !DILocation(line: 28, column: 28, scope: !6)
!11 = !DILocation(line: 30, column: 25, scope: !6)
!12 = !DILocation(line: 35, column: 41, scope: !6)
!13 = !DILocation(line: 35, column: 37, scope: !6)
!14 = !DILocation(line: 35, column: 30, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 35, column: 69, scope: !6)
!17 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!20 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!21 = !DILocation(line: 41, column: 57, scope: !6)
!22 = !DILocation(line: 286, column: 36, scope: !20, inlinedAt: !21)
!23 = !DILocation(line: 57, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 41, column: 44, scope: !6)
!27 = !DILocation(line: 44, column: 20, scope: !6)
!28 = !DILocation(line: 45, column: 19, scope: !6)
!29 = !DILocation(line: 46, column: 20, scope: !6)
!30 = !DILocation(line: 286, column: 36, scope: !20, inlinedAt: !31)
!31 = !DILocation(line: 49, column: 59, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 57, column: 15, scope: !24, inlinedAt: !34)
!34 = !DILocation(line: 49, column: 45, scope: !6)
!35 = !DILocation(line: 51, column: 21, scope: !6)
!36 = !DILocation(line: 53, column: 20, scope: !6)
!37 = !DILocation(line: 54, column: 28, scope: !6)
!38 = !DILocation(line: 56, column: 20, scope: !6)
!39 = !DILocation(line: 60, column: 20, scope: !6)
!40 = !DILocation(line: 62, column: 4, scope: !6)
!41 = !DILocation(line: 63, column: 28, scope: !6)
!42 = !DILocation(line: 63, column: 40, scope: !6)
!43 = !DILocation(line: 64, column: 25, scope: !6)
!44 = !DILocation(line: 64, column: 48, scope: !6)
!45 = !DILocation(line: 65, column: 25, scope: !6)
!46 = !DILocation(line: 65, column: 37, scope: !6)
!47 = !DILocation(line: 65, column: 4, scope: !6)
