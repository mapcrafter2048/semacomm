; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mul_native_layer_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11, ptr addrspace(1) readnone captures(none) %12) local_unnamed_addr !dbg !6 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %16 = and i32 %15, 31, !dbg !10
  %17 = lshr i32 %15, 5, !dbg !10
  %18 = shl i32 %15, 2, !dbg !10
  %19 = and i32 %18, 2044, !dbg !10
  %20 = sdiv i32 %14, 4096, !dbg !11
  %21 = icmp samesign ult i32 %19, 1152, !dbg !12
  %22 = mul i32 %14, 1152, !dbg !13
  %23 = add i32 %19, %22, !dbg !14
  %24 = sext i32 %23 to i64, !dbg !15
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !15
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %21) #5, !dbg !16
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !16
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !16
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !16
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !16
  %31 = mul i32 %20, 6912, !dbg !17
  %32 = add i32 %19, %31, !dbg !18
  %33 = sext i32 %32 to i64, !dbg !19
  %34 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !19
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %21) #5, !dbg !20
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !20
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !20
  %38 = extractvalue { i32, i32 } %35, 1, !dbg !20
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !20
  %40 = getelementptr bfloat, ptr addrspace(1) %3, i64 %24, !dbg !21
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 %21) #5, !dbg !22
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !22
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !22
  %44 = extractvalue { i32, i32 } %41, 1, !dbg !22
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !22
  %46 = zext nneg i32 %19 to i64, !dbg !23
  %47 = getelementptr bfloat, ptr addrspace(1) %4, i64 %46, !dbg !23
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %47, i1 %21) #5, !dbg !24
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !24
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !24
  %51 = extractvalue { i32, i32 } %48, 1, !dbg !24
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !24
  %53 = select i1 %21, float 1.000000e+00, float 0.000000e+00, !dbg !25
  %54 = getelementptr bfloat, ptr addrspace(1) %7, i64 %24, !dbg !26
  %55 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !27
  %56 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !28
  %57 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !29
  %58 = fpext <2 x bfloat> %50 to <2 x float>, !dbg !30
  %59 = fadd <2 x float> %57, %58, !dbg !31
  %60 = fmul <2 x float> %59, %56, !dbg !32
  %61 = fadd <2 x float> %60, %55, !dbg !33
  %62 = extractelement <2 x float> %61, i64 0, !dbg !34
  %63 = select i1 %21, float %62, float 0.000000e+00, !dbg !34
  %64 = extractelement <2 x float> %61, i64 1, !dbg !34
  %65 = select i1 %21, float %64, float 0.000000e+00, !dbg !34
  %66 = fptrunc <2 x float> %61 to <2 x bfloat>, !dbg !35
  %67 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !27
  %68 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !28
  %69 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !29
  %70 = fpext <2 x bfloat> %52 to <2 x float>, !dbg !30
  %71 = fadd <2 x float> %69, %70, !dbg !31
  %72 = fmul <2 x float> %71, %68, !dbg !32
  %73 = fadd <2 x float> %72, %67, !dbg !33
  %74 = extractelement <2 x float> %73, i64 0, !dbg !34
  %75 = select i1 %21, float %74, float 0.000000e+00, !dbg !34
  %76 = extractelement <2 x float> %73, i64 1, !dbg !34
  %77 = select i1 %21, float %76, float 0.000000e+00, !dbg !34
  %78 = fptrunc <2 x float> %73 to <2 x bfloat>, !dbg !35
  %79 = bitcast <2 x bfloat> %66 to i32, !dbg !35
  %80 = bitcast <2 x bfloat> %78 to i32, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %79, i32 %80, ptr addrspace(1) %54, i1 %21) #5, !dbg !35
  %81 = fsub float %65, %63, !dbg !36
  %82 = select i1 %21, float 2.000000e+00, float 0.000000e+00, !dbg !41
  %83 = fcmp oeq float %82, 0.000000e+00, !dbg !42
  %84 = tail call float @llvm.nvvm.div.full(float %53, float %82), !dbg !43
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !44
  %86 = fmul float %85, %81, !dbg !45
  %87 = fadd float %63, %86, !dbg !46
  %88 = fmul float %81, %81, !dbg !47
  %89 = fmul float %53, %88, !dbg !48
  %90 = fmul float %85, %89, !dbg !49
  %91 = fadd float %90, 0.000000e+00, !dbg !50
  %92 = fsub float %75, %87, !dbg !36
  %93 = select i1 %21, float 3.000000e+00, float 0.000000e+00, !dbg !41
  %94 = fcmp oeq float %93, 0.000000e+00, !dbg !42
  %95 = tail call float @llvm.nvvm.div.full(float %53, float %93), !dbg !43
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !44
  %97 = fmul float %96, %92, !dbg !45
  %98 = fadd float %87, %97, !dbg !46
  %99 = fmul float %92, %92, !dbg !47
  %100 = fmul float %82, %99, !dbg !48
  %101 = fmul float %96, %100, !dbg !49
  %102 = fadd float %91, %101, !dbg !50
  %103 = fsub float %77, %98, !dbg !36
  %104 = select i1 %21, float 4.000000e+00, float 0.000000e+00, !dbg !41
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !42
  %106 = tail call float @llvm.nvvm.div.full(float %53, float %104), !dbg !43
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !44
  %108 = fmul float %107, %103, !dbg !45
  %109 = fadd float %98, %108, !dbg !46
  %110 = fmul float %103, %103, !dbg !47
  %111 = fmul float %93, %110, !dbg !48
  %112 = fmul float %107, %111, !dbg !49
  %113 = fadd float %102, %112, !dbg !50
  %114 = bitcast float %109 to i32, !dbg !51
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !51
  %116 = bitcast i32 %115 to float, !dbg !51
  %117 = bitcast float %113 to i32, !dbg !51
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !51
  %119 = bitcast i32 %118 to float, !dbg !51
  %120 = bitcast float %104 to i32, !dbg !51
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !51
  %122 = bitcast i32 %121 to float, !dbg !51
  %123 = fsub float %116, %109, !dbg !36
  %124 = fadd float %104, %122, !dbg !41
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !42
  %126 = tail call float @llvm.nvvm.div.full(float %122, float %124), !dbg !43
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !44
  %128 = fmul float %127, %123, !dbg !45
  %129 = fadd float %109, %128, !dbg !46
  %130 = fadd float %113, %119, !dbg !52
  %131 = fmul float %123, %123, !dbg !47
  %132 = fmul float %104, %131, !dbg !48
  %133 = fmul float %127, %132, !dbg !49
  %134 = fadd float %130, %133, !dbg !50
  %135 = bitcast float %129 to i32, !dbg !51
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !51
  %137 = bitcast i32 %136 to float, !dbg !51
  %138 = bitcast float %134 to i32, !dbg !51
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !51
  %140 = bitcast i32 %139 to float, !dbg !51
  %141 = bitcast float %124 to i32, !dbg !51
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !51
  %143 = bitcast i32 %142 to float, !dbg !51
  %144 = fsub float %137, %129, !dbg !36
  %145 = fadd float %124, %143, !dbg !41
  %146 = fcmp oeq float %145, 0.000000e+00, !dbg !42
  %147 = tail call float @llvm.nvvm.div.full(float %143, float %145), !dbg !43
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !44
  %149 = fmul float %148, %144, !dbg !45
  %150 = fadd float %129, %149, !dbg !46
  %151 = fadd float %134, %140, !dbg !52
  %152 = fmul float %144, %144, !dbg !47
  %153 = fmul float %124, %152, !dbg !48
  %154 = fmul float %148, %153, !dbg !49
  %155 = fadd float %151, %154, !dbg !50
  %156 = bitcast float %150 to i32, !dbg !51
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !51
  %158 = bitcast i32 %157 to float, !dbg !51
  %159 = bitcast float %155 to i32, !dbg !51
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !51
  %161 = bitcast i32 %160 to float, !dbg !51
  %162 = bitcast float %145 to i32, !dbg !51
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !51
  %164 = bitcast i32 %163 to float, !dbg !51
  %165 = fsub float %158, %150, !dbg !36
  %166 = fadd float %145, %164, !dbg !41
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !42
  %168 = tail call float @llvm.nvvm.div.full(float %164, float %166), !dbg !43
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !44
  %170 = fmul float %169, %165, !dbg !45
  %171 = fadd float %150, %170, !dbg !46
  %172 = fadd float %155, %161, !dbg !52
  %173 = fmul float %165, %165, !dbg !47
  %174 = fmul float %145, %173, !dbg !48
  %175 = fmul float %169, %174, !dbg !49
  %176 = fadd float %172, %175, !dbg !50
  %177 = bitcast float %171 to i32, !dbg !51
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !51
  %179 = bitcast i32 %178 to float, !dbg !51
  %180 = bitcast float %176 to i32, !dbg !51
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !51
  %182 = bitcast i32 %181 to float, !dbg !51
  %183 = bitcast float %166 to i32, !dbg !51
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !51
  %185 = bitcast i32 %184 to float, !dbg !51
  %186 = fsub float %179, %171, !dbg !36
  %187 = fadd float %166, %185, !dbg !41
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !42
  %189 = tail call float @llvm.nvvm.div.full(float %185, float %187), !dbg !43
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !44
  %191 = fmul float %190, %186, !dbg !45
  %192 = fadd float %171, %191, !dbg !46
  %193 = fadd float %176, %182, !dbg !52
  %194 = fmul float %186, %186, !dbg !47
  %195 = fmul float %166, %194, !dbg !48
  %196 = fmul float %190, %195, !dbg !49
  %197 = fadd float %193, %196, !dbg !50
  %198 = bitcast float %192 to i32, !dbg !51
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 1, i32 31), !dbg !51
  %200 = bitcast i32 %199 to float, !dbg !51
  %201 = bitcast float %197 to i32, !dbg !51
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !51
  %203 = bitcast i32 %202 to float, !dbg !51
  %204 = bitcast float %187 to i32, !dbg !51
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !51
  %206 = bitcast i32 %205 to float, !dbg !51
  %207 = fsub float %200, %192, !dbg !36
  %208 = fadd float %187, %206, !dbg !41
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !42
  %210 = tail call float @llvm.nvvm.div.full(float %206, float %208), !dbg !43
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !44
  %212 = fmul float %211, %207, !dbg !45
  %213 = fadd float %192, %212, !dbg !46
  %214 = fadd float %197, %203, !dbg !52
  %215 = fmul float %207, %207, !dbg !47
  %216 = fmul float %187, %215, !dbg !48
  %217 = fmul float %211, %216, !dbg !49
  %218 = fadd float %214, %217, !dbg !50
  %219 = and i32 %17, 15, !dbg !51
  %220 = icmp eq i32 %16, 0, !dbg !51
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !51
  %222 = bitcast float %213 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 %220) #5, !dbg !51
  %223 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %219, !dbg !51
  %224 = bitcast float %218 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 %220) #5, !dbg !51
  %225 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %219, !dbg !51
  %226 = bitcast float %208 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 %220) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %227 = icmp slt i32 %15, 16, !dbg !51
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !51
  %229 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %228, i1 %227) #5, !dbg !51
  %230 = bitcast i32 %229 to float, !dbg !51
  %231 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %15, !dbg !51
  %232 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %231, i1 %227) #5, !dbg !51
  %233 = bitcast i32 %232 to float, !dbg !51
  %234 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %15, !dbg !51
  %235 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %234, i1 %227) #5, !dbg !51
  %236 = bitcast i32 %235 to float, !dbg !51
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !51
  %238 = bitcast i32 %237 to float, !dbg !51
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !51
  %240 = bitcast i32 %239 to float, !dbg !51
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !51
  %242 = bitcast i32 %241 to float, !dbg !51
  %243 = fsub float %238, %230, !dbg !36
  %244 = fadd float %236, %242, !dbg !41
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !42
  %246 = tail call float @llvm.nvvm.div.full(float %242, float %244), !dbg !43
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !44
  %248 = fmul float %243, %247, !dbg !45
  %249 = fadd float %248, %230, !dbg !46
  %250 = fadd float %233, %240, !dbg !52
  %251 = fmul float %243, %243, !dbg !47
  %252 = fmul float %251, %236, !dbg !48
  %253 = fmul float %252, %247, !dbg !49
  %254 = fadd float %250, %253, !dbg !50
  %255 = bitcast float %249 to i32, !dbg !51
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 4, i32 31), !dbg !51
  %257 = bitcast i32 %256 to float, !dbg !51
  %258 = bitcast float %254 to i32, !dbg !51
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !51
  %260 = bitcast i32 %259 to float, !dbg !51
  %261 = bitcast float %244 to i32, !dbg !51
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !51
  %263 = bitcast i32 %262 to float, !dbg !51
  %264 = fsub float %257, %249, !dbg !36
  %265 = fadd float %244, %263, !dbg !41
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !42
  %267 = tail call float @llvm.nvvm.div.full(float %263, float %265), !dbg !43
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !44
  %269 = fmul float %264, %268, !dbg !45
  %270 = fadd float %249, %269, !dbg !46
  %271 = fadd float %254, %260, !dbg !52
  %272 = fmul float %264, %264, !dbg !47
  %273 = fmul float %244, %272, !dbg !48
  %274 = fmul float %268, %273, !dbg !49
  %275 = fadd float %271, %274, !dbg !50
  %276 = bitcast float %270 to i32, !dbg !51
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !51
  %278 = bitcast i32 %277 to float, !dbg !51
  %279 = bitcast float %275 to i32, !dbg !51
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !51
  %281 = bitcast i32 %280 to float, !dbg !51
  %282 = bitcast float %265 to i32, !dbg !51
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !51
  %284 = bitcast i32 %283 to float, !dbg !51
  %285 = fsub float %278, %270, !dbg !36
  %286 = fadd float %265, %284, !dbg !41
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !42
  %288 = tail call float @llvm.nvvm.div.full(float %284, float %286), !dbg !43
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !44
  %290 = fmul float %285, %289, !dbg !45
  %291 = fadd float %270, %290, !dbg !46
  %292 = fadd float %275, %281, !dbg !52
  %293 = fmul float %285, %285, !dbg !47
  %294 = fmul float %265, %293, !dbg !48
  %295 = fmul float %289, %294, !dbg !49
  %296 = fadd float %292, %295, !dbg !50
  %297 = bitcast float %291 to i32, !dbg !51
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !51
  %299 = bitcast i32 %298 to float, !dbg !51
  %300 = bitcast float %296 to i32, !dbg !51
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !51
  %302 = bitcast i32 %301 to float, !dbg !51
  %303 = bitcast float %286 to i32, !dbg !51
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !51
  %305 = bitcast i32 %304 to float, !dbg !51
  %306 = fsub float %299, %291, !dbg !36
  %307 = fadd float %286, %305, !dbg !41
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !42
  %309 = tail call float @llvm.nvvm.div.full(float %305, float %307), !dbg !43
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !44
  %311 = fmul float %306, %310, !dbg !45
  %312 = fadd float %291, %311, !dbg !46
  %313 = fadd float %296, %302, !dbg !52
  %314 = fmul float %306, %306, !dbg !47
  %315 = fmul float %286, %314, !dbg !48
  %316 = fmul float %310, %315, !dbg !49
  %317 = fadd float %313, %316, !dbg !50
  %318 = and i32 %15, 15, !dbg !51
  %319 = icmp eq i32 %318, 0, !dbg !51
  %320 = and i1 %227, %319, !dbg !51
  %321 = bitcast float %312 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %321, i1 %320) #5, !dbg !51
  %322 = bitcast float %317 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %322, i1 %320) #5, !dbg !51
  %323 = bitcast float %307 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %323, i1 %320) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %324 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !51
  %325 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !51
  %326 = sext i32 %14 to i64, !dbg !53
  %327 = getelementptr float, ptr addrspace(1) %8, i64 %326, !dbg !53
  %328 = and i32 %15, 511, !dbg !54
  %329 = icmp eq i32 %328, 0, !dbg !54
  %330 = bitcast float %324 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %330, ptr addrspace(1) %327, i1 %329) #5, !dbg !54
  %331 = tail call float @llvm.nvvm.div.full(float %325, float 1.152000e+03), !dbg !55
  %332 = fadd float %331, 0x3EB0C6F7A0000000, !dbg !56
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i = icmp eq i32 %333, 0, !dbg !57
  br i1 %.not.i, label %336, label %334, !dbg !57

334:                                              ; preds = %13
  %335 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %332), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

336:                                              ; preds = %13
  %337 = tail call float @llvm.nvvm.rsqrt.approx.f(float %332), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %334, %336
  %.0.i = phi float [ %335, %334 ], [ %337, %336 ], !dbg !57
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i10 = icmp eq i32 %341, 0, !dbg !57
  br i1 %.not.i10, label %344, label %342, !dbg !57

342:                                              ; preds = %__nv_rsqrtf.exit
  %343 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %332), !dbg !57
  br label %__nv_rsqrtf.exit12, !dbg !57

344:                                              ; preds = %__nv_rsqrtf.exit
  %345 = tail call float @llvm.nvvm.rsqrt.approx.f(float %332), !dbg !57
  br label %__nv_rsqrtf.exit12, !dbg !57

__nv_rsqrtf.exit12:                               ; preds = %342, %344
  %.0.i11 = phi float [ %343, %342 ], [ %345, %344 ], !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !59
  %347 = bitcast float %.0.i to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %347, ptr addrspace(1) %346, i1 %329) #5, !dbg !60
  %348 = getelementptr bfloat, ptr addrspace(1) %5, i64 %33, !dbg !61
  %349 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %348, i1 %21) #5, !dbg !62
  %350 = extractvalue { i32, i32 } %349, 0, !dbg !62
  %351 = bitcast i32 %350 to <2 x bfloat>, !dbg !62
  %352 = extractvalue { i32, i32 } %349, 1, !dbg !62
  %353 = bitcast i32 %352 to <2 x bfloat>, !dbg !62
  %354 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %54, i1 %21) #5, !dbg !63
  %355 = extractvalue { i32, i32 } %354, 0, !dbg !63
  %356 = bitcast i32 %355 to <2 x bfloat>, !dbg !63
  %357 = extractvalue { i32, i32 } %354, 1, !dbg !63
  %358 = bitcast i32 %357 to <2 x bfloat>, !dbg !63
  %359 = getelementptr bfloat, ptr addrspace(1) %6, i64 %33, !dbg !64
  %360 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %359, i1 %21) #5, !dbg !65
  %361 = extractvalue { i32, i32 } %360, 0, !dbg !65
  %362 = bitcast i32 %361 to <2 x bfloat>, !dbg !65
  %363 = extractvalue { i32, i32 } %360, 1, !dbg !65
  %364 = bitcast i32 %363 to <2 x bfloat>, !dbg !65
  %365 = getelementptr bfloat, ptr addrspace(1) %9, i64 %24, !dbg !66
  %366 = fpext <2 x bfloat> %351 to <2 x float>, !dbg !67
  %367 = fpext <2 x bfloat> %356 to <2 x float>, !dbg !68
  %368 = fpext <2 x bfloat> %362 to <2 x float>, !dbg !69
  %369 = fadd <2 x float> %366, splat (float 1.000000e+00), !dbg !70
  %370 = insertelement <2 x float> poison, float %324, i64 0, !dbg !71
  %371 = shufflevector <2 x float> %370, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !71
  %372 = fsub <2 x float> %367, %371, !dbg !71
  %373 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !72
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %375 = fmul <2 x float> %374, %372, !dbg !72
  %376 = fmul <2 x float> %369, %375, !dbg !73
  %377 = fadd <2 x float> %376, %368, !dbg !74
  %378 = fptrunc <2 x float> %377 to <2 x bfloat>, !dbg !75
  %379 = fpext <2 x bfloat> %353 to <2 x float>, !dbg !67
  %380 = fpext <2 x bfloat> %358 to <2 x float>, !dbg !68
  %381 = fpext <2 x bfloat> %364 to <2 x float>, !dbg !69
  %382 = fadd <2 x float> %379, splat (float 1.000000e+00), !dbg !70
  %383 = fsub <2 x float> %380, %371, !dbg !71
  %384 = fmul <2 x float> %374, %383, !dbg !72
  %385 = fmul <2 x float> %382, %384, !dbg !73
  %386 = fadd <2 x float> %385, %381, !dbg !74
  %387 = fptrunc <2 x float> %386 to <2 x bfloat>, !dbg !75
  %388 = bitcast <2 x bfloat> %378 to i32, !dbg !75
  %389 = bitcast <2 x bfloat> %387 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %388, i32 %389, ptr addrspace(1) %365, i1 %21) #5, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cktmaywoylmydk77zu5lpmaqv2t6dneaozylqagalnj4jsjxeteh.py", directory: "results/my_experiment/torchinductor_cache_0/kt")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_native_layer_norm_3, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_native_layer_norm_3", linkageName: "triton_red_fused__to_copy_add_mul_native_layer_norm_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 26, column: 37, scope: !6)
!11 = !DILocation(line: 29, column: 19, scope: !6)
!12 = !DILocation(line: 35, column: 29, scope: !6)
!13 = !DILocation(line: 39, column: 46, scope: !6)
!14 = !DILocation(line: 39, column: 41, scope: !6)
!15 = !DILocation(line: 39, column: 34, scope: !6)
!16 = !DILocation(line: 39, column: 51, scope: !6)
!17 = !DILocation(line: 40, column: 46, scope: !6)
!18 = !DILocation(line: 40, column: 41, scope: !6)
!19 = !DILocation(line: 40, column: 34, scope: !6)
!20 = !DILocation(line: 40, column: 51, scope: !6)
!21 = !DILocation(line: 41, column: 34, scope: !6)
!22 = !DILocation(line: 41, column: 51, scope: !6)
!23 = !DILocation(line: 42, column: 34, scope: !6)
!24 = !DILocation(line: 42, column: 41, scope: !6)
!25 = !DILocation(line: 53, column: 58, scope: !6)
!26 = !DILocation(line: 54, column: 29, scope: !6)
!27 = !DILocation(line: 39, column: 105, scope: !6)
!28 = !DILocation(line: 40, column: 104, scope: !6)
!29 = !DILocation(line: 41, column: 105, scope: !6)
!30 = !DILocation(line: 42, column: 94, scope: !6)
!31 = !DILocation(line: 43, column: 22, scope: !6)
!32 = !DILocation(line: 44, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 22, scope: !6)
!34 = !DILocation(line: 51, column: 54, scope: !6)
!35 = !DILocation(line: 54, column: 52, scope: !6)
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = distinct !DILexicalBlockFile(scope: !6, file: !38, discriminator: 0)
!40 = !DILocation(line: 55, column: 82, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !40)
!51 = !DILocation(line: 229, column: 46, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !40)
!53 = !DILocation(line: 59, column: 25, scope: !6)
!54 = !DILocation(line: 59, column: 36, scope: !6)
!55 = !DILocation(line: 61, column: 21, scope: !6)
!56 = !DILocation(line: 63, column: 20, scope: !6)
!57 = !DILocation(line: 64, column: 28, scope: !6)
!58 = !DILocation(line: 65, column: 4, scope: !6)
!59 = !DILocation(line: 66, column: 28, scope: !6)
!60 = !DILocation(line: 66, column: 40, scope: !6)
!61 = !DILocation(line: 73, column: 35, scope: !6)
!62 = !DILocation(line: 73, column: 52, scope: !6)
!63 = !DILocation(line: 74, column: 53, scope: !6)
!64 = !DILocation(line: 75, column: 35, scope: !6)
!65 = !DILocation(line: 75, column: 52, scope: !6)
!66 = !DILocation(line: 86, column: 29, scope: !6)
!67 = !DILocation(line: 73, column: 105, scope: !6)
!68 = !DILocation(line: 74, column: 107, scope: !6)
!69 = !DILocation(line: 75, column: 105, scope: !6)
!70 = !DILocation(line: 77, column: 24, scope: !6)
!71 = !DILocation(line: 80, column: 24, scope: !6)
!72 = !DILocation(line: 81, column: 24, scope: !6)
!73 = !DILocation(line: 82, column: 24, scope: !6)
!74 = !DILocation(line: 84, column: 24, scope: !6)
!75 = !DILocation(line: 86, column: 53, scope: !6)
!76 = !DILocation(line: 67, column: 4, scope: !6)
