; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 1, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = icmp slt i32 %11, 6144, !dbg !13
  %13 = shl i32 %8, 2, !dbg !14
  %14 = and i32 %13, 4, !dbg !14
  %15 = sdiv i32 %11, 12, !dbg !15
  %16 = mul i32 %15, 12, !dbg !16
  %.decomposed = sub i32 %11, %16, !dbg !16
  %17 = mul nsw i32 %.decomposed, 96, !dbg !17
  %18 = mul i32 %15, 3456, !dbg !18
  %19 = add nsw i32 %17, 1152
  %20 = add i32 %19, %18
  br i1 %12, label %.split.us, label %.split.preheader

.split.preheader:                                 ; preds = %5
  %21 = or disjoint i32 %20, %14, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 false) #3, !dbg !21
  %25 = or disjoint i32 %14, 8, !dbg !22
  %26 = or disjoint i32 %20, %25, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 false) #3, !dbg !21
  %30 = or disjoint i32 %14, 16, !dbg !22
  %31 = or disjoint i32 %20, %30, !dbg !19
  %32 = sext i32 %31 to i64, !dbg !20
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %33, i1 false) #3, !dbg !21
  %35 = or disjoint i32 %14, 24, !dbg !22
  %36 = or disjoint i32 %20, %35, !dbg !19
  %37 = sext i32 %36 to i64, !dbg !20
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 false) #3, !dbg !21
  %40 = or disjoint i32 %14, 32, !dbg !22
  %41 = add i32 %20, %40, !dbg !19
  %42 = sext i32 %41 to i64, !dbg !20
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 false) #3, !dbg !21
  %45 = or disjoint i32 %14, 40, !dbg !22
  %46 = add i32 %20, %45, !dbg !19
  %47 = sext i32 %46 to i64, !dbg !20
  %48 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !20
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 false) #3, !dbg !21
  %50 = or disjoint i32 %14, 48, !dbg !22
  %51 = add i32 %20, %50, !dbg !19
  %52 = sext i32 %51 to i64, !dbg !20
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !20
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %53, i1 false) #3, !dbg !21
  %55 = or disjoint i32 %14, 56, !dbg !22
  %56 = add i32 %20, %55, !dbg !19
  %57 = sext i32 %56 to i64, !dbg !20
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !20
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %58, i1 false) #3, !dbg !21
  %60 = or disjoint i32 %14, 64, !dbg !22
  %61 = add i32 %20, %60, !dbg !19
  %62 = sext i32 %61 to i64, !dbg !20
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !20
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %63, i1 false) #3, !dbg !21
  %65 = or disjoint i32 %14, 72, !dbg !22
  %66 = add i32 %20, %65, !dbg !19
  %67 = sext i32 %66 to i64, !dbg !20
  %68 = getelementptr bfloat, ptr addrspace(1) %0, i64 %67, !dbg !20
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %68, i1 false) #3, !dbg !21
  %70 = or disjoint i32 %14, 80, !dbg !22
  %71 = add i32 %20, %70, !dbg !19
  %72 = sext i32 %71 to i64, !dbg !20
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !20
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %73, i1 false) #3, !dbg !21
  %75 = or disjoint i32 %14, 88, !dbg !22
  %76 = add i32 %20, %75, !dbg !19
  %77 = sext i32 %76 to i64, !dbg !20
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !20
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %78, i1 false) #3, !dbg !21
  br label %.split4.us, !dbg !11

.split.us:                                        ; preds = %5, %.split.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split.us ], [ 0, %5 ]
  %80 = phi float [ %106, %.split.us ], [ 0.000000e+00, %5 ]
  %81 = phi float [ %107, %.split.us ], [ 0.000000e+00, %5 ]
  %82 = phi float [ %108, %.split.us ], [ 0.000000e+00, %5 ]
  %83 = phi float [ %109, %.split.us ], [ 0.000000e+00, %5 ]
  %84 = trunc i64 %indvars.iv to i32, !dbg !19
  %85 = or disjoint i32 %14, %84, !dbg !19
  %86 = add i32 %20, %85, !dbg !19
  %87 = sext i32 %86 to i64, !dbg !20
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !20
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %88, i1 true) #3, !dbg !21
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !21
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !21
  %92 = extractvalue { i32, i32 } %89, 1, !dbg !21
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !21
  %94 = extractelement <2 x bfloat> %91, i64 0, !dbg !21
  %95 = extractelement <2 x bfloat> %91, i64 1, !dbg !21
  %96 = extractelement <2 x bfloat> %93, i64 0, !dbg !21
  %97 = extractelement <2 x bfloat> %93, i64 1, !dbg !21
  %98 = fpext bfloat %94 to float, !dbg !23
  %99 = fpext bfloat %95 to float, !dbg !23
  %100 = fpext bfloat %96 to float, !dbg !23
  %101 = fpext bfloat %97 to float, !dbg !23
  %102 = fmul float %98, %98, !dbg !24
  %103 = fmul float %99, %99, !dbg !24
  %104 = fmul float %100, %100, !dbg !24
  %105 = fmul float %101, %101, !dbg !24
  %106 = fadd float %80, %102, !dbg !25
  %107 = fadd float %81, %103, !dbg !25
  %108 = fadd float %82, %104, !dbg !25
  %109 = fadd float %83, %105, !dbg !25
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !26
  %110 = icmp samesign ult i64 %indvars.iv, 88, !dbg !26
  br i1 %110, label %.split.us, label %.split4.us.loopexit, !dbg !26

.split4.us.loopexit:                              ; preds = %.split.us
  %111 = fadd float %106, %107, !dbg !11
  %112 = fadd float %108, %111, !dbg !11
  %113 = fadd float %109, %112, !dbg !11
  br label %.split4.us, !dbg !11

.split4.us:                                       ; preds = %.split4.us.loopexit, %.split.preheader
  %114 = phi float [ 0.000000e+00, %.split.preheader ], [ %113, %.split4.us.loopexit ], !dbg !27
  %115 = and i32 %8, 63, !dbg !11
  %116 = or disjoint i32 %7, %115, !dbg !12
  %117 = icmp slt i32 %116, 6144, !dbg !13
  %118 = and i32 %8, 64, !dbg !11
  %119 = icmp eq i32 %118, 0, !dbg !11
  %120 = bitcast float %114 to i32, !dbg !32
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = fadd float %114, %122, !dbg !27
  %124 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !33
  %125 = bitcast float %123 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %126 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %115, !dbg !33
  %127 = load i32, ptr addrspace(3) %126, align 4, !dbg !33
  %128 = sext i32 %116 to i64, !dbg !34
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !34
  %130 = and i1 %119, %117, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %129, i1 %130) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwgp6q2xoojbitpl7faygm7upgsuy75sl7h66reu5avftunejd7.py", directory: "results/my_experiment/torchinductor_cache_0/uw")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_9, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_9", linkageName: "triton_red_fused__to_copy_mean_pow_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 19, scope: !6)
!16 = !DILocation(line: 28, column: 19, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 61, scope: !6)
!19 = !DILocation(line: 38, column: 56, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 66, scope: !6)
!22 = !DILocation(line: 33, column: 31, scope: !6)
!23 = !DILocation(line: 38, column: 128, scope: !6)
!24 = !DILocation(line: 40, column: 22, scope: !6)
!25 = !DILocation(line: 42, column: 23, scope: !6)
!26 = !DILocation(line: 32, column: 40, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 44, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 44, column: 28, scope: !6)
!34 = !DILocation(line: 45, column: 25, scope: !6)
!35 = !DILocation(line: 45, column: 36, scope: !6)
!36 = !DILocation(line: 45, column: 4, scope: !6)
