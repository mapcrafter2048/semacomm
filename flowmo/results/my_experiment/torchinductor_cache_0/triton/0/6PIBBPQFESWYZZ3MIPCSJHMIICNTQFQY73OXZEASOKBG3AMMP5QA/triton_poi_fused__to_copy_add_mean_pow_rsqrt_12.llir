; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_poi_fused__to_copy_add_mean_pow_rsqrt_12(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %7 = shl i32 %6, 5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = shl i32 %8, 2, !dbg !11
  %10 = and i32 %9, 28, !dbg !11
  %11 = lshr i32 %8, 3, !dbg !11
  %12 = and i32 %11, 15, !dbg !11
  %13 = or disjoint i32 %12, 16, !dbg !11
  %14 = or disjoint i32 %10, %7, !dbg !12
  %15 = icmp slt i32 %14, 24, !dbg !13
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !14
  %17 = shl i32 %16, 5, !dbg !15
  %18 = or disjoint i32 %12, %17, !dbg !16
  %19 = or disjoint i32 %13, %17, !dbg !16
  %20 = icmp slt i32 %18, 256, !dbg !17
  %21 = icmp slt i32 %19, 256, !dbg !17
  %22 = sdiv i32 %14, 12, !dbg !18
  %23 = mul i32 %18, 12, !dbg !19
  %24 = mul i32 %19, 12, !dbg !19
  %25 = mul i32 %22, 3060, !dbg !20
  %26 = add i32 %25, %14, !dbg !20
  %27 = add i32 %26, %23, !dbg !21
  %28 = add i32 %26, %24, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = and i1 %15, %20, !dbg !23
  %34 = and i1 %15, %21, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = tail call float @llvm.nvvm.div.full(float %40, float 6.400000e+01), !dbg !25
  %54 = tail call float @llvm.nvvm.div.full(float %41, float 6.400000e+01), !dbg !25
  %55 = tail call float @llvm.nvvm.div.full(float %42, float 6.400000e+01), !dbg !25
  %56 = tail call float @llvm.nvvm.div.full(float %43, float 6.400000e+01), !dbg !25
  %57 = tail call float @llvm.nvvm.div.full(float %49, float 6.400000e+01), !dbg !25
  %58 = tail call float @llvm.nvvm.div.full(float %50, float 6.400000e+01), !dbg !25
  %59 = tail call float @llvm.nvvm.div.full(float %51, float 6.400000e+01), !dbg !25
  %60 = tail call float @llvm.nvvm.div.full(float %52, float 6.400000e+01), !dbg !25
  %61 = fadd float %53, 0x3EB0C6F7A0000000, !dbg !26
  %62 = fadd float %54, 0x3EB0C6F7A0000000, !dbg !26
  %63 = fadd float %55, 0x3EB0C6F7A0000000, !dbg !26
  %64 = fadd float %56, 0x3EB0C6F7A0000000, !dbg !26
  %65 = fadd float %57, 0x3EB0C6F7A0000000, !dbg !26
  %66 = fadd float %58, 0x3EB0C6F7A0000000, !dbg !26
  %67 = fadd float %59, 0x3EB0C6F7A0000000, !dbg !26
  %68 = fadd float %60, 0x3EB0C6F7A0000000, !dbg !26
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i = icmp eq i32 %69, 0, !dbg !27
  br i1 %.not.i, label %72, label %70, !dbg !27

70:                                               ; preds = %5
  %71 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !27
  br label %__nv_rsqrtf.exit, !dbg !27

72:                                               ; preds = %5
  %73 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !27
  br label %__nv_rsqrtf.exit, !dbg !27

__nv_rsqrtf.exit:                                 ; preds = %70, %72
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], !dbg !27
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i1 = icmp eq i32 %74, 0, !dbg !27
  br i1 %.not.i1, label %77, label %75, !dbg !27

75:                                               ; preds = %__nv_rsqrtf.exit
  %76 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !27
  br label %__nv_rsqrtf.exit3, !dbg !27

77:                                               ; preds = %__nv_rsqrtf.exit
  %78 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !27
  br label %__nv_rsqrtf.exit3, !dbg !27

__nv_rsqrtf.exit3:                                ; preds = %75, %77
  %.0.i2 = phi float [ %76, %75 ], [ %78, %77 ], !dbg !27
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i4 = icmp eq i32 %79, 0, !dbg !27
  br i1 %.not.i4, label %82, label %80, !dbg !27

80:                                               ; preds = %__nv_rsqrtf.exit3
  %81 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !27
  br label %__nv_rsqrtf.exit6, !dbg !27

82:                                               ; preds = %__nv_rsqrtf.exit3
  %83 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !27
  br label %__nv_rsqrtf.exit6, !dbg !27

__nv_rsqrtf.exit6:                                ; preds = %80, %82
  %.0.i5 = phi float [ %81, %80 ], [ %83, %82 ], !dbg !27
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i7 = icmp eq i32 %84, 0, !dbg !27
  br i1 %.not.i7, label %87, label %85, !dbg !27

85:                                               ; preds = %__nv_rsqrtf.exit6
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %64), !dbg !27
  br label %__nv_rsqrtf.exit9, !dbg !27

87:                                               ; preds = %__nv_rsqrtf.exit6
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %64), !dbg !27
  br label %__nv_rsqrtf.exit9, !dbg !27

__nv_rsqrtf.exit9:                                ; preds = %85, %87
  %.0.i8 = phi float [ %86, %85 ], [ %88, %87 ], !dbg !27
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i10 = icmp eq i32 %89, 0, !dbg !27
  br i1 %.not.i10, label %92, label %90, !dbg !27

90:                                               ; preds = %__nv_rsqrtf.exit9
  %91 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %65), !dbg !27
  br label %__nv_rsqrtf.exit12, !dbg !27

92:                                               ; preds = %__nv_rsqrtf.exit9
  %93 = tail call float @llvm.nvvm.rsqrt.approx.f(float %65), !dbg !27
  br label %__nv_rsqrtf.exit12, !dbg !27

__nv_rsqrtf.exit12:                               ; preds = %90, %92
  %.0.i11 = phi float [ %91, %90 ], [ %93, %92 ], !dbg !27
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i13 = icmp eq i32 %94, 0, !dbg !27
  br i1 %.not.i13, label %97, label %95, !dbg !27

95:                                               ; preds = %__nv_rsqrtf.exit12
  %96 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %66), !dbg !27
  br label %__nv_rsqrtf.exit15, !dbg !27

97:                                               ; preds = %__nv_rsqrtf.exit12
  %98 = tail call float @llvm.nvvm.rsqrt.approx.f(float %66), !dbg !27
  br label %__nv_rsqrtf.exit15, !dbg !27

__nv_rsqrtf.exit15:                               ; preds = %95, %97
  %.0.i14 = phi float [ %96, %95 ], [ %98, %97 ], !dbg !27
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i16 = icmp eq i32 %99, 0, !dbg !27
  br i1 %.not.i16, label %102, label %100, !dbg !27

100:                                              ; preds = %__nv_rsqrtf.exit15
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %67), !dbg !27
  br label %__nv_rsqrtf.exit18, !dbg !27

102:                                              ; preds = %__nv_rsqrtf.exit15
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %67), !dbg !27
  br label %__nv_rsqrtf.exit18, !dbg !27

__nv_rsqrtf.exit18:                               ; preds = %100, %102
  %.0.i17 = phi float [ %101, %100 ], [ %103, %102 ], !dbg !27
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i19 = icmp eq i32 %104, 0, !dbg !27
  br i1 %.not.i19, label %107, label %105, !dbg !27

105:                                              ; preds = %__nv_rsqrtf.exit18
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %68), !dbg !27
  br label %__nv_rsqrtf.exit21, !dbg !27

107:                                              ; preds = %__nv_rsqrtf.exit18
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %68), !dbg !27
  br label %__nv_rsqrtf.exit21, !dbg !27

__nv_rsqrtf.exit21:                               ; preds = %105, %107
  %.0.i20 = phi float [ %106, %105 ], [ %108, %107 ], !dbg !27
  %109 = or disjoint i32 %13, %7, !dbg !12
  %110 = icmp slt i32 %109, 24, !dbg !13
  %111 = or disjoint i32 %10, %17, !dbg !16
  %112 = icmp slt i32 %111, 256, !dbg !17
  %113 = and i1 %112, %110, !dbg !23
  %114 = or disjoint i32 %12, %7, !dbg !12
  %115 = icmp slt i32 %114, 24, !dbg !13
  %116 = and i1 %115, %112, !dbg !23
  %117 = shl i32 %114, 8, !dbg !28
  %118 = shl i32 %109, 8, !dbg !28
  %119 = add i32 %117, %111, !dbg !29
  %120 = add i32 %118, %111, !dbg !29
  %121 = sext i32 %119 to i64, !dbg !30
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !30
  %123 = sext i32 %120 to i64, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !30
  %125 = shl i32 %8, 7, !dbg !31
  %126 = and i32 %125, 896, !dbg !31
  %127 = or disjoint i32 %126, %12, !dbg !31
  %128 = and i32 %9, 508, !dbg !31
  %129 = lshr exact i32 %126, 3, !dbg !31
  %130 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %129, !dbg !31
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %127, !dbg !31
  %132 = bitcast float %.0.i to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #4, !dbg !31
  %133 = or disjoint i32 %127, 32, !dbg !31
  %134 = lshr i32 %133, 5, !dbg !31
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !31
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !31
  %137 = bitcast float %.0.i2 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #4, !dbg !31
  %138 = or disjoint i32 %127, 64, !dbg !31
  %139 = lshr i32 %138, 5, !dbg !31
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !31
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !31
  %142 = bitcast float %.0.i5 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !31
  %143 = or disjoint i32 %127, 96, !dbg !31
  %144 = lshr i32 %143, 5, !dbg !31
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !31
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !31
  %147 = bitcast float %.0.i8 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #4, !dbg !31
  %148 = or disjoint i32 %127, 16, !dbg !31
  %149 = getelementptr float, ptr addrspace(3) %130, i32 %148, !dbg !31
  %150 = bitcast float %.0.i11 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #4, !dbg !31
  %151 = or disjoint i32 %127, 48, !dbg !31
  %152 = lshr i32 %151, 5, !dbg !31
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !31
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !31
  %155 = bitcast float %.0.i14 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #4, !dbg !31
  %156 = or disjoint i32 %127, 80, !dbg !31
  %157 = lshr i32 %156, 5, !dbg !31
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !31
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !31
  %160 = bitcast float %.0.i17 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #4, !dbg !31
  %161 = or disjoint i32 %127, 112, !dbg !31
  %162 = lshr i32 %161, 5, !dbg !31
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !31
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !31
  %165 = bitcast float %.0.i20 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %166 = lshr i32 %128, 5, !dbg !31
  %167 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %166, !dbg !31
  %168 = getelementptr inbounds nuw float, ptr addrspace(3) %167, i32 %128, !dbg !31
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !31
  %170 = or disjoint i32 %128, 1, !dbg !31
  %171 = getelementptr inbounds nuw float, ptr addrspace(3) %167, i32 %170, !dbg !31
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !31
  %173 = or disjoint i32 %128, 2, !dbg !31
  %174 = getelementptr inbounds nuw float, ptr addrspace(3) %167, i32 %173, !dbg !31
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !31
  %176 = or disjoint i32 %128, 3, !dbg !31
  %177 = getelementptr inbounds nuw float, ptr addrspace(3) %167, i32 %176, !dbg !31
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !31
  %179 = or disjoint i32 %128, 512, !dbg !31
  %180 = lshr i32 %179, 5, !dbg !31
  %181 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %180, !dbg !31
  %182 = getelementptr inbounds nuw float, ptr addrspace(3) %181, i32 %179, !dbg !31
  %183 = load i32, ptr addrspace(3) %182, align 4, !dbg !31
  %184 = or disjoint i32 %128, 513, !dbg !31
  %185 = lshr i32 %184, 5, !dbg !31
  %186 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %185, !dbg !31
  %187 = getelementptr inbounds nuw float, ptr addrspace(3) %186, i32 %184, !dbg !31
  %188 = load i32, ptr addrspace(3) %187, align 4, !dbg !31
  %189 = or disjoint i32 %128, 514, !dbg !31
  %190 = lshr i32 %189, 5, !dbg !31
  %191 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %190, !dbg !31
  %192 = getelementptr inbounds nuw float, ptr addrspace(3) %191, i32 %189, !dbg !31
  %193 = load i32, ptr addrspace(3) %192, align 4, !dbg !31
  %194 = or disjoint i32 %128, 515, !dbg !31
  %195 = lshr i32 %194, 5, !dbg !31
  %196 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %195, !dbg !31
  %197 = getelementptr inbounds nuw float, ptr addrspace(3) %196, i32 %194, !dbg !31
  %198 = load i32, ptr addrspace(3) %197, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %169, i32 %172, i32 %175, i32 %178, ptr addrspace(1) %122, i1 %116) #4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %188, i32 %193, i32 %198, ptr addrspace(1) %124, i1 %113) #4, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyvq4pypbljksn62wto3cqs5sa2zmphwf4n242rxckeq3y7v5g53.py", directory: "results/my_experiment/torchinductor_cache_0/yv")
!4 = !{ptr @triton_poi_fused__to_copy_add_mean_pow_rsqrt_12, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_add_mean_pow_rsqrt_12", linkageName: "triton_poi_fused__to_copy_add_mean_pow_rsqrt_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 21, column: 28, scope: !6)
!10 = !DILocation(line: 21, column: 33, scope: !6)
!11 = !DILocation(line: 22, column: 44, scope: !6)
!12 = !DILocation(line: 22, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 24, column: 28, scope: !6)
!15 = !DILocation(line: 24, column: 33, scope: !6)
!16 = !DILocation(line: 25, column: 23, scope: !6)
!17 = !DILocation(line: 26, column: 21, scope: !6)
!18 = !DILocation(line: 29, column: 19, scope: !6)
!19 = !DILocation(line: 31, column: 38, scope: !6)
!20 = !DILocation(line: 31, column: 35, scope: !6)
!21 = !DILocation(line: 31, column: 43, scope: !6)
!22 = !DILocation(line: 31, column: 30, scope: !6)
!23 = !DILocation(line: 31, column: 61, scope: !6)
!24 = !DILocation(line: 31, column: 53, scope: !6)
!25 = !DILocation(line: 33, column: 19, scope: !6)
!26 = !DILocation(line: 35, column: 18, scope: !6)
!27 = !DILocation(line: 36, column: 27, scope: !6)
!28 = !DILocation(line: 37, column: 34, scope: !6)
!29 = !DILocation(line: 37, column: 30, scope: !6)
!30 = !DILocation(line: 37, column: 25, scope: !6)
!31 = !DILocation(line: 37, column: 45, scope: !6)
!32 = !DILocation(line: 37, column: 4, scope: !6)
