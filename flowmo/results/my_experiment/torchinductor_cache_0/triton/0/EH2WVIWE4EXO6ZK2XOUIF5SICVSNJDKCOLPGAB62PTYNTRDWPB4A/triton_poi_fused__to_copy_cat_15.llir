; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused__to_copy_cat_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 9, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 1, !dbg !11
  %14 = and i32 %13, 510, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = sdiv i32 %15, 64, !dbg !13
  %17 = srem i32 %16, 4352, !dbg !14
  %18 = mul i32 %16, 64, !dbg !15
  %.decomposed = sub i32 %15, %18, !dbg !15
  %19 = sdiv i32 %15, 278528, !dbg !16
  %.lhs.trunc = trunc nsw i32 %19 to i16, !dbg !17
  %20 = srem i16 %.lhs.trunc, 12, !dbg !17
  %.sext = sext i16 %20 to i32, !dbg !17
  %21 = sdiv i32 %15, 3342336, !dbg !18
  %22 = icmp slt i32 %17, 256, !dbg !19
  %23 = shl nsw i32 %.sext, 6, !dbg !20
  %24 = add nsw i32 %23, %.decomposed, !dbg !21
  %25 = mul nsw i32 %17, 2304, !dbg !22
  %26 = mul nsw i32 %21, 589824, !dbg !23
  %27 = add nsw i32 %25, %26, !dbg !24
  %28 = add nsw i32 %27, %24, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %30, i1 %22) #1, !dbg !27
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !27
  %33 = extractelement <2 x bfloat> %32, i64 0, !dbg !27
  %34 = extractelement <2 x bfloat> %32, i64 1, !dbg !27
  %35 = fpext bfloat %33 to float, !dbg !28
  %36 = fpext bfloat %34 to float, !dbg !28
  %37 = shl nsw i32 %19, 8, !dbg !29
  %38 = add nsw i32 %37, %17, !dbg !30
  %39 = sext i32 %38 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %22) #1, !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %22) #1, !dbg !32
  %44 = bitcast i32 %43 to float, !dbg !32
  %45 = fmul float %42, %35, !dbg !33
  %46 = fmul float %36, %44, !dbg !33
  %47 = sext i32 %.decomposed to i64, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !34
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %22) #1, !dbg !35
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !35
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !35
  %52 = bitcast i32 %50 to float, !dbg !35
  %53 = bitcast i32 %51 to float, !dbg !35
  %54 = fmul float %45, %52, !dbg !36
  %55 = fmul float %46, %53, !dbg !36
  %56 = icmp sgt i32 %17, 255, !dbg !37
  %57 = add nsw i32 %17, -256, !dbg !38
  %58 = mul nsw i32 %57, 2304, !dbg !39
  %59 = mul i32 %21, 9437184, !dbg !40
  %60 = add i32 %58, %59, !dbg !41
  %61 = add i32 %60, %24, !dbg !42
  %62 = sext i32 %61 to i64, !dbg !43
  %63 = getelementptr bfloat, ptr addrspace(1) %3, i64 %62, !dbg !43
  %64 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %63, i1 %56) #1, !dbg !44
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !44
  %66 = extractelement <2 x bfloat> %65, i64 0, !dbg !44
  %67 = extractelement <2 x bfloat> %65, i64 1, !dbg !44
  %68 = fpext bfloat %66 to float, !dbg !45
  %69 = fpext bfloat %67 to float, !dbg !45
  %70 = shl nsw i32 %19, 12, !dbg !46
  %71 = add nsw i32 %57, %70, !dbg !47
  %72 = sext i32 %71 to i64, !dbg !48
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !48
  %74 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %73, i1 %56) #1, !dbg !49
  %75 = bitcast i32 %74 to float, !dbg !49
  %76 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %73, i1 %56) #1, !dbg !49
  %77 = bitcast i32 %76 to float, !dbg !49
  %78 = fmul float %75, %68, !dbg !50
  %79 = fmul float %69, %77, !dbg !50
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !51
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %80, i1 %56) #1, !dbg !52
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !52
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !52
  %84 = bitcast i32 %82 to float, !dbg !52
  %85 = bitcast i32 %83 to float, !dbg !52
  %86 = fmul float %78, %84, !dbg !53
  %87 = fmul float %79, %85, !dbg !53
  %88 = select i1 %22, float %54, float %86, !dbg !54
  %89 = select i1 %22, float %55, float %87, !dbg !54
  %90 = sext i32 %15 to i64, !dbg !55
  %91 = getelementptr float, ptr addrspace(1) %6, i64 %90, !dbg !55
  %92 = bitcast float %88 to i32, !dbg !56
  %93 = bitcast float %89 to i32, !dbg !56
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %92, i32 %93, ptr addrspace(1) %91) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cphhewhin44d4v2fga23yllukruzw2j5talua7hwx3vehllhbutq.py", directory: "results/my_experiment/torchinductor_cache_0/ph")
!4 = !{ptr @triton_poi_fused__to_copy_cat_15, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_cat_15", linkageName: "triton_poi_fused__to_copy_cat_15", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 27, scope: !6)
!15 = !DILocation(line: 24, column: 19, scope: !6)
!16 = !DILocation(line: 25, column: 21, scope: !6)
!17 = !DILocation(line: 25, column: 31, scope: !6)
!18 = !DILocation(line: 26, column: 19, scope: !6)
!19 = !DILocation(line: 33, column: 18, scope: !6)
!20 = !DILocation(line: 34, column: 38, scope: !6)
!21 = !DILocation(line: 34, column: 35, scope: !6)
!22 = !DILocation(line: 34, column: 49, scope: !6)
!23 = !DILocation(line: 34, column: 62, scope: !6)
!24 = !DILocation(line: 34, column: 43, scope: !6)
!25 = !DILocation(line: 34, column: 55, scope: !6)
!26 = !DILocation(line: 34, column: 30, scope: !6)
!27 = !DILocation(line: 34, column: 67, scope: !6)
!28 = !DILocation(line: 34, column: 87, scope: !6)
!29 = !DILocation(line: 36, column: 34, scope: !6)
!30 = !DILocation(line: 36, column: 40, scope: !6)
!31 = !DILocation(line: 36, column: 30, scope: !6)
!32 = !DILocation(line: 36, column: 46, scope: !6)
!33 = !DILocation(line: 37, column: 18, scope: !6)
!34 = !DILocation(line: 40, column: 31, scope: !6)
!35 = !DILocation(line: 40, column: 36, scope: !6)
!36 = !DILocation(line: 41, column: 20, scope: !6)
!37 = !DILocation(line: 45, column: 20, scope: !6)
!38 = !DILocation(line: 48, column: 59, scope: !6)
!39 = !DILocation(line: 48, column: 50, scope: !6)
!40 = !DILocation(line: 48, column: 73, scope: !6)
!41 = !DILocation(line: 48, column: 44, scope: !6)
!42 = !DILocation(line: 48, column: 65, scope: !6)
!43 = !DILocation(line: 48, column: 31, scope: !6)
!44 = !DILocation(line: 48, column: 78, scope: !6)
!45 = !DILocation(line: 48, column: 99, scope: !6)
!46 = !DILocation(line: 50, column: 36, scope: !6)
!47 = !DILocation(line: 50, column: 42, scope: !6)
!48 = !DILocation(line: 50, column: 31, scope: !6)
!49 = !DILocation(line: 50, column: 57, scope: !6)
!50 = !DILocation(line: 51, column: 20, scope: !6)
!51 = !DILocation(line: 54, column: 31, scope: !6)
!52 = !DILocation(line: 54, column: 36, scope: !6)
!53 = !DILocation(line: 55, column: 20, scope: !6)
!54 = !DILocation(line: 0, scope: !6)
!55 = !DILocation(line: 61, column: 25, scope: !6)
!56 = !DILocation(line: 61, column: 37, scope: !6)
!57 = !DILocation(line: 61, column: 4, scope: !6)
