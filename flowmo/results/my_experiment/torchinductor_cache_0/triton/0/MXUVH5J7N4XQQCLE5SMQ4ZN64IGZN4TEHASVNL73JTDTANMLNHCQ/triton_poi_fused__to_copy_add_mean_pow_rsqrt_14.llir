; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_poi_fused__to_copy_add_mean_pow_rsqrt_14(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %7 = shl i32 %6, 5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = shl i32 %8, 2, !dbg !11
  %10 = and i32 %9, 28, !dbg !11
  %11 = lshr i32 %8, 3, !dbg !11
  %12 = and i32 %11, 15, !dbg !11
  %13 = or disjoint i32 %12, 16, !dbg !11
  %14 = or disjoint i32 %10, %7, !dbg !12
  %15 = icmp slt i32 %14, 24, !dbg !13
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !14
  %17 = shl i32 %16, 5, !dbg !15
  %18 = or disjoint i32 %12, %17, !dbg !16
  %19 = or disjoint i32 %13, %17, !dbg !16
  %20 = sdiv i32 %14, 12, !dbg !17
  %21 = mul i32 %18, 12, !dbg !18
  %22 = mul i32 %19, 12, !dbg !18
  %23 = mul i32 %20, 49140, !dbg !19
  %24 = add i32 %23, %14, !dbg !19
  %25 = add i32 %24, %21, !dbg !20
  %26 = add i32 %24, %22, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %15) #4, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %15) #4, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = tail call float @llvm.nvvm.div.full(float %36, float 6.400000e+01), !dbg !23
  %50 = tail call float @llvm.nvvm.div.full(float %37, float 6.400000e+01), !dbg !23
  %51 = tail call float @llvm.nvvm.div.full(float %38, float 6.400000e+01), !dbg !23
  %52 = tail call float @llvm.nvvm.div.full(float %39, float 6.400000e+01), !dbg !23
  %53 = tail call float @llvm.nvvm.div.full(float %45, float 6.400000e+01), !dbg !23
  %54 = tail call float @llvm.nvvm.div.full(float %46, float 6.400000e+01), !dbg !23
  %55 = tail call float @llvm.nvvm.div.full(float %47, float 6.400000e+01), !dbg !23
  %56 = tail call float @llvm.nvvm.div.full(float %48, float 6.400000e+01), !dbg !23
  %57 = fadd float %49, 0x3EB0C6F7A0000000, !dbg !24
  %58 = fadd float %50, 0x3EB0C6F7A0000000, !dbg !24
  %59 = fadd float %51, 0x3EB0C6F7A0000000, !dbg !24
  %60 = fadd float %52, 0x3EB0C6F7A0000000, !dbg !24
  %61 = fadd float %53, 0x3EB0C6F7A0000000, !dbg !24
  %62 = fadd float %54, 0x3EB0C6F7A0000000, !dbg !24
  %63 = fadd float %55, 0x3EB0C6F7A0000000, !dbg !24
  %64 = fadd float %56, 0x3EB0C6F7A0000000, !dbg !24
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i = icmp eq i32 %65, 0, !dbg !25
  br i1 %.not.i, label %68, label %66, !dbg !25

66:                                               ; preds = %5
  %67 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !25
  br label %__nv_rsqrtf.exit, !dbg !25

68:                                               ; preds = %5
  %69 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !25
  br label %__nv_rsqrtf.exit, !dbg !25

__nv_rsqrtf.exit:                                 ; preds = %66, %68
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], !dbg !25
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i1 = icmp eq i32 %70, 0, !dbg !25
  br i1 %.not.i1, label %73, label %71, !dbg !25

71:                                               ; preds = %__nv_rsqrtf.exit
  %72 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %58), !dbg !25
  br label %__nv_rsqrtf.exit3, !dbg !25

73:                                               ; preds = %__nv_rsqrtf.exit
  %74 = tail call float @llvm.nvvm.rsqrt.approx.f(float %58), !dbg !25
  br label %__nv_rsqrtf.exit3, !dbg !25

__nv_rsqrtf.exit3:                                ; preds = %71, %73
  %.0.i2 = phi float [ %72, %71 ], [ %74, %73 ], !dbg !25
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i4 = icmp eq i32 %75, 0, !dbg !25
  br i1 %.not.i4, label %78, label %76, !dbg !25

76:                                               ; preds = %__nv_rsqrtf.exit3
  %77 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %59), !dbg !25
  br label %__nv_rsqrtf.exit6, !dbg !25

78:                                               ; preds = %__nv_rsqrtf.exit3
  %79 = tail call float @llvm.nvvm.rsqrt.approx.f(float %59), !dbg !25
  br label %__nv_rsqrtf.exit6, !dbg !25

__nv_rsqrtf.exit6:                                ; preds = %76, %78
  %.0.i5 = phi float [ %77, %76 ], [ %79, %78 ], !dbg !25
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i7 = icmp eq i32 %80, 0, !dbg !25
  br i1 %.not.i7, label %83, label %81, !dbg !25

81:                                               ; preds = %__nv_rsqrtf.exit6
  %82 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !25
  br label %__nv_rsqrtf.exit9, !dbg !25

83:                                               ; preds = %__nv_rsqrtf.exit6
  %84 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !25
  br label %__nv_rsqrtf.exit9, !dbg !25

__nv_rsqrtf.exit9:                                ; preds = %81, %83
  %.0.i8 = phi float [ %82, %81 ], [ %84, %83 ], !dbg !25
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i10 = icmp eq i32 %85, 0, !dbg !25
  br i1 %.not.i10, label %88, label %86, !dbg !25

86:                                               ; preds = %__nv_rsqrtf.exit9
  %87 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !25
  br label %__nv_rsqrtf.exit12, !dbg !25

88:                                               ; preds = %__nv_rsqrtf.exit9
  %89 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !25
  br label %__nv_rsqrtf.exit12, !dbg !25

__nv_rsqrtf.exit12:                               ; preds = %86, %88
  %.0.i11 = phi float [ %87, %86 ], [ %89, %88 ], !dbg !25
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i13 = icmp eq i32 %90, 0, !dbg !25
  br i1 %.not.i13, label %93, label %91, !dbg !25

91:                                               ; preds = %__nv_rsqrtf.exit12
  %92 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !25
  br label %__nv_rsqrtf.exit15, !dbg !25

93:                                               ; preds = %__nv_rsqrtf.exit12
  %94 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !25
  br label %__nv_rsqrtf.exit15, !dbg !25

__nv_rsqrtf.exit15:                               ; preds = %91, %93
  %.0.i14 = phi float [ %92, %91 ], [ %94, %93 ], !dbg !25
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i16 = icmp eq i32 %95, 0, !dbg !25
  br i1 %.not.i16, label %98, label %96, !dbg !25

96:                                               ; preds = %__nv_rsqrtf.exit15
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !25
  br label %__nv_rsqrtf.exit18, !dbg !25

98:                                               ; preds = %__nv_rsqrtf.exit15
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !25
  br label %__nv_rsqrtf.exit18, !dbg !25

__nv_rsqrtf.exit18:                               ; preds = %96, %98
  %.0.i17 = phi float [ %97, %96 ], [ %99, %98 ], !dbg !25
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i19 = icmp eq i32 %100, 0, !dbg !25
  br i1 %.not.i19, label %103, label %101, !dbg !25

101:                                              ; preds = %__nv_rsqrtf.exit18
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %64), !dbg !25
  br label %__nv_rsqrtf.exit21, !dbg !25

103:                                              ; preds = %__nv_rsqrtf.exit18
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %64), !dbg !25
  br label %__nv_rsqrtf.exit21, !dbg !25

__nv_rsqrtf.exit21:                               ; preds = %101, %103
  %.0.i20 = phi float [ %102, %101 ], [ %104, %103 ], !dbg !25
  %105 = or disjoint i32 %10, %17, !dbg !16
  %106 = or disjoint i32 %13, %7, !dbg !12
  %107 = icmp slt i32 %106, 24, !dbg !13
  %108 = or disjoint i32 %12, %7, !dbg !12
  %109 = icmp slt i32 %108, 24, !dbg !13
  %110 = shl i32 %108, 12, !dbg !26
  %111 = shl i32 %106, 12, !dbg !26
  %112 = add i32 %110, %105, !dbg !27
  %113 = add i32 %111, %105, !dbg !27
  %114 = sext i32 %112 to i64, !dbg !28
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !28
  %116 = sext i32 %113 to i64, !dbg !28
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !28
  %118 = shl i32 %8, 7, !dbg !29
  %119 = and i32 %118, 896, !dbg !29
  %120 = or disjoint i32 %119, %12, !dbg !29
  %121 = and i32 %9, 508, !dbg !29
  %122 = lshr exact i32 %119, 5, !dbg !29
  %123 = add nuw nsw i32 %122, %120, !dbg !29
  %124 = zext nneg i32 %123 to i64, !dbg !29
  %125 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %124, !dbg !29
  %126 = bitcast float %.0.i to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #4, !dbg !29
  %127 = or disjoint i32 %120, 32, !dbg !29
  %128 = lshr i32 %127, 5, !dbg !29
  %129 = add nuw nsw i32 %128, %127, !dbg !29
  %130 = zext nneg i32 %129 to i64, !dbg !29
  %131 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %130, !dbg !29
  %132 = bitcast float %.0.i2 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %131, <1 x i32> %132, i1 true) #4, !dbg !29
  %133 = or disjoint i32 %120, 64, !dbg !29
  %134 = lshr i32 %133, 5, !dbg !29
  %135 = add nuw nsw i32 %134, %133, !dbg !29
  %136 = zext nneg i32 %135 to i64, !dbg !29
  %137 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %136, !dbg !29
  %138 = bitcast float %.0.i5 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %137, <1 x i32> %138, i1 true) #4, !dbg !29
  %139 = or disjoint i32 %120, 96, !dbg !29
  %140 = lshr i32 %139, 5, !dbg !29
  %141 = add nuw nsw i32 %140, %139, !dbg !29
  %142 = zext nneg i32 %141 to i64, !dbg !29
  %143 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %142, !dbg !29
  %144 = bitcast float %.0.i8 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %143, <1 x i32> %144, i1 true) #4, !dbg !29
  %145 = or disjoint i32 %120, 16, !dbg !29
  %146 = add nuw nsw i32 %145, %122, !dbg !29
  %147 = zext nneg i32 %146 to i64, !dbg !29
  %148 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %147, !dbg !29
  %149 = bitcast float %.0.i11 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %148, <1 x i32> %149, i1 true) #4, !dbg !29
  %150 = or disjoint i32 %120, 48, !dbg !29
  %151 = lshr i32 %150, 5, !dbg !29
  %152 = add nuw nsw i32 %151, %150, !dbg !29
  %153 = zext nneg i32 %152 to i64, !dbg !29
  %154 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %153, !dbg !29
  %155 = bitcast float %.0.i14 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %154, <1 x i32> %155, i1 true) #4, !dbg !29
  %156 = or disjoint i32 %120, 80, !dbg !29
  %157 = lshr i32 %156, 5, !dbg !29
  %158 = add nuw nsw i32 %157, %156, !dbg !29
  %159 = zext nneg i32 %158 to i64, !dbg !29
  %160 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %159, !dbg !29
  %161 = bitcast float %.0.i17 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %160, <1 x i32> %161, i1 true) #4, !dbg !29
  %162 = or disjoint i32 %120, 112, !dbg !29
  %163 = lshr i32 %162, 5, !dbg !29
  %164 = add nuw nsw i32 %163, %162, !dbg !29
  %165 = zext nneg i32 %164 to i64, !dbg !29
  %166 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %165, !dbg !29
  %167 = bitcast float %.0.i20 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %166, <1 x i32> %167, i1 true) #4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %168 = lshr i32 %121, 5, !dbg !29
  %169 = add nuw nsw i32 %168, %121, !dbg !29
  %170 = zext nneg i32 %169 to i64, !dbg !29
  %171 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %170, !dbg !29
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !29
  %173 = or disjoint i32 %121, 1, !dbg !29
  %174 = add nuw nsw i32 %173, %168, !dbg !29
  %175 = zext nneg i32 %174 to i64, !dbg !29
  %176 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %175, !dbg !29
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !29
  %178 = or disjoint i32 %121, 2, !dbg !29
  %179 = add nuw nsw i32 %178, %168, !dbg !29
  %180 = zext nneg i32 %179 to i64, !dbg !29
  %181 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %180, !dbg !29
  %182 = load i32, ptr addrspace(3) %181, align 4, !dbg !29
  %183 = or disjoint i32 %121, 3, !dbg !29
  %184 = add nuw nsw i32 %183, %168, !dbg !29
  %185 = zext nneg i32 %184 to i64, !dbg !29
  %186 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %185, !dbg !29
  %187 = load i32, ptr addrspace(3) %186, align 4, !dbg !29
  %188 = or disjoint i32 %121, 512, !dbg !29
  %189 = lshr i32 %188, 5, !dbg !29
  %190 = add nuw nsw i32 %189, %188, !dbg !29
  %191 = zext nneg i32 %190 to i64, !dbg !29
  %192 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %191, !dbg !29
  %193 = load i32, ptr addrspace(3) %192, align 4, !dbg !29
  %194 = or disjoint i32 %121, 513, !dbg !29
  %195 = lshr i32 %194, 5, !dbg !29
  %196 = add nuw nsw i32 %195, %194, !dbg !29
  %197 = zext nneg i32 %196 to i64, !dbg !29
  %198 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %197, !dbg !29
  %199 = load i32, ptr addrspace(3) %198, align 4, !dbg !29
  %200 = or disjoint i32 %121, 514, !dbg !29
  %201 = lshr i32 %200, 5, !dbg !29
  %202 = add nuw nsw i32 %201, %200, !dbg !29
  %203 = zext nneg i32 %202 to i64, !dbg !29
  %204 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %203, !dbg !29
  %205 = load i32, ptr addrspace(3) %204, align 4, !dbg !29
  %206 = or disjoint i32 %121, 515, !dbg !29
  %207 = lshr i32 %206, 5, !dbg !29
  %208 = add nuw nsw i32 %207, %206, !dbg !29
  %209 = zext nneg i32 %208 to i64, !dbg !29
  %210 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %209, !dbg !29
  %211 = load i32, ptr addrspace(3) %210, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %177, i32 %182, i32 %187, ptr addrspace(1) %115, i1 %109) #4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %193, i32 %199, i32 %205, i32 %211, ptr addrspace(1) %117, i1 %107) #4, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmwm4kicj7tjyyjbnw7cxp3ihh5ufsdkf6cllsq4da6nxolxyxqn.py", directory: "results/my_experiment/torchinductor_cache_0/mw")
!4 = !{ptr @triton_poi_fused__to_copy_add_mean_pow_rsqrt_14, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_add_mean_pow_rsqrt_14", linkageName: "triton_poi_fused__to_copy_add_mean_pow_rsqrt_14", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 21, column: 28, scope: !6)
!10 = !DILocation(line: 21, column: 33, scope: !6)
!11 = !DILocation(line: 22, column: 44, scope: !6)
!12 = !DILocation(line: 22, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 24, column: 28, scope: !6)
!15 = !DILocation(line: 24, column: 33, scope: !6)
!16 = !DILocation(line: 25, column: 23, scope: !6)
!17 = !DILocation(line: 29, column: 19, scope: !6)
!18 = !DILocation(line: 31, column: 38, scope: !6)
!19 = !DILocation(line: 31, column: 35, scope: !6)
!20 = !DILocation(line: 31, column: 43, scope: !6)
!21 = !DILocation(line: 31, column: 30, scope: !6)
!22 = !DILocation(line: 31, column: 54, scope: !6)
!23 = !DILocation(line: 33, column: 19, scope: !6)
!24 = !DILocation(line: 35, column: 18, scope: !6)
!25 = !DILocation(line: 36, column: 27, scope: !6)
!26 = !DILocation(line: 37, column: 35, scope: !6)
!27 = !DILocation(line: 37, column: 30, scope: !6)
!28 = !DILocation(line: 37, column: 25, scope: !6)
!29 = !DILocation(line: 37, column: 46, scope: !6)
!30 = !DILocation(line: 37, column: 4, scope: !6)
