; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_cat_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 10, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 2, !dbg !11
  %11 = and i32 %10, 508, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = or disjoint i32 %8, 2, !dbg !12
  %14 = or disjoint i32 %12, 512, !dbg !12
  %15 = ashr exact i32 %12, 2, !dbg !13
  %16 = srem i32 %15, 32, !dbg !14
  %17 = srem i32 %13, 4, !dbg !15
  %18 = sdiv i32 %12, 128, !dbg !16
  %19 = sdiv i32 %14, 128, !dbg !16
  %20 = icmp slt i32 %16, 4, !dbg !17
  %21 = shl nsw i32 %16, 2, !dbg !18
  %22 = mul i32 %18, 128, !dbg !19
  %srem.decomposed = sub i32 %12, %22, !dbg !19
  %23 = shl nsw i32 %18, 4, !dbg !20
  %24 = shl nsw i32 %19, 4, !dbg !20
  %25 = add nsw i32 %23, %srem.decomposed, !dbg !21
  %26 = add nsw i32 %23, %17, !dbg !19
  %27 = add nsw i32 %26, %21, !dbg !21
  %28 = add nsw i32 %24, %srem.decomposed, !dbg !21
  %29 = add nsw i32 %24, %17, !dbg !19
  %30 = add nsw i32 %29, %21, !dbg !21
  %31 = sext i32 %25 to i64, !dbg !22
  %32 = getelementptr double, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = sext i32 %27 to i64, !dbg !22
  %34 = getelementptr double, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %28 to i64, !dbg !22
  %36 = getelementptr double, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %30 to i64, !dbg !22
  %38 = getelementptr double, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %32, i1 %20) #1, !dbg !23
  %40 = extractvalue { i64, i64 } %39, 0, !dbg !23
  %41 = extractvalue { i64, i64 } %39, 1, !dbg !23
  %42 = bitcast i64 %40 to double, !dbg !23
  %43 = bitcast i64 %41 to double, !dbg !23
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %34, i1 %20) #1, !dbg !23
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !23
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !23
  %47 = bitcast i64 %45 to double, !dbg !23
  %48 = bitcast i64 %46 to double, !dbg !23
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %36, i1 %20) #1, !dbg !23
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !23
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !23
  %52 = bitcast i64 %50 to double, !dbg !23
  %53 = bitcast i64 %51 to double, !dbg !23
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %38, i1 %20) #1, !dbg !23
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !23
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !23
  %57 = bitcast i64 %55 to double, !dbg !23
  %58 = bitcast i64 %56 to double, !dbg !23
  %59 = fptrunc double %42 to float, !dbg !24
  %60 = fptrunc double %43 to float, !dbg !24
  %61 = fptrunc double %47 to float, !dbg !24
  %62 = fptrunc double %48 to float, !dbg !24
  %63 = fptrunc double %52 to float, !dbg !24
  %64 = fptrunc double %53 to float, !dbg !24
  %65 = fptrunc double %57 to float, !dbg !24
  %66 = fptrunc double %58 to float, !dbg !24
  %67 = add nsw i32 %16, -4, !dbg !25
  %68 = icmp ult i32 %67, 14, !dbg !25
  %69 = add nsw i32 %21, -16, !dbg !26
  %70 = mul nsw i32 %18, 56, !dbg !27
  %71 = mul nsw i32 %19, 56, !dbg !27
  %72 = add nsw i32 %69, %70, !dbg !28
  %73 = add nsw i32 %70, %17, !dbg !29
  %74 = add nsw i32 %73, %69, !dbg !28
  %75 = add nsw i32 %69, %71, !dbg !28
  %76 = add nsw i32 %71, %17, !dbg !29
  %77 = add nsw i32 %76, %69, !dbg !28
  %78 = sext i32 %72 to i64, !dbg !30
  %79 = getelementptr double, ptr addrspace(1) %1, i64 %78, !dbg !30
  %80 = sext i32 %74 to i64, !dbg !30
  %81 = getelementptr double, ptr addrspace(1) %1, i64 %80, !dbg !30
  %82 = sext i32 %75 to i64, !dbg !30
  %83 = getelementptr double, ptr addrspace(1) %1, i64 %82, !dbg !30
  %84 = sext i32 %77 to i64, !dbg !30
  %85 = getelementptr double, ptr addrspace(1) %1, i64 %84, !dbg !30
  %86 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %79, i1 %68) #1, !dbg !31
  %87 = extractvalue { i64, i64 } %86, 0, !dbg !31
  %88 = extractvalue { i64, i64 } %86, 1, !dbg !31
  %89 = bitcast i64 %87 to double, !dbg !31
  %90 = bitcast i64 %88 to double, !dbg !31
  %91 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %81, i1 %68) #1, !dbg !31
  %92 = extractvalue { i64, i64 } %91, 0, !dbg !31
  %93 = extractvalue { i64, i64 } %91, 1, !dbg !31
  %94 = bitcast i64 %92 to double, !dbg !31
  %95 = bitcast i64 %93 to double, !dbg !31
  %96 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %83, i1 %68) #1, !dbg !31
  %97 = extractvalue { i64, i64 } %96, 0, !dbg !31
  %98 = extractvalue { i64, i64 } %96, 1, !dbg !31
  %99 = bitcast i64 %97 to double, !dbg !31
  %100 = bitcast i64 %98 to double, !dbg !31
  %101 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %85, i1 %68) #1, !dbg !31
  %102 = extractvalue { i64, i64 } %101, 0, !dbg !31
  %103 = extractvalue { i64, i64 } %101, 1, !dbg !31
  %104 = bitcast i64 %102 to double, !dbg !31
  %105 = bitcast i64 %103 to double, !dbg !31
  %106 = fptrunc double %89 to float, !dbg !32
  %107 = fptrunc double %90 to float, !dbg !32
  %108 = fptrunc double %94 to float, !dbg !32
  %109 = fptrunc double %95 to float, !dbg !32
  %110 = fptrunc double %99 to float, !dbg !32
  %111 = fptrunc double %100 to float, !dbg !32
  %112 = fptrunc double %104 to float, !dbg !32
  %113 = fptrunc double %105 to float, !dbg !32
  %114 = icmp sgt i32 %16, 17, !dbg !33
  %115 = add nsw i32 %21, -72, !dbg !34
  %116 = add nsw i32 %115, %70, !dbg !35
  %117 = add nsw i32 %73, %115, !dbg !35
  %118 = add nsw i32 %115, %71, !dbg !35
  %119 = add nsw i32 %76, %115, !dbg !35
  %120 = sext i32 %116 to i64, !dbg !36
  %121 = getelementptr double, ptr addrspace(1) %2, i64 %120, !dbg !36
  %122 = sext i32 %117 to i64, !dbg !36
  %123 = getelementptr double, ptr addrspace(1) %2, i64 %122, !dbg !36
  %124 = sext i32 %118 to i64, !dbg !36
  %125 = getelementptr double, ptr addrspace(1) %2, i64 %124, !dbg !36
  %126 = sext i32 %119 to i64, !dbg !36
  %127 = getelementptr double, ptr addrspace(1) %2, i64 %126, !dbg !36
  %128 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %121, i1 %114) #1, !dbg !37
  %129 = extractvalue { i64, i64 } %128, 0, !dbg !37
  %130 = extractvalue { i64, i64 } %128, 1, !dbg !37
  %131 = bitcast i64 %129 to double, !dbg !37
  %132 = bitcast i64 %130 to double, !dbg !37
  %133 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %123, i1 %114) #1, !dbg !37
  %134 = extractvalue { i64, i64 } %133, 0, !dbg !37
  %135 = extractvalue { i64, i64 } %133, 1, !dbg !37
  %136 = bitcast i64 %134 to double, !dbg !37
  %137 = bitcast i64 %135 to double, !dbg !37
  %138 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %125, i1 %114) #1, !dbg !37
  %139 = extractvalue { i64, i64 } %138, 0, !dbg !37
  %140 = extractvalue { i64, i64 } %138, 1, !dbg !37
  %141 = bitcast i64 %139 to double, !dbg !37
  %142 = bitcast i64 %140 to double, !dbg !37
  %143 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, $2;\0A\09mov.u64 $1, $3;\0A\09@$5 ld.global.v2.b64 { $0, $1 }, [ $4 + 0 ];", "=l,=l,l,l,l,b"(i64 0, i64 0, ptr addrspace(1) %127, i1 %114) #1, !dbg !37
  %144 = extractvalue { i64, i64 } %143, 0, !dbg !37
  %145 = extractvalue { i64, i64 } %143, 1, !dbg !37
  %146 = bitcast i64 %144 to double, !dbg !37
  %147 = bitcast i64 %145 to double, !dbg !37
  %148 = fptrunc double %131 to float, !dbg !38
  %149 = fptrunc double %132 to float, !dbg !38
  %150 = fptrunc double %136 to float, !dbg !38
  %151 = fptrunc double %137 to float, !dbg !38
  %152 = fptrunc double %141 to float, !dbg !38
  %153 = fptrunc double %142 to float, !dbg !38
  %154 = fptrunc double %146 to float, !dbg !38
  %155 = fptrunc double %147 to float, !dbg !38
  %156 = select i1 %114, float %148, float 0.000000e+00, !dbg !39
  %157 = select i1 %114, float %149, float 0.000000e+00, !dbg !39
  %158 = select i1 %114, float %150, float 0.000000e+00, !dbg !39
  %159 = select i1 %114, float %151, float 0.000000e+00, !dbg !39
  %160 = select i1 %114, float %152, float 0.000000e+00, !dbg !39
  %161 = select i1 %114, float %153, float 0.000000e+00, !dbg !39
  %162 = select i1 %114, float %154, float 0.000000e+00, !dbg !39
  %163 = select i1 %114, float %155, float 0.000000e+00, !dbg !39
  %164 = select i1 %68, float %106, float %156, !dbg !40
  %165 = select i1 %68, float %107, float %157, !dbg !40
  %166 = select i1 %68, float %108, float %158, !dbg !40
  %167 = select i1 %68, float %109, float %159, !dbg !40
  %168 = select i1 %68, float %110, float %160, !dbg !40
  %169 = select i1 %68, float %111, float %161, !dbg !40
  %170 = select i1 %68, float %112, float %162, !dbg !40
  %171 = select i1 %68, float %113, float %163, !dbg !40
  %172 = select i1 %20, float %59, float %164, !dbg !40
  %173 = select i1 %20, float %60, float %165, !dbg !40
  %174 = select i1 %20, float %61, float %166, !dbg !40
  %175 = select i1 %20, float %62, float %167, !dbg !40
  %176 = select i1 %20, float %63, float %168, !dbg !40
  %177 = select i1 %20, float %64, float %169, !dbg !40
  %178 = select i1 %20, float %65, float %170, !dbg !40
  %179 = select i1 %20, float %66, float %171, !dbg !40
  %180 = sext i32 %12 to i64, !dbg !41
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %180, !dbg !41
  %182 = sext i32 %14 to i64, !dbg !41
  %183 = getelementptr float, ptr addrspace(1) %3, i64 %182, !dbg !41
  %184 = bitcast float %172 to i32, !dbg !42
  %185 = bitcast float %173 to i32, !dbg !42
  %186 = bitcast float %174 to i32, !dbg !42
  %187 = bitcast float %175 to i32, !dbg !42
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %184, i32 %185, i32 %186, i32 %187, ptr addrspace(1) %181) #1, !dbg !42
  %188 = bitcast float %176 to i32, !dbg !42
  %189 = bitcast float %177 to i32, !dbg !42
  %190 = bitcast float %178 to i32, !dbg !42
  %191 = bitcast float %179 to i32, !dbg !42
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %183) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqxo43dcqhooszq2srvoezajlsfbp44flpwu5x2w3q5xrs3r3sfm.py", directory: "results/my_experiment/torchinductor_cache_0/qx")
!4 = !{ptr @triton_poi_fused_cat_11, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_cat_11", linkageName: "triton_poi_fused_cat_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 26, scope: !6)
!15 = !DILocation(line: 24, column: 19, scope: !6)
!16 = !DILocation(line: 25, column: 19, scope: !6)
!17 = !DILocation(line: 31, column: 18, scope: !6)
!18 = !DILocation(line: 32, column: 38, scope: !6)
!19 = !DILocation(line: 32, column: 35, scope: !6)
!20 = !DILocation(line: 32, column: 47, scope: !6)
!21 = !DILocation(line: 32, column: 44, scope: !6)
!22 = !DILocation(line: 32, column: 30, scope: !6)
!23 = !DILocation(line: 32, column: 52, scope: !6)
!24 = !DILocation(line: 33, column: 19, scope: !6)
!25 = !DILocation(line: 39, column: 19, scope: !6)
!26 = !DILocation(line: 40, column: 39, scope: !6)
!27 = !DILocation(line: 40, column: 55, scope: !6)
!28 = !DILocation(line: 40, column: 52, scope: !6)
!29 = !DILocation(line: 40, column: 36, scope: !6)
!30 = !DILocation(line: 40, column: 31, scope: !6)
!31 = !DILocation(line: 40, column: 60, scope: !6)
!32 = !DILocation(line: 41, column: 21, scope: !6)
!33 = !DILocation(line: 44, column: 20, scope: !6)
!34 = !DILocation(line: 47, column: 39, scope: !6)
!35 = !DILocation(line: 47, column: 53, scope: !6)
!36 = !DILocation(line: 47, column: 31, scope: !6)
!37 = !DILocation(line: 47, column: 61, scope: !6)
!38 = !DILocation(line: 48, column: 21, scope: !6)
!39 = !DILocation(line: 50, column: 35, scope: !6)
!40 = !DILocation(line: 0, scope: !6)
!41 = !DILocation(line: 53, column: 25, scope: !6)
!42 = !DILocation(line: 53, column: 37, scope: !6)
!43 = !DILocation(line: 53, column: 4, scope: !6)
