; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused__to_copy_add_mul_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = and i32 %11, 31, !dbg !10
  %13 = lshr i32 %11, 5, !dbg !10
  %14 = shl i32 %11, 2, !dbg !10
  %15 = and i32 %14, 1020, !dbg !10
  %16 = icmp samesign ult i32 %15, 768, !dbg !11
  %17 = mul i32 %10, 768, !dbg !12
  %18 = add i32 %15, %17, !dbg !13
  %19 = sext i32 %18 to i64, !dbg !14
  %20 = getelementptr bfloat, ptr addrspace(1) %2, i64 %19, !dbg !14
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %16) #5, !dbg !15
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !15
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !15
  %24 = extractvalue { i32, i32 } %21, 1, !dbg !15
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !15
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !16
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %16) #5, !dbg !17
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !17
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !17
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !17
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !17
  %32 = zext nneg i32 %15 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %16) #5, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !20
  %40 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !21
  %41 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !19
  %42 = insertelement <2 x i32> %41, i32 %36, i64 1, !dbg !19
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !19
  %44 = fadd <2 x float> %43, %40, !dbg !22
  %45 = fadd <2 x float> %44, %39, !dbg !23
  %46 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !20
  %47 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !21
  %48 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !19
  %49 = insertelement <2 x i32> %48, i32 %38, i64 1, !dbg !19
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !19
  %51 = fadd <2 x float> %50, %47, !dbg !22
  %52 = fadd <2 x float> %51, %46, !dbg !23
  %53 = extractelement <2 x float> %45, i64 0, !dbg !24
  %54 = extractelement <2 x float> %45, i64 1, !dbg !24
  %55 = fadd float %53, %54, !dbg !24
  %56 = extractelement <2 x float> %52, i64 0, !dbg !24
  %57 = fadd float %56, %55, !dbg !24
  %58 = extractelement <2 x float> %52, i64 1, !dbg !24
  %59 = fadd float %58, %57, !dbg !24
  %60 = select i1 %16, float %59, float 0.000000e+00, !dbg !24
  %61 = bitcast float %60 to i32, !dbg !29
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 16, i32 31), !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %60, %63, !dbg !24
  %65 = bitcast float %64 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fadd float %64, %67, !dbg !24
  %69 = bitcast float %68 to i32, !dbg !29
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = fadd float %68, %71, !dbg !24
  %73 = bitcast float %72 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %72, %75, !dbg !24
  %77 = bitcast float %76 to i32, !dbg !29
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = fadd float %76, %79, !dbg !24
  %81 = and i32 %13, 7, !dbg !29
  %82 = icmp eq i32 %12, 0, !dbg !29
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !29
  %84 = bitcast float %80 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %82) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %85 = icmp slt i32 %11, 8, !dbg !29
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %87 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %86, i1 %85) #5, !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 4, i32 31), !dbg !29
  %90 = bitcast i32 %89 to float, !dbg !29
  %91 = fadd float %88, %90, !dbg !24
  %92 = bitcast float %91 to i32, !dbg !29
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !29
  %94 = bitcast i32 %93 to float, !dbg !29
  %95 = fadd float %91, %94, !dbg !24
  %96 = bitcast float %95 to i32, !dbg !29
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = fadd float %95, %98, !dbg !24
  %100 = and i32 %11, 7, !dbg !29
  %101 = icmp eq i32 %100, 0, !dbg !29
  %102 = and i1 %85, %101, !dbg !29
  %103 = bitcast float %99 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %103, i1 %102) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %104 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %105 = fadd float %104, 0.000000e+00, !dbg !30
  %106 = tail call float @llvm.nvvm.div.full(float %105, float 7.680000e+02), !dbg !34
  %107 = fsub float %53, %106, !dbg !35
  %108 = fsub float %54, %106, !dbg !35
  %109 = fsub float %56, %106, !dbg !35
  %110 = fsub float %58, %106, !dbg !35
  %111 = fmul float %107, %107, !dbg !36
  %112 = fmul float %108, %108, !dbg !36
  %113 = fmul float %109, %109, !dbg !36
  %114 = fmul float %110, %110, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %115 = fadd float %111, %112, !dbg !39
  %116 = fadd float %113, %115, !dbg !39
  %117 = fadd float %114, %116, !dbg !39
  %118 = select i1 %16, float %117, float 0.000000e+00, !dbg !39
  %119 = bitcast float %118 to i32, !dbg !37
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !37
  %121 = bitcast i32 %120 to float, !dbg !37
  %122 = fadd float %118, %121, !dbg !39
  %123 = bitcast float %122 to i32, !dbg !37
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !37
  %125 = bitcast i32 %124 to float, !dbg !37
  %126 = fadd float %122, %125, !dbg !39
  %127 = bitcast float %126 to i32, !dbg !37
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !37
  %129 = bitcast i32 %128 to float, !dbg !37
  %130 = fadd float %126, %129, !dbg !39
  %131 = bitcast float %130 to i32, !dbg !37
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !37
  %133 = bitcast i32 %132 to float, !dbg !37
  %134 = fadd float %130, %133, !dbg !39
  %135 = bitcast float %134 to i32, !dbg !37
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !37
  %137 = bitcast i32 %136 to float, !dbg !37
  %138 = fadd float %134, %137, !dbg !39
  %139 = bitcast float %138 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %139, i1 %82) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %140 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %86, i1 %85) #5, !dbg !37
  %141 = bitcast i32 %140 to float, !dbg !37
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 4, i32 31), !dbg !37
  %143 = bitcast i32 %142 to float, !dbg !37
  %144 = fadd float %141, %143, !dbg !39
  %145 = bitcast float %144 to i32, !dbg !37
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !37
  %147 = bitcast i32 %146 to float, !dbg !37
  %148 = fadd float %144, %147, !dbg !39
  %149 = bitcast float %148 to i32, !dbg !37
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !37
  %151 = bitcast i32 %150 to float, !dbg !37
  %152 = fadd float %148, %151, !dbg !39
  %153 = bitcast float %152 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %153, i1 %102) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %154 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %155 = fadd float %154, 0.000000e+00, !dbg !40
  %156 = tail call float @llvm.nvvm.div.full(float %155, float 7.680000e+02), !dbg !42
  %157 = fadd float %156, 0x3EB0C6F7A0000000, !dbg !43
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %158, 0, !dbg !44
  br i1 %.not.i, label %161, label %159, !dbg !44

159:                                              ; preds = %9
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

161:                                              ; preds = %9
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %159, %161
  %.0.i = phi float [ %160, %159 ], [ %162, %161 ], !dbg !44
  %163 = fmul float %107, %.0.i, !dbg !45
  %164 = fmul float %108, %.0.i, !dbg !45
  %165 = fmul float %109, %.0.i, !dbg !45
  %166 = fmul float %110, %.0.i, !dbg !45
  %167 = fadd float %163, 0.000000e+00, !dbg !46
  %168 = fadd float %164, 0.000000e+00, !dbg !46
  %169 = fadd float %165, 0.000000e+00, !dbg !46
  %170 = fadd float %166, 0.000000e+00, !dbg !46
  %171 = fptrunc <2 x float> %45 to <2 x bfloat>, !dbg !47
  %172 = fptrunc <2 x float> %52 to <2 x bfloat>, !dbg !47
  %173 = bitcast <2 x bfloat> %171 to i32, !dbg !47
  %174 = bitcast <2 x bfloat> %172 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %26, i1 %16) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %175 = sext i32 %10 to i64, !dbg !49
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !49
  %177 = and i32 %11, 255, !dbg !50
  %178 = icmp eq i32 %177, 0, !dbg !50
  %179 = bitcast float %.0.i to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %176, i1 %178) #5, !dbg !50
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !51
  %181 = bitcast float %167 to i32, !dbg !52
  %182 = bitcast float %168 to i32, !dbg !52
  %183 = bitcast float %169 to i32, !dbg !52
  %184 = bitcast float %170 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %180, i1 %16) #5, !dbg !52
  %185 = getelementptr float, ptr addrspace(1) %4, i64 %175, !dbg !53
  %186 = bitcast float %106 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %185, i1 %178) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm4f5regva6hclnyu4xqs5gfjczqv43eazaqlru4wykjwkn3aofw.py", directory: "results/my_experiment/torchinductor_cache_0/m4")
!4 = !{ptr @triton_per_fused__to_copy_add_mul_native_layer_norm_6, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mul_native_layer_norm_6", linkageName: "triton_per_fused__to_copy_add_mul_native_layer_norm_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 25, column: 28, scope: !6)
!10 = !DILocation(line: 28, column: 28, scope: !6)
!11 = !DILocation(line: 30, column: 25, scope: !6)
!12 = !DILocation(line: 35, column: 41, scope: !6)
!13 = !DILocation(line: 35, column: 37, scope: !6)
!14 = !DILocation(line: 35, column: 30, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 50, scope: !6)
!18 = !DILocation(line: 37, column: 30, scope: !6)
!19 = !DILocation(line: 37, column: 37, scope: !6)
!20 = !DILocation(line: 35, column: 69, scope: !6)
!21 = !DILocation(line: 36, column: 73, scope: !6)
!22 = !DILocation(line: 39, column: 18, scope: !6)
!23 = !DILocation(line: 42, column: 18, scope: !6)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 48, column: 59, scope: !6)
!29 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 57, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 48, column: 45, scope: !6)
!34 = !DILocation(line: 51, column: 21, scope: !6)
!35 = !DILocation(line: 52, column: 19, scope: !6)
!36 = !DILocation(line: 53, column: 20, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !38)
!38 = !DILocation(line: 56, column: 59, scope: !6)
!39 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !38)
!40 = !DILocation(line: 57, column: 15, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 56, column: 45, scope: !6)
!42 = !DILocation(line: 58, column: 21, scope: !6)
!43 = !DILocation(line: 60, column: 20, scope: !6)
!44 = !DILocation(line: 61, column: 28, scope: !6)
!45 = !DILocation(line: 63, column: 20, scope: !6)
!46 = !DILocation(line: 66, column: 20, scope: !6)
!47 = !DILocation(line: 67, column: 50, scope: !6)
!48 = !DILocation(line: 68, column: 4, scope: !6)
!49 = !DILocation(line: 69, column: 28, scope: !6)
!50 = !DILocation(line: 69, column: 40, scope: !6)
!51 = !DILocation(line: 70, column: 25, scope: !6)
!52 = !DILocation(line: 70, column: 48, scope: !6)
!53 = !DILocation(line: 71, column: 25, scope: !6)
!54 = !DILocation(line: 71, column: 37, scope: !6)
!55 = !DILocation(line: 71, column: 4, scope: !6)
