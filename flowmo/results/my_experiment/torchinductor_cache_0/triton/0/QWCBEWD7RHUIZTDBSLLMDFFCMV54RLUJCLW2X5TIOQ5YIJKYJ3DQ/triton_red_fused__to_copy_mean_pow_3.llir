; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 1, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = shl i32 %8, 2, !dbg !13
  %13 = and i32 %12, 4, !dbg !13
  %14 = sdiv i32 %11, 12, !dbg !14
  %15 = mul i32 %14, 12, !dbg !15
  %.decomposed = sub i32 %11, %15, !dbg !15
  %16 = mul nsw i32 %.decomposed, 96, !dbg !16
  %17 = mul i32 %14, 3456, !dbg !17
  %18 = or disjoint i32 %16, %13
  %19 = add i32 %18, %17
  br label %20, !dbg !18

20:                                               ; preds = %5, %20
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %20 ]
  %21 = phi float [ 0.000000e+00, %5 ], [ %46, %20 ]
  %22 = phi float [ 0.000000e+00, %5 ], [ %47, %20 ]
  %23 = phi float [ 0.000000e+00, %5 ], [ %48, %20 ]
  %24 = phi float [ 0.000000e+00, %5 ], [ %49, %20 ]
  %25 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %26 = add i32 %19, %25, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !21
  %32 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !21
  %34 = extractelement <2 x bfloat> %31, i64 0, !dbg !21
  %35 = extractelement <2 x bfloat> %31, i64 1, !dbg !21
  %36 = extractelement <2 x bfloat> %33, i64 0, !dbg !21
  %37 = extractelement <2 x bfloat> %33, i64 1, !dbg !21
  %38 = fpext bfloat %34 to float, !dbg !22
  %39 = fpext bfloat %35 to float, !dbg !22
  %40 = fpext bfloat %36 to float, !dbg !22
  %41 = fpext bfloat %37 to float, !dbg !22
  %42 = fmul float %38, %38, !dbg !23
  %43 = fmul float %39, %39, !dbg !23
  %44 = fmul float %40, %40, !dbg !23
  %45 = fmul float %41, %41, !dbg !23
  %46 = fadd float %21, %42, !dbg !24
  %47 = fadd float %22, %43, !dbg !24
  %48 = fadd float %23, %44, !dbg !24
  %49 = fadd float %24, %45, !dbg !24
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !18
  %50 = icmp samesign ult i64 %indvars.iv, 88, !dbg !18
  br i1 %50, label %20, label %51, !dbg !18

51:                                               ; preds = %20
  %52 = and i32 %8, 63, !dbg !11
  %53 = or disjoint i32 %7, %52, !dbg !12
  %54 = and i32 %8, 64, !dbg !11
  %55 = icmp eq i32 %54, 0, !dbg !11
  %56 = fadd float %46, %47, !dbg !25
  %57 = fadd float %48, %56, !dbg !25
  %58 = fadd float %49, %57, !dbg !25
  %59 = bitcast float %58 to i32, !dbg !30
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !30
  %61 = bitcast i32 %60 to float, !dbg !30
  %62 = fadd float %58, %61, !dbg !25
  %63 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %64 = bitcast float %62 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %65 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %52, !dbg !31
  %66 = load i32, ptr addrspace(3) %65, align 4, !dbg !31
  %67 = sext i32 %53 to i64, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %66, ptr addrspace(1) %68, i1 %55) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csx4xk5b2z3osj2theivxgr52hc6r2e274t2hx3mv7akolyy3hpi.py", directory: "results/my_experiment/torchinductor_cache_0/sx")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_3, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_3", linkageName: "triton_red_fused__to_copy_mean_pow_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 44, scope: !6)
!17 = !DILocation(line: 38, column: 54, scope: !6)
!18 = !DILocation(line: 32, column: 40, scope: !6)
!19 = !DILocation(line: 38, column: 49, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 59, scope: !6)
!22 = !DILocation(line: 38, column: 113, scope: !6)
!23 = !DILocation(line: 40, column: 22, scope: !6)
!24 = !DILocation(line: 42, column: 23, scope: !6)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!29 = !DILocation(line: 44, column: 25, scope: !6)
!30 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 44, column: 28, scope: !6)
!32 = !DILocation(line: 45, column: 25, scope: !6)
!33 = !DILocation(line: 45, column: 36, scope: !6)
!34 = !DILocation(line: 45, column: 4, scope: !6)
