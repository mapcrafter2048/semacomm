; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 3, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = icmp slt i32 %11, 6144, !dbg !13
  %13 = shl i32 %8, 3, !dbg !14
  %14 = and i32 %13, 56, !dbg !14
  %15 = sdiv i32 %11, 12, !dbg !15
  %16 = mul i32 %15, 12, !dbg !16
  %.decomposed = sub i32 %11, %16, !dbg !16
  %17 = mul nsw i32 %.decomposed, 96, !dbg !17
  %18 = mul i32 %15, 3456, !dbg !18
  %19 = add nsw i32 %17, 1152
  %20 = add i32 %19, %18
  %21 = add i32 %20, %14, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %23, i1 %12) #3, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !21
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !21
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !21
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !21
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !21
  %33 = extractelement <2 x bfloat> %28, i64 0, !dbg !21
  %34 = extractelement <2 x bfloat> %28, i64 1, !dbg !21
  %35 = extractelement <2 x bfloat> %30, i64 0, !dbg !21
  %36 = extractelement <2 x bfloat> %30, i64 1, !dbg !21
  %37 = extractelement <2 x bfloat> %32, i64 0, !dbg !21
  %38 = extractelement <2 x bfloat> %32, i64 1, !dbg !21
  %39 = fpext bfloat %33 to float, !dbg !22
  %40 = fpext bfloat %34 to float, !dbg !22
  %41 = fpext bfloat %35 to float, !dbg !22
  %42 = fpext bfloat %36 to float, !dbg !22
  %43 = fpext bfloat %37 to float, !dbg !22
  %44 = fpext bfloat %38 to float, !dbg !22
  %45 = fmul float %39, %39, !dbg !23
  %46 = fmul float %40, %40, !dbg !23
  %47 = fmul float %41, %41, !dbg !23
  %48 = fmul float %42, %42, !dbg !23
  %49 = fmul float %43, %43, !dbg !23
  %50 = fmul float %44, %44, !dbg !23
  %51 = select i1 %12, float %45, float 0.000000e+00, !dbg !24
  %52 = select i1 %12, float %46, float 0.000000e+00, !dbg !24
  %53 = select i1 %12, float %47, float 0.000000e+00, !dbg !24
  %54 = select i1 %12, float %48, float 0.000000e+00, !dbg !24
  %55 = select i1 %12, float %49, float 0.000000e+00, !dbg !24
  %56 = select i1 %12, float %50, float 0.000000e+00, !dbg !24
  %57 = or disjoint i32 %14, 64, !dbg !25
  %58 = icmp samesign ult i32 %57, 96, !dbg !26
  %59 = add i32 %20, %57, !dbg !19
  %60 = sext i32 %59 to i64, !dbg !20
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !20
  %62 = and i1 %12, %58, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %62) #3, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !21
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !21
  %66 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !21
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !21
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !21
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !21
  %72 = extractelement <2 x bfloat> %67, i64 0, !dbg !21
  %73 = extractelement <2 x bfloat> %67, i64 1, !dbg !21
  %74 = extractelement <2 x bfloat> %69, i64 0, !dbg !21
  %75 = extractelement <2 x bfloat> %69, i64 1, !dbg !21
  %76 = extractelement <2 x bfloat> %71, i64 0, !dbg !21
  %77 = extractelement <2 x bfloat> %71, i64 1, !dbg !21
  %78 = fpext bfloat %72 to float, !dbg !22
  %79 = fpext bfloat %73 to float, !dbg !22
  %80 = fpext bfloat %74 to float, !dbg !22
  %81 = fpext bfloat %75 to float, !dbg !22
  %82 = fpext bfloat %76 to float, !dbg !22
  %83 = fpext bfloat %77 to float, !dbg !22
  %84 = fmul float %78, %78, !dbg !23
  %85 = fmul float %79, %79, !dbg !23
  %86 = fmul float %80, %80, !dbg !23
  %87 = fmul float %81, %81, !dbg !23
  %88 = fmul float %82, %82, !dbg !23
  %89 = fmul float %83, %83, !dbg !23
  %90 = fadd float %51, %84, !dbg !28
  %91 = fadd float %52, %85, !dbg !28
  %92 = fadd float %53, %86, !dbg !28
  %93 = fadd float %54, %87, !dbg !28
  %94 = fadd float %55, %88, !dbg !28
  %95 = fadd float %56, %89, !dbg !28
  %96 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !22
  %97 = fmul <2 x float> %96, %96, !dbg !23
  %98 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !24
  %99 = shufflevector <2 x i1> %98, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !24
  %100 = select <2 x i1> %99, <2 x float> %97, <2 x float> zeroinitializer, !dbg !24
  %101 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !22
  %102 = fmul <2 x float> %101, %101, !dbg !23
  %103 = fadd <2 x float> %100, %102, !dbg !28
  %104 = insertelement <2 x i1> poison, i1 %62, i64 0, !dbg !24
  %105 = shufflevector <2 x i1> %104, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !24
  %106 = select <2 x i1> %105, <2 x float> %103, <2 x float> %100, !dbg !24
  %107 = select i1 %62, float %90, float %51, !dbg !24
  %108 = select i1 %62, float %91, float %52, !dbg !24
  %109 = select i1 %62, float %92, float %53, !dbg !24
  %110 = select i1 %62, float %93, float %54, !dbg !24
  %111 = select i1 %62, float %94, float %55, !dbg !24
  %112 = select i1 %62, float %95, float %56, !dbg !24
  %113 = and i32 %8, 63, !dbg !11
  %114 = or disjoint i32 %7, %113, !dbg !12
  %115 = icmp slt i32 %114, 6144, !dbg !13
  %shift = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %116 = fadd <2 x float> %106, %shift, !dbg !29
  %117 = extractelement <2 x float> %116, i64 0, !dbg !29
  %118 = fadd float %107, %117, !dbg !29
  %119 = fadd float %108, %118, !dbg !29
  %120 = fadd float %109, %119, !dbg !29
  %121 = fadd float %110, %120, !dbg !29
  %122 = fadd float %111, %121, !dbg !29
  %123 = fadd float %112, %122, !dbg !29
  %124 = bitcast float %123 to i32, !dbg !34
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !34
  %126 = bitcast i32 %125 to float, !dbg !34
  %127 = fadd float %123, %126, !dbg !29
  %128 = bitcast float %127 to i32, !dbg !34
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !34
  %130 = bitcast i32 %129 to float, !dbg !34
  %131 = fadd float %127, %130, !dbg !29
  %132 = bitcast float %131 to i32, !dbg !34
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !34
  %134 = bitcast i32 %133 to float, !dbg !34
  %135 = fadd float %131, %134, !dbg !29
  %136 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !35
  %137 = bitcast float %135 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %138 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %113, !dbg !35
  %139 = load i32, ptr addrspace(3) %138, align 4, !dbg !35
  %140 = sext i32 %114 to i64, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !36
  %142 = and i32 %8, 448, !dbg !37
  %143 = icmp eq i32 %142, 0, !dbg !37
  %144 = and i1 %143, %115, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %141, i1 %144) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwgp6q2xoojbitpl7faygm7upgsuy75sl7h66reu5avftunejd7.py", directory: "results/my_experiment/torchinductor_cache_0/uw")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_9", linkageName: "triton_red_fused__to_copy_mean_pow_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 19, scope: !6)
!16 = !DILocation(line: 28, column: 19, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 61, scope: !6)
!19 = !DILocation(line: 38, column: 56, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 66, scope: !6)
!22 = !DILocation(line: 38, column: 128, scope: !6)
!23 = !DILocation(line: 40, column: 22, scope: !6)
!24 = !DILocation(line: 43, column: 48, scope: !6)
!25 = !DILocation(line: 33, column: 31, scope: !6)
!26 = !DILocation(line: 34, column: 29, scope: !6)
!27 = !DILocation(line: 38, column: 74, scope: !6)
!28 = !DILocation(line: 42, column: 23, scope: !6)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !6, file: !31, discriminator: 0)
!33 = !DILocation(line: 44, column: 25, scope: !6)
!34 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 44, column: 28, scope: !6)
!36 = !DILocation(line: 45, column: 25, scope: !6)
!37 = !DILocation(line: 45, column: 36, scope: !6)
!38 = !DILocation(line: 45, column: 4, scope: !6)
