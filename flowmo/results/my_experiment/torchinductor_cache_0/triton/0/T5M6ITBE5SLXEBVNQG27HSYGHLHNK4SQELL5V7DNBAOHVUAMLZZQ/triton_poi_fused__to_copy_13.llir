; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused__to_copy_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 10, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 3, !dbg !11
  %12 = and i32 %11, 1016, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = or disjoint i32 %13, 1, !dbg !12
  %15 = or disjoint i32 %13, 2, !dbg !12
  %16 = or disjoint i32 %13, 3, !dbg !12
  %17 = or disjoint i32 %13, 4, !dbg !12
  %18 = or disjoint i32 %13, 5, !dbg !12
  %19 = or disjoint i32 %13, 6, !dbg !12
  %20 = or disjoint i32 %13, 7, !dbg !12
  %21 = sdiv i32 %13, 5013504, !dbg !13
  %22 = srem i32 %13, 417792, !dbg !14
  %23 = srem i32 %14, 417792, !dbg !14
  %24 = srem i32 %15, 417792, !dbg !14
  %25 = srem i32 %16, 417792, !dbg !14
  %26 = srem i32 %17, 417792, !dbg !14
  %27 = srem i32 %18, 417792, !dbg !14
  %28 = srem i32 %19, 417792, !dbg !14
  %29 = srem i32 %20, 417792, !dbg !14
  %30 = srem i32 %13, 96, !dbg !15
  %31 = srem i32 %14, 96, !dbg !15
  %32 = srem i32 %15, 96, !dbg !15
  %33 = srem i32 %16, 96, !dbg !15
  %34 = srem i32 %17, 96, !dbg !15
  %35 = srem i32 %18, 96, !dbg !15
  %36 = srem i32 %19, 96, !dbg !15
  %37 = srem i32 %20, 96, !dbg !15
  %38 = shl nsw i32 %22, 1, !dbg !16
  %39 = shl nsw i32 %23, 1, !dbg !16
  %40 = shl nsw i32 %24, 1, !dbg !16
  %41 = shl nsw i32 %25, 1, !dbg !16
  %42 = shl nsw i32 %26, 1, !dbg !16
  %43 = shl nsw i32 %27, 1, !dbg !16
  %44 = shl nsw i32 %28, 1, !dbg !16
  %45 = shl nsw i32 %29, 1, !dbg !16
  %46 = mul nsw i32 %21, 835584, !dbg !17
  %47 = add nsw i32 %38, %46, !dbg !18
  %48 = add nsw i32 %39, %46, !dbg !18
  %49 = add nsw i32 %40, %46, !dbg !18
  %50 = add nsw i32 %41, %46, !dbg !18
  %51 = add nsw i32 %42, %46, !dbg !18
  %52 = add nsw i32 %43, %46, !dbg !18
  %53 = add nsw i32 %44, %46, !dbg !18
  %54 = add nsw i32 %45, %46, !dbg !18
  %55 = sext i32 %47 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = sext i32 %48 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = sext i32 %49 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !19
  %61 = sext i32 %50 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = sext i32 %51 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !19
  %65 = sext i32 %52 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !19
  %67 = sext i32 %53 to i64, !dbg !19
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !19
  %69 = sext i32 %54 to i64, !dbg !19
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !19
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %56) #1, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %58) #1, !dbg !20
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %60) #1, !dbg !20
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %62) #1, !dbg !20
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %64) #1, !dbg !20
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %66) #1, !dbg !20
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %68) #1, !dbg !20
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %70) #1, !dbg !20
  %.lhs.trunc = trunc nsw i32 %30 to i8, !dbg !21
  %79 = ashr exact i8 %.lhs.trunc, 1, !dbg !21
  %.sext = sext i8 %79 to i32, !dbg !21
  %.lhs.trunc4 = trunc nsw i32 %31 to i8, !dbg !21
  %80 = sdiv i8 %.lhs.trunc4, 2, !dbg !21
  %.sext5 = sext i8 %80 to i32, !dbg !21
  %.lhs.trunc6 = trunc nsw i32 %32 to i8, !dbg !21
  %81 = ashr exact i8 %.lhs.trunc6, 1, !dbg !21
  %.sext7 = sext i8 %81 to i32, !dbg !21
  %.lhs.trunc8 = trunc nsw i32 %33 to i8, !dbg !21
  %82 = sdiv i8 %.lhs.trunc8, 2, !dbg !21
  %.sext9 = sext i8 %82 to i32, !dbg !21
  %.lhs.trunc10 = trunc nsw i32 %34 to i8, !dbg !21
  %83 = ashr exact i8 %.lhs.trunc10, 1, !dbg !21
  %.sext11 = sext i8 %83 to i32, !dbg !21
  %.lhs.trunc12 = trunc nsw i32 %35 to i8, !dbg !21
  %84 = sdiv i8 %.lhs.trunc12, 2, !dbg !21
  %.sext13 = sext i8 %84 to i32, !dbg !21
  %.lhs.trunc14 = trunc nsw i32 %36 to i8, !dbg !21
  %85 = ashr exact i8 %.lhs.trunc14, 1, !dbg !21
  %.sext15 = sext i8 %85 to i32, !dbg !21
  %.lhs.trunc16 = trunc nsw i32 %37 to i8, !dbg !21
  %86 = sdiv i8 %.lhs.trunc16, 2, !dbg !21
  %.sext17 = sext i8 %86 to i32, !dbg !21
  %87 = shl nsw i32 %.sext, 1, !dbg !22
  %88 = shl nsw i32 %.sext5, 1, !dbg !22
  %89 = shl nsw i32 %.sext7, 1, !dbg !22
  %90 = shl nsw i32 %.sext9, 1, !dbg !22
  %91 = shl nsw i32 %.sext11, 1, !dbg !22
  %92 = shl nsw i32 %.sext13, 1, !dbg !22
  %93 = shl nsw i32 %.sext15, 1, !dbg !22
  %94 = shl nsw i32 %.sext17, 1, !dbg !22
  %95 = sub nsw i32 %13, %30, !dbg !23
  %96 = add i32 %87, %95, !dbg !24
  %97 = add i32 %88, %95, !dbg !24
  %98 = add i32 %89, %95, !dbg !24
  %99 = add i32 %90, %95, !dbg !24
  %100 = add i32 %91, %95, !dbg !24
  %101 = add i32 %92, %95, !dbg !24
  %102 = add i32 %93, %95, !dbg !24
  %103 = add i32 %94, %95, !dbg !24
  %104 = sext i32 %96 to i64, !dbg !25
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !25
  %106 = sext i32 %97 to i64, !dbg !25
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !25
  %108 = sext i32 %98 to i64, !dbg !25
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !25
  %110 = sext i32 %99 to i64, !dbg !25
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !25
  %112 = sext i32 %100 to i64, !dbg !25
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !25
  %114 = sext i32 %101 to i64, !dbg !25
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !25
  %116 = sext i32 %102 to i64, !dbg !25
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !25
  %118 = sext i32 %103 to i64, !dbg !25
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !25
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %105) #1, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %107) #1, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %109) #1, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %111) #1, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %113) #1, !dbg !26
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %115) #1, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %117) #1, !dbg !26
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %119) #1, !dbg !26
  %128 = or disjoint i32 %38, 1, !dbg !27
  %129 = add nsw i32 %128, %46, !dbg !28
  %130 = or disjoint i32 %46, 1, !dbg !27
  %131 = add nsw i32 %130, %39, !dbg !28
  %132 = add nsw i32 %130, %40, !dbg !28
  %133 = add nsw i32 %130, %41, !dbg !28
  %134 = add nsw i32 %130, %42, !dbg !28
  %135 = add nsw i32 %130, %43, !dbg !28
  %136 = add nsw i32 %130, %44, !dbg !28
  %137 = add nsw i32 %130, %45, !dbg !28
  %138 = sext i32 %129 to i64, !dbg !29
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !29
  %140 = sext i32 %131 to i64, !dbg !29
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !29
  %142 = sext i32 %132 to i64, !dbg !29
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !29
  %144 = sext i32 %133 to i64, !dbg !29
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !29
  %146 = sext i32 %134 to i64, !dbg !29
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !29
  %148 = sext i32 %135 to i64, !dbg !29
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !29
  %150 = sext i32 %136 to i64, !dbg !29
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !29
  %152 = sext i32 %137 to i64, !dbg !29
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !29
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %139) #1, !dbg !30
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %141) #1, !dbg !30
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %143) #1, !dbg !30
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %145) #1, !dbg !30
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %147) #1, !dbg !30
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %149) #1, !dbg !30
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %151) #1, !dbg !30
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %153) #1, !dbg !30
  %162 = or disjoint i32 %95, 1, !dbg !31
  %163 = add i32 %162, %87, !dbg !32
  %164 = add i32 %162, %88, !dbg !32
  %165 = add i32 %162, %89, !dbg !32
  %166 = add i32 %162, %90, !dbg !32
  %167 = add i32 %162, %91, !dbg !32
  %168 = add i32 %162, %92, !dbg !32
  %169 = add i32 %162, %93, !dbg !32
  %170 = add i32 %162, %94, !dbg !32
  %171 = sext i32 %163 to i64, !dbg !33
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !33
  %173 = sext i32 %164 to i64, !dbg !33
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !33
  %175 = sext i32 %165 to i64, !dbg !33
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !33
  %177 = sext i32 %166 to i64, !dbg !33
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !33
  %179 = sext i32 %167 to i64, !dbg !33
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !33
  %181 = sext i32 %168 to i64, !dbg !33
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !33
  %183 = sext i32 %169 to i64, !dbg !33
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %183, !dbg !33
  %185 = sext i32 %170 to i64, !dbg !33
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !33
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %172) #1, !dbg !34
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %174) #1, !dbg !34
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %176) #1, !dbg !34
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %178) #1, !dbg !34
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %180) #1, !dbg !34
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %182) #1, !dbg !34
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %184) #1, !dbg !34
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %186) #1, !dbg !34
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !35
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !35
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !35
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !35
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !35
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !35
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !35
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !35
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %195) #1, !dbg !36
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %196) #1, !dbg !36
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %197) #1, !dbg !36
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %198) #1, !dbg !36
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %199) #1, !dbg !36
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %200) #1, !dbg !36
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %201) #1, !dbg !36
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %202) #1, !dbg !36
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !37
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !37
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !37
  %214 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !37
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !37
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !37
  %217 = getelementptr float, ptr addrspace(1) %2, i64 %183, !dbg !37
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %185, !dbg !37
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %211) #1, !dbg !38
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %212) #1, !dbg !38
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %213) #1, !dbg !38
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %214) #1, !dbg !38
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %215) #1, !dbg !38
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %216) #1, !dbg !38
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %217) #1, !dbg !38
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %218) #1, !dbg !38
  %227 = sext i32 %13 to i64, !dbg !39
  %228 = getelementptr bfloat, ptr addrspace(1) %3, i64 %227, !dbg !39
  %229 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !26
  %230 = insertelement <2 x i32> %229, i32 %72, i64 1, !dbg !26
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !26
  %232 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !20
  %233 = insertelement <2 x i32> %232, i32 %121, i64 1, !dbg !20
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !20
  %235 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !34
  %236 = insertelement <2 x i32> %235, i32 %155, i64 1, !dbg !34
  %237 = bitcast <2 x i32> %236 to <2 x float>, !dbg !34
  %238 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !30
  %239 = insertelement <2 x i32> %238, i32 %188, i64 1, !dbg !30
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !30
  %241 = fmul <2 x float> %231, %234, !dbg !40
  %242 = fmul <2 x float> %237, %240, !dbg !41
  %243 = fadd <2 x float> %241, %242, !dbg !42
  %244 = fptrunc <2 x float> %243 to <2 x bfloat>, !dbg !43
  %245 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !26
  %246 = insertelement <2 x i32> %245, i32 %74, i64 1, !dbg !26
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !26
  %248 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !20
  %249 = insertelement <2 x i32> %248, i32 %123, i64 1, !dbg !20
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !20
  %251 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !34
  %252 = insertelement <2 x i32> %251, i32 %157, i64 1, !dbg !34
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !34
  %254 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !30
  %255 = insertelement <2 x i32> %254, i32 %190, i64 1, !dbg !30
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !30
  %257 = fmul <2 x float> %247, %250, !dbg !40
  %258 = fmul <2 x float> %253, %256, !dbg !41
  %259 = fadd <2 x float> %257, %258, !dbg !42
  %260 = fptrunc <2 x float> %259 to <2 x bfloat>, !dbg !43
  %261 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !26
  %262 = insertelement <2 x i32> %261, i32 %76, i64 1, !dbg !26
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !26
  %264 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !20
  %265 = insertelement <2 x i32> %264, i32 %125, i64 1, !dbg !20
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !20
  %267 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !34
  %268 = insertelement <2 x i32> %267, i32 %159, i64 1, !dbg !34
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !34
  %270 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !30
  %271 = insertelement <2 x i32> %270, i32 %192, i64 1, !dbg !30
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !30
  %273 = fmul <2 x float> %263, %266, !dbg !40
  %274 = fmul <2 x float> %269, %272, !dbg !41
  %275 = fadd <2 x float> %273, %274, !dbg !42
  %276 = fptrunc <2 x float> %275 to <2 x bfloat>, !dbg !43
  %277 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !26
  %278 = insertelement <2 x i32> %277, i32 %78, i64 1, !dbg !26
  %279 = bitcast <2 x i32> %278 to <2 x float>, !dbg !26
  %280 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !20
  %281 = insertelement <2 x i32> %280, i32 %127, i64 1, !dbg !20
  %282 = bitcast <2 x i32> %281 to <2 x float>, !dbg !20
  %283 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !34
  %284 = insertelement <2 x i32> %283, i32 %161, i64 1, !dbg !34
  %285 = bitcast <2 x i32> %284 to <2 x float>, !dbg !34
  %286 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !30
  %287 = insertelement <2 x i32> %286, i32 %194, i64 1, !dbg !30
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !30
  %289 = fmul <2 x float> %279, %282, !dbg !40
  %290 = fmul <2 x float> %285, %288, !dbg !41
  %291 = fadd <2 x float> %289, %290, !dbg !42
  %292 = fptrunc <2 x float> %291 to <2 x bfloat>, !dbg !43
  %293 = bitcast <2 x bfloat> %244 to i32, !dbg !43
  %294 = bitcast <2 x bfloat> %260 to i32, !dbg !43
  %295 = bitcast <2 x bfloat> %276 to i32, !dbg !43
  %296 = bitcast <2 x bfloat> %292 to i32, !dbg !43
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %293, i32 %294, i32 %295, i32 %296, ptr addrspace(1) %228) #1, !dbg !43
  %297 = getelementptr bfloat, ptr addrspace(1) %4, i64 %227, !dbg !44
  %298 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !36
  %299 = insertelement <2 x i32> %298, i32 %204, i64 1, !dbg !36
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !36
  %301 = insertelement <2 x i32> poison, i32 %219, i64 0, !dbg !38
  %302 = insertelement <2 x i32> %301, i32 %220, i64 1, !dbg !38
  %303 = bitcast <2 x i32> %302 to <2 x float>, !dbg !38
  %304 = insertelement <2 x i32> %232, i32 %72, i64 1, !dbg !20
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !20
  %306 = insertelement <2 x i32> %238, i32 %155, i64 1, !dbg !30
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !30
  %308 = fmul <2 x float> %305, %300, !dbg !45
  %309 = fmul <2 x float> %307, %303, !dbg !46
  %310 = fadd <2 x float> %308, %309, !dbg !47
  %311 = fptrunc <2 x float> %310 to <2 x bfloat>, !dbg !48
  %312 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !36
  %313 = insertelement <2 x i32> %312, i32 %206, i64 1, !dbg !36
  %314 = bitcast <2 x i32> %313 to <2 x float>, !dbg !36
  %315 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !38
  %316 = insertelement <2 x i32> %315, i32 %222, i64 1, !dbg !38
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !38
  %318 = insertelement <2 x i32> %248, i32 %74, i64 1, !dbg !20
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !20
  %320 = insertelement <2 x i32> %254, i32 %157, i64 1, !dbg !30
  %321 = bitcast <2 x i32> %320 to <2 x float>, !dbg !30
  %322 = fmul <2 x float> %319, %314, !dbg !45
  %323 = fmul <2 x float> %321, %317, !dbg !46
  %324 = fadd <2 x float> %322, %323, !dbg !47
  %325 = fptrunc <2 x float> %324 to <2 x bfloat>, !dbg !48
  %326 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !36
  %327 = insertelement <2 x i32> %326, i32 %208, i64 1, !dbg !36
  %328 = bitcast <2 x i32> %327 to <2 x float>, !dbg !36
  %329 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !38
  %330 = insertelement <2 x i32> %329, i32 %224, i64 1, !dbg !38
  %331 = bitcast <2 x i32> %330 to <2 x float>, !dbg !38
  %332 = insertelement <2 x i32> %264, i32 %76, i64 1, !dbg !20
  %333 = bitcast <2 x i32> %332 to <2 x float>, !dbg !20
  %334 = insertelement <2 x i32> %270, i32 %159, i64 1, !dbg !30
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !30
  %336 = fmul <2 x float> %333, %328, !dbg !45
  %337 = fmul <2 x float> %335, %331, !dbg !46
  %338 = fadd <2 x float> %336, %337, !dbg !47
  %339 = fptrunc <2 x float> %338 to <2 x bfloat>, !dbg !48
  %340 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !36
  %341 = insertelement <2 x i32> %340, i32 %210, i64 1, !dbg !36
  %342 = bitcast <2 x i32> %341 to <2 x float>, !dbg !36
  %343 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !38
  %344 = insertelement <2 x i32> %343, i32 %226, i64 1, !dbg !38
  %345 = bitcast <2 x i32> %344 to <2 x float>, !dbg !38
  %346 = insertelement <2 x i32> %280, i32 %78, i64 1, !dbg !20
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !20
  %348 = insertelement <2 x i32> %286, i32 %161, i64 1, !dbg !30
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !30
  %350 = fmul <2 x float> %347, %342, !dbg !45
  %351 = fmul <2 x float> %349, %345, !dbg !46
  %352 = fadd <2 x float> %350, %351, !dbg !47
  %353 = fptrunc <2 x float> %352 to <2 x bfloat>, !dbg !48
  %354 = bitcast <2 x bfloat> %311 to i32, !dbg !48
  %355 = bitcast <2 x bfloat> %325 to i32, !dbg !48
  %356 = bitcast <2 x bfloat> %339 to i32, !dbg !48
  %357 = bitcast <2 x bfloat> %353 to i32, !dbg !48
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %354, i32 %355, i32 %356, i32 %357, ptr addrspace(1) %297) #1, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz5bsmvy4vpmw334kld47e3roamvykzjdthccx23rhizodac5bkq.py", directory: "results/my_experiment/torchinductor_cache_0/z5")
!4 = !{ptr @triton_poi_fused__to_copy_13, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_13", linkageName: "triton_poi_fused__to_copy_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 19, scope: !6)
!14 = !DILocation(line: 24, column: 19, scope: !6)
!15 = !DILocation(line: 25, column: 19, scope: !6)
!16 = !DILocation(line: 28, column: 32, scope: !6)
!17 = !DILocation(line: 28, column: 44, scope: !6)
!18 = !DILocation(line: 28, column: 37, scope: !6)
!19 = !DILocation(line: 28, column: 30, scope: !6)
!20 = !DILocation(line: 28, column: 49, scope: !6)
!21 = !DILocation(line: 29, column: 39, scope: !6)
!22 = !DILocation(line: 29, column: 33, scope: !6)
!23 = !DILocation(line: 29, column: 47, scope: !6)
!24 = !DILocation(line: 29, column: 44, scope: !6)
!25 = !DILocation(line: 29, column: 30, scope: !6)
!26 = !DILocation(line: 29, column: 52, scope: !6)
!27 = !DILocation(line: 30, column: 34, scope: !6)
!28 = !DILocation(line: 30, column: 41, scope: !6)
!29 = !DILocation(line: 30, column: 30, scope: !6)
!30 = !DILocation(line: 30, column: 53, scope: !6)
!31 = !DILocation(line: 31, column: 34, scope: !6)
!32 = !DILocation(line: 31, column: 48, scope: !6)
!33 = !DILocation(line: 31, column: 30, scope: !6)
!34 = !DILocation(line: 31, column: 56, scope: !6)
!35 = !DILocation(line: 32, column: 30, scope: !6)
!36 = !DILocation(line: 32, column: 52, scope: !6)
!37 = !DILocation(line: 33, column: 31, scope: !6)
!38 = !DILocation(line: 33, column: 57, scope: !6)
!39 = !DILocation(line: 42, column: 25, scope: !6)
!40 = !DILocation(line: 34, column: 18, scope: !6)
!41 = !DILocation(line: 35, column: 18, scope: !6)
!42 = !DILocation(line: 36, column: 18, scope: !6)
!43 = !DILocation(line: 42, column: 36, scope: !6)
!44 = !DILocation(line: 43, column: 25, scope: !6)
!45 = !DILocation(line: 38, column: 18, scope: !6)
!46 = !DILocation(line: 39, column: 19, scope: !6)
!47 = !DILocation(line: 40, column: 19, scope: !6)
!48 = !DILocation(line: 43, column: 37, scope: !6)
!49 = !DILocation(line: 43, column: 4, scope: !6)
