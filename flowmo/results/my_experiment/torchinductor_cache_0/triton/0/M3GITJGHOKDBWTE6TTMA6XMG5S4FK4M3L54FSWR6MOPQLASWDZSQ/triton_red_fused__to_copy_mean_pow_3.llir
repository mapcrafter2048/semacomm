; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 2, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = and i32 %8, 3, !dbg !11
  %12 = or disjoint i32 %10, %7, !dbg !12
  %13 = sdiv i32 %12, 12, !dbg !13
  %14 = mul i32 %13, 12, !dbg !14
  %.decomposed = sub i32 %12, %14, !dbg !14
  %15 = mul nsw i32 %.decomposed, 96, !dbg !15
  %16 = mul i32 %13, 3456, !dbg !16
  %17 = or disjoint i32 %15, %11
  %18 = add i32 %17, %16
  %19 = sext i32 %18 to i64, !dbg !17
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %22 = bitcast i16 %21 to bfloat, !dbg !18
  %23 = fpext bfloat %22 to float, !dbg !19
  %24 = fmul float %23, %23, !dbg !20
  %25 = or disjoint i32 %18, 4, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !17
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %29 = bitcast i16 %28 to bfloat, !dbg !18
  %30 = fpext bfloat %29 to float, !dbg !19
  %31 = fmul float %30, %30, !dbg !20
  %32 = fadd float %24, %31, !dbg !22
  %33 = or disjoint i32 %18, 8, !dbg !21
  %34 = sext i32 %33 to i64, !dbg !17
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !17
  %36 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %35, i1 true) #3, !dbg !18
  %37 = bitcast i16 %36 to bfloat, !dbg !18
  %38 = fpext bfloat %37 to float, !dbg !19
  %39 = fmul float %38, %38, !dbg !20
  %40 = fadd float %32, %39, !dbg !22
  %41 = or disjoint i32 %18, 12, !dbg !21
  %42 = sext i32 %41 to i64, !dbg !17
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !17
  %44 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %43, i1 true) #3, !dbg !18
  %45 = bitcast i16 %44 to bfloat, !dbg !18
  %46 = fpext bfloat %45 to float, !dbg !19
  %47 = fmul float %46, %46, !dbg !20
  %48 = fadd float %40, %47, !dbg !22
  %49 = or disjoint i32 %18, 16, !dbg !21
  %50 = sext i32 %49 to i64, !dbg !17
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !17
  %52 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %51, i1 true) #3, !dbg !18
  %53 = bitcast i16 %52 to bfloat, !dbg !18
  %54 = fpext bfloat %53 to float, !dbg !19
  %55 = fmul float %54, %54, !dbg !20
  %56 = fadd float %48, %55, !dbg !22
  %57 = or disjoint i32 %18, 20, !dbg !21
  %58 = sext i32 %57 to i64, !dbg !17
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !17
  %60 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %59, i1 true) #3, !dbg !18
  %61 = bitcast i16 %60 to bfloat, !dbg !18
  %62 = fpext bfloat %61 to float, !dbg !19
  %63 = fmul float %62, %62, !dbg !20
  %64 = fadd float %56, %63, !dbg !22
  %65 = or disjoint i32 %18, 24, !dbg !21
  %66 = sext i32 %65 to i64, !dbg !17
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !17
  %68 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %67, i1 true) #3, !dbg !18
  %69 = bitcast i16 %68 to bfloat, !dbg !18
  %70 = fpext bfloat %69 to float, !dbg !19
  %71 = fmul float %70, %70, !dbg !20
  %72 = fadd float %64, %71, !dbg !22
  %73 = or disjoint i32 %18, 28, !dbg !21
  %74 = sext i32 %73 to i64, !dbg !17
  %75 = getelementptr bfloat, ptr addrspace(1) %0, i64 %74, !dbg !17
  %76 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %75, i1 true) #3, !dbg !18
  %77 = bitcast i16 %76 to bfloat, !dbg !18
  %78 = fpext bfloat %77 to float, !dbg !19
  %79 = fmul float %78, %78, !dbg !20
  %80 = fadd float %72, %79, !dbg !22
  %81 = add i32 %18, 32, !dbg !21
  %82 = sext i32 %81 to i64, !dbg !17
  %83 = getelementptr bfloat, ptr addrspace(1) %0, i64 %82, !dbg !17
  %84 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %83, i1 true) #3, !dbg !18
  %85 = bitcast i16 %84 to bfloat, !dbg !18
  %86 = fpext bfloat %85 to float, !dbg !19
  %87 = fmul float %86, %86, !dbg !20
  %88 = fadd float %80, %87, !dbg !22
  %89 = add i32 %18, 36, !dbg !21
  %90 = sext i32 %89 to i64, !dbg !17
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !17
  %92 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %91, i1 true) #3, !dbg !18
  %93 = bitcast i16 %92 to bfloat, !dbg !18
  %94 = fpext bfloat %93 to float, !dbg !19
  %95 = fmul float %94, %94, !dbg !20
  %96 = fadd float %88, %95, !dbg !22
  %97 = add i32 %18, 40, !dbg !21
  %98 = sext i32 %97 to i64, !dbg !17
  %99 = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !17
  %100 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %99, i1 true) #3, !dbg !18
  %101 = bitcast i16 %100 to bfloat, !dbg !18
  %102 = fpext bfloat %101 to float, !dbg !19
  %103 = fmul float %102, %102, !dbg !20
  %104 = fadd float %96, %103, !dbg !22
  %105 = add i32 %18, 44, !dbg !21
  %106 = sext i32 %105 to i64, !dbg !17
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !17
  %108 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %107, i1 true) #3, !dbg !18
  %109 = bitcast i16 %108 to bfloat, !dbg !18
  %110 = fpext bfloat %109 to float, !dbg !19
  %111 = fmul float %110, %110, !dbg !20
  %112 = fadd float %104, %111, !dbg !22
  %113 = add i32 %18, 48, !dbg !21
  %114 = sext i32 %113 to i64, !dbg !17
  %115 = getelementptr bfloat, ptr addrspace(1) %0, i64 %114, !dbg !17
  %116 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %115, i1 true) #3, !dbg !18
  %117 = bitcast i16 %116 to bfloat, !dbg !18
  %118 = fpext bfloat %117 to float, !dbg !19
  %119 = fmul float %118, %118, !dbg !20
  %120 = fadd float %112, %119, !dbg !22
  %121 = add i32 %18, 52, !dbg !21
  %122 = sext i32 %121 to i64, !dbg !17
  %123 = getelementptr bfloat, ptr addrspace(1) %0, i64 %122, !dbg !17
  %124 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %123, i1 true) #3, !dbg !18
  %125 = bitcast i16 %124 to bfloat, !dbg !18
  %126 = fpext bfloat %125 to float, !dbg !19
  %127 = fmul float %126, %126, !dbg !20
  %128 = fadd float %120, %127, !dbg !22
  %129 = add i32 %18, 56, !dbg !21
  %130 = sext i32 %129 to i64, !dbg !17
  %131 = getelementptr bfloat, ptr addrspace(1) %0, i64 %130, !dbg !17
  %132 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %131, i1 true) #3, !dbg !18
  %133 = add i32 %18, 60, !dbg !21
  %134 = sext i32 %133 to i64, !dbg !17
  %135 = getelementptr bfloat, ptr addrspace(1) %0, i64 %134, !dbg !17
  %136 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %135, i1 true) #3, !dbg !18
  %137 = insertelement <2 x i16> poison, i16 %132, i64 0, !dbg !18
  %138 = insertelement <2 x i16> %137, i16 %136, i64 1, !dbg !18
  %139 = bitcast <2 x i16> %138 to <2 x bfloat>, !dbg !18
  %140 = fpext <2 x bfloat> %139 to <2 x float>, !dbg !19
  %141 = fmul <2 x float> %140, %140, !dbg !20
  %142 = extractelement <2 x float> %141, i64 0, !dbg !22
  %143 = fadd float %128, %142, !dbg !22
  %144 = extractelement <2 x float> %141, i64 1, !dbg !22
  %145 = fadd float %143, %144, !dbg !22
  %146 = add i32 %18, 64, !dbg !21
  %147 = sext i32 %146 to i64, !dbg !17
  %148 = getelementptr bfloat, ptr addrspace(1) %0, i64 %147, !dbg !17
  %149 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %148, i1 true) #3, !dbg !18
  %150 = add i32 %18, 68, !dbg !21
  %151 = sext i32 %150 to i64, !dbg !17
  %152 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !17
  %153 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %152, i1 true) #3, !dbg !18
  %154 = insertelement <2 x i16> poison, i16 %149, i64 0, !dbg !18
  %155 = insertelement <2 x i16> %154, i16 %153, i64 1, !dbg !18
  %156 = bitcast <2 x i16> %155 to <2 x bfloat>, !dbg !18
  %157 = fpext <2 x bfloat> %156 to <2 x float>, !dbg !19
  %158 = fmul <2 x float> %157, %157, !dbg !20
  %159 = extractelement <2 x float> %158, i64 0, !dbg !22
  %160 = fadd float %145, %159, !dbg !22
  %161 = extractelement <2 x float> %158, i64 1, !dbg !22
  %162 = fadd float %160, %161, !dbg !22
  %163 = add i32 %18, 72, !dbg !21
  %164 = sext i32 %163 to i64, !dbg !17
  %165 = getelementptr bfloat, ptr addrspace(1) %0, i64 %164, !dbg !17
  %166 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %165, i1 true) #3, !dbg !18
  %167 = add i32 %18, 76, !dbg !21
  %168 = sext i32 %167 to i64, !dbg !17
  %169 = getelementptr bfloat, ptr addrspace(1) %0, i64 %168, !dbg !17
  %170 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %169, i1 true) #3, !dbg !18
  %171 = insertelement <2 x i16> poison, i16 %166, i64 0, !dbg !18
  %172 = insertelement <2 x i16> %171, i16 %170, i64 1, !dbg !18
  %173 = bitcast <2 x i16> %172 to <2 x bfloat>, !dbg !18
  %174 = fpext <2 x bfloat> %173 to <2 x float>, !dbg !19
  %175 = fmul <2 x float> %174, %174, !dbg !20
  %176 = extractelement <2 x float> %175, i64 0, !dbg !22
  %177 = fadd float %162, %176, !dbg !22
  %178 = extractelement <2 x float> %175, i64 1, !dbg !22
  %179 = fadd float %177, %178, !dbg !22
  %180 = add i32 %18, 80, !dbg !21
  %181 = sext i32 %180 to i64, !dbg !17
  %182 = getelementptr bfloat, ptr addrspace(1) %0, i64 %181, !dbg !17
  %183 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %182, i1 true) #3, !dbg !18
  %184 = add i32 %18, 84, !dbg !21
  %185 = sext i32 %184 to i64, !dbg !17
  %186 = getelementptr bfloat, ptr addrspace(1) %0, i64 %185, !dbg !17
  %187 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %186, i1 true) #3, !dbg !18
  %188 = insertelement <2 x i16> poison, i16 %183, i64 0, !dbg !18
  %189 = insertelement <2 x i16> %188, i16 %187, i64 1, !dbg !18
  %190 = bitcast <2 x i16> %189 to <2 x bfloat>, !dbg !18
  %191 = fpext <2 x bfloat> %190 to <2 x float>, !dbg !19
  %192 = fmul <2 x float> %191, %191, !dbg !20
  %193 = extractelement <2 x float> %192, i64 0, !dbg !22
  %194 = fadd float %179, %193, !dbg !22
  %195 = extractelement <2 x float> %192, i64 1, !dbg !22
  %196 = fadd float %194, %195, !dbg !22
  %197 = add i32 %18, 88, !dbg !21
  %198 = sext i32 %197 to i64, !dbg !17
  %199 = getelementptr bfloat, ptr addrspace(1) %0, i64 %198, !dbg !17
  %200 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %199, i1 true) #3, !dbg !18
  %201 = add i32 %18, 92, !dbg !21
  %202 = sext i32 %201 to i64, !dbg !17
  %203 = getelementptr bfloat, ptr addrspace(1) %0, i64 %202, !dbg !17
  %204 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %203, i1 true) #3, !dbg !18
  %205 = insertelement <2 x i16> poison, i16 %200, i64 0, !dbg !18
  %206 = insertelement <2 x i16> %205, i16 %204, i64 1, !dbg !18
  %207 = bitcast <2 x i16> %206 to <2 x bfloat>, !dbg !18
  %208 = fpext <2 x bfloat> %207 to <2 x float>, !dbg !19
  %209 = fmul <2 x float> %208, %208, !dbg !20
  %210 = extractelement <2 x float> %209, i64 0, !dbg !22
  %211 = fadd float %196, %210, !dbg !22
  %212 = extractelement <2 x float> %209, i64 1, !dbg !22
  %213 = fadd float %211, %212, !dbg !22
  %214 = and i32 %8, 63, !dbg !11
  %215 = or disjoint i32 %7, %214, !dbg !12
  %216 = bitcast float %213 to i32, !dbg !23
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !23
  %218 = bitcast i32 %217 to float, !dbg !23
  %219 = fadd float %213, %218, !dbg !27
  %220 = bitcast float %219 to i32, !dbg !23
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !23
  %222 = bitcast i32 %221 to float, !dbg !23
  %223 = fadd float %219, %222, !dbg !27
  %224 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !29
  %225 = bitcast float %223 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %226 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %214, !dbg !29
  %227 = load i32, ptr addrspace(3) %226, align 4, !dbg !29
  %228 = sext i32 %215 to i64, !dbg !30
  %229 = getelementptr float, ptr addrspace(1) %1, i64 %228, !dbg !30
  %230 = and i32 %8, 192, !dbg !31
  %231 = icmp eq i32 %230, 0, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %227, ptr addrspace(1) %229, i1 %231) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csx4xk5b2z3osj2theivxgr52hc6r2e274t2hx3mv7akolyy3hpi.py", directory: "results/my_experiment/torchinductor_cache_0/sx")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_3, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_3", linkageName: "triton_red_fused__to_copy_mean_pow_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 29, column: 19, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 38, column: 44, scope: !6)
!16 = !DILocation(line: 38, column: 54, scope: !6)
!17 = !DILocation(line: 38, column: 34, scope: !6)
!18 = !DILocation(line: 38, column: 59, scope: !6)
!19 = !DILocation(line: 38, column: 113, scope: !6)
!20 = !DILocation(line: 40, column: 22, scope: !6)
!21 = !DILocation(line: 38, column: 49, scope: !6)
!22 = !DILocation(line: 42, column: 23, scope: !6)
!23 = !DILocation(line: 286, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 44, column: 25, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 44, column: 28, scope: !6)
!30 = !DILocation(line: 45, column: 25, scope: !6)
!31 = !DILocation(line: 45, column: 36, scope: !6)
!32 = !DILocation(line: 45, column: 4, scope: !6)
