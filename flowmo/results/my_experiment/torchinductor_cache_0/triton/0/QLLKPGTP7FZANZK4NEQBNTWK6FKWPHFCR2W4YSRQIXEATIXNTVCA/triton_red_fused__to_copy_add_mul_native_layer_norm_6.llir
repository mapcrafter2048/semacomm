; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mul_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, 512, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 2, !dbg !11
  %16 = and i32 %15, 2044, !dbg !11
  %17 = icmp samesign ult i32 %16, 1152, !dbg !12
  %18 = mul i32 %10, 1152, !dbg !13
  %19 = add i32 %16, %18, !dbg !14
  %20 = sext i32 %19 to i64, !dbg !15
  %21 = getelementptr bfloat, ptr addrspace(1) %1, i64 %20, !dbg !15
  %22 = and i1 %11, %17, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %21, i1 %22) #5, !dbg !17
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !17
  %26 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !17
  %28 = extractelement <2 x bfloat> %25, i64 0, !dbg !17
  %29 = extractelement <2 x bfloat> %25, i64 1, !dbg !17
  %30 = extractelement <2 x bfloat> %27, i64 0, !dbg !17
  %31 = extractelement <2 x bfloat> %27, i64 1, !dbg !17
  %32 = fpext bfloat %28 to float, !dbg !18
  %33 = fpext bfloat %29 to float, !dbg !18
  %34 = fpext bfloat %30 to float, !dbg !18
  %35 = fpext bfloat %31 to float, !dbg !18
  %36 = select i1 %22, float %32, float 0.000000e+00, !dbg !19
  %37 = select i1 %22, float %33, float 0.000000e+00, !dbg !19
  %38 = select i1 %22, float %34, float 0.000000e+00, !dbg !19
  %39 = select i1 %22, float %35, float 0.000000e+00, !dbg !19
  %40 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %41 = fsub float %37, %36, !dbg !21
  %42 = select i1 %22, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %43 = fcmp oeq float %42, 0.000000e+00, !dbg !27
  %44 = tail call float @llvm.nvvm.div.full(float %40, float %42), !dbg !28
  %45 = select i1 %43, float 0.000000e+00, float %44, !dbg !29
  %46 = fmul float %45, %41, !dbg !30
  %47 = fadd float %36, %46, !dbg !31
  %48 = fmul float %41, %41, !dbg !32
  %49 = fmul float %40, %48, !dbg !33
  %50 = fmul float %45, %49, !dbg !34
  %51 = fadd float %50, 0.000000e+00, !dbg !35
  %52 = fsub float %38, %47, !dbg !21
  %53 = select i1 %22, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %54 = fcmp oeq float %53, 0.000000e+00, !dbg !27
  %55 = tail call float @llvm.nvvm.div.full(float %40, float %53), !dbg !28
  %56 = select i1 %54, float 0.000000e+00, float %55, !dbg !29
  %57 = fmul float %56, %52, !dbg !30
  %58 = fadd float %47, %57, !dbg !31
  %59 = fmul float %52, %52, !dbg !32
  %60 = fmul float %42, %59, !dbg !33
  %61 = fmul float %56, %60, !dbg !34
  %62 = fadd float %51, %61, !dbg !35
  %63 = fsub float %39, %58, !dbg !21
  %64 = select i1 %22, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %65 = fcmp oeq float %64, 0.000000e+00, !dbg !27
  %66 = tail call float @llvm.nvvm.div.full(float %40, float %64), !dbg !28
  %67 = select i1 %65, float 0.000000e+00, float %66, !dbg !29
  %68 = fmul float %67, %63, !dbg !30
  %69 = fadd float %58, %68, !dbg !31
  %70 = fmul float %63, %63, !dbg !32
  %71 = fmul float %53, %70, !dbg !33
  %72 = fmul float %67, %71, !dbg !34
  %73 = fadd float %62, %72, !dbg !35
  %74 = bitcast float %69 to i32, !dbg !36
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 16, i32 31), !dbg !36
  %76 = bitcast i32 %75 to float, !dbg !36
  %77 = bitcast float %73 to i32, !dbg !36
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !36
  %79 = bitcast i32 %78 to float, !dbg !36
  %80 = bitcast float %64 to i32, !dbg !36
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = fsub float %76, %69, !dbg !21
  %84 = fadd float %64, %82, !dbg !26
  %85 = fcmp oeq float %84, 0.000000e+00, !dbg !27
  %86 = tail call float @llvm.nvvm.div.full(float %82, float %84), !dbg !28
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !29
  %88 = fmul float %87, %83, !dbg !30
  %89 = fadd float %69, %88, !dbg !31
  %90 = fadd float %73, %79, !dbg !37
  %91 = fmul float %83, %83, !dbg !32
  %92 = fmul float %64, %91, !dbg !33
  %93 = fmul float %87, %92, !dbg !34
  %94 = fadd float %90, %93, !dbg !35
  %95 = bitcast float %89 to i32, !dbg !36
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !36
  %97 = bitcast i32 %96 to float, !dbg !36
  %98 = bitcast float %94 to i32, !dbg !36
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !36
  %100 = bitcast i32 %99 to float, !dbg !36
  %101 = bitcast float %84 to i32, !dbg !36
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !36
  %103 = bitcast i32 %102 to float, !dbg !36
  %104 = fsub float %97, %89, !dbg !21
  %105 = fadd float %84, %103, !dbg !26
  %106 = fcmp oeq float %105, 0.000000e+00, !dbg !27
  %107 = tail call float @llvm.nvvm.div.full(float %103, float %105), !dbg !28
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !29
  %109 = fmul float %108, %104, !dbg !30
  %110 = fadd float %89, %109, !dbg !31
  %111 = fadd float %94, %100, !dbg !37
  %112 = fmul float %104, %104, !dbg !32
  %113 = fmul float %84, %112, !dbg !33
  %114 = fmul float %108, %113, !dbg !34
  %115 = fadd float %111, %114, !dbg !35
  %116 = bitcast float %110 to i32, !dbg !36
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !36
  %118 = bitcast i32 %117 to float, !dbg !36
  %119 = bitcast float %115 to i32, !dbg !36
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !36
  %121 = bitcast i32 %120 to float, !dbg !36
  %122 = bitcast float %105 to i32, !dbg !36
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !36
  %124 = bitcast i32 %123 to float, !dbg !36
  %125 = fsub float %118, %110, !dbg !21
  %126 = fadd float %105, %124, !dbg !26
  %127 = fcmp oeq float %126, 0.000000e+00, !dbg !27
  %128 = tail call float @llvm.nvvm.div.full(float %124, float %126), !dbg !28
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !29
  %130 = fmul float %129, %125, !dbg !30
  %131 = fadd float %110, %130, !dbg !31
  %132 = fadd float %115, %121, !dbg !37
  %133 = fmul float %125, %125, !dbg !32
  %134 = fmul float %105, %133, !dbg !33
  %135 = fmul float %129, %134, !dbg !34
  %136 = fadd float %132, %135, !dbg !35
  %137 = bitcast float %131 to i32, !dbg !36
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !36
  %139 = bitcast i32 %138 to float, !dbg !36
  %140 = bitcast float %136 to i32, !dbg !36
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = bitcast float %126 to i32, !dbg !36
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = fsub float %139, %131, !dbg !21
  %147 = fadd float %126, %145, !dbg !26
  %148 = fcmp oeq float %147, 0.000000e+00, !dbg !27
  %149 = tail call float @llvm.nvvm.div.full(float %145, float %147), !dbg !28
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !29
  %151 = fmul float %150, %146, !dbg !30
  %152 = fadd float %131, %151, !dbg !31
  %153 = fadd float %136, %142, !dbg !37
  %154 = fmul float %146, %146, !dbg !32
  %155 = fmul float %126, %154, !dbg !33
  %156 = fmul float %150, %155, !dbg !34
  %157 = fadd float %153, %156, !dbg !35
  %158 = bitcast float %152 to i32, !dbg !36
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !36
  %160 = bitcast i32 %159 to float, !dbg !36
  %161 = bitcast float %157 to i32, !dbg !36
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !36
  %163 = bitcast i32 %162 to float, !dbg !36
  %164 = bitcast float %147 to i32, !dbg !36
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !36
  %166 = bitcast i32 %165 to float, !dbg !36
  %167 = fsub float %160, %152, !dbg !21
  %168 = fadd float %147, %166, !dbg !26
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !27
  %170 = tail call float @llvm.nvvm.div.full(float %166, float %168), !dbg !28
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !29
  %172 = fmul float %171, %167, !dbg !30
  %173 = fadd float %152, %172, !dbg !31
  %174 = fadd float %157, %163, !dbg !37
  %175 = fmul float %167, %167, !dbg !32
  %176 = fmul float %147, %175, !dbg !33
  %177 = fmul float %171, %176, !dbg !34
  %178 = fadd float %174, %177, !dbg !35
  %179 = and i32 %14, 15, !dbg !36
  %180 = icmp eq i32 %13, 0, !dbg !36
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !36
  %182 = bitcast float %173 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 %180) #5, !dbg !36
  %183 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %179, !dbg !36
  %184 = bitcast float %178 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 %180) #5, !dbg !36
  %185 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %179, !dbg !36
  %186 = bitcast float %168 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 %180) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %187 = icmp slt i32 %12, 16, !dbg !36
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !36
  %189 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %188, i1 %187) #5, !dbg !36
  %190 = bitcast i32 %189 to float, !dbg !36
  %191 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %12, !dbg !36
  %192 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %191, i1 %187) #5, !dbg !36
  %193 = bitcast i32 %192 to float, !dbg !36
  %194 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !36
  %195 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %194, i1 %187) #5, !dbg !36
  %196 = bitcast i32 %195 to float, !dbg !36
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !36
  %198 = bitcast i32 %197 to float, !dbg !36
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 8, i32 31), !dbg !36
  %200 = bitcast i32 %199 to float, !dbg !36
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 8, i32 31), !dbg !36
  %202 = bitcast i32 %201 to float, !dbg !36
  %203 = fsub float %198, %190, !dbg !21
  %204 = fadd float %196, %202, !dbg !26
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !27
  %206 = tail call float @llvm.nvvm.div.full(float %202, float %204), !dbg !28
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !29
  %208 = fmul float %203, %207, !dbg !30
  %209 = fadd float %208, %190, !dbg !31
  %210 = fadd float %193, %200, !dbg !37
  %211 = fmul float %203, %203, !dbg !32
  %212 = fmul float %211, %196, !dbg !33
  %213 = fmul float %212, %207, !dbg !34
  %214 = fadd float %210, %213, !dbg !35
  %215 = bitcast float %209 to i32, !dbg !36
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 4, i32 31), !dbg !36
  %217 = bitcast i32 %216 to float, !dbg !36
  %218 = bitcast float %214 to i32, !dbg !36
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 4, i32 31), !dbg !36
  %220 = bitcast i32 %219 to float, !dbg !36
  %221 = bitcast float %204 to i32, !dbg !36
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 4, i32 31), !dbg !36
  %223 = bitcast i32 %222 to float, !dbg !36
  %224 = fsub float %217, %209, !dbg !21
  %225 = fadd float %204, %223, !dbg !26
  %226 = fcmp oeq float %225, 0.000000e+00, !dbg !27
  %227 = tail call float @llvm.nvvm.div.full(float %223, float %225), !dbg !28
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !29
  %229 = fmul float %224, %228, !dbg !30
  %230 = fadd float %209, %229, !dbg !31
  %231 = fadd float %214, %220, !dbg !37
  %232 = fmul float %224, %224, !dbg !32
  %233 = fmul float %204, %232, !dbg !33
  %234 = fmul float %228, %233, !dbg !34
  %235 = fadd float %231, %234, !dbg !35
  %236 = bitcast float %230 to i32, !dbg !36
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 2, i32 31), !dbg !36
  %238 = bitcast i32 %237 to float, !dbg !36
  %239 = bitcast float %235 to i32, !dbg !36
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !36
  %241 = bitcast i32 %240 to float, !dbg !36
  %242 = bitcast float %225 to i32, !dbg !36
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 2, i32 31), !dbg !36
  %244 = bitcast i32 %243 to float, !dbg !36
  %245 = fsub float %238, %230, !dbg !21
  %246 = fadd float %225, %244, !dbg !26
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !27
  %248 = tail call float @llvm.nvvm.div.full(float %244, float %246), !dbg !28
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !29
  %250 = fmul float %245, %249, !dbg !30
  %251 = fadd float %230, %250, !dbg !31
  %252 = fadd float %235, %241, !dbg !37
  %253 = fmul float %245, %245, !dbg !32
  %254 = fmul float %225, %253, !dbg !33
  %255 = fmul float %249, %254, !dbg !34
  %256 = fadd float %252, %255, !dbg !35
  %257 = bitcast float %251 to i32, !dbg !36
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 1, i32 31), !dbg !36
  %259 = bitcast i32 %258 to float, !dbg !36
  %260 = bitcast float %256 to i32, !dbg !36
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 1, i32 31), !dbg !36
  %262 = bitcast i32 %261 to float, !dbg !36
  %263 = bitcast float %246 to i32, !dbg !36
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 1, i32 31), !dbg !36
  %265 = bitcast i32 %264 to float, !dbg !36
  %266 = fsub float %259, %251, !dbg !21
  %267 = fadd float %246, %265, !dbg !26
  %268 = fcmp oeq float %267, 0.000000e+00, !dbg !27
  %269 = tail call float @llvm.nvvm.div.full(float %265, float %267), !dbg !28
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !29
  %271 = fmul float %266, %270, !dbg !30
  %272 = fadd float %251, %271, !dbg !31
  %273 = fadd float %256, %262, !dbg !37
  %274 = fmul float %266, %266, !dbg !32
  %275 = fmul float %246, %274, !dbg !33
  %276 = fmul float %270, %275, !dbg !34
  %277 = fadd float %273, %276, !dbg !35
  %278 = and i32 %12, 15, !dbg !36
  %279 = icmp eq i32 %278, 0, !dbg !36
  %280 = and i1 %187, %279, !dbg !36
  %281 = bitcast float %272 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %281, i1 %280) #5, !dbg !36
  %282 = bitcast float %277 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %282, i1 %280) #5, !dbg !36
  %283 = bitcast float %267 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %283, i1 %280) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %284 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %285 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !36
  %286 = sext i32 %10 to i64, !dbg !38
  %287 = getelementptr float, ptr addrspace(1) %4, i64 %286, !dbg !38
  %288 = and i32 %12, 511, !dbg !39
  %289 = icmp eq i32 %288, 0, !dbg !39
  %290 = bitcast float %284 to i32, !dbg !39
  %291 = and i1 %11, %289, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %290, ptr addrspace(1) %287, i1 %291) #5, !dbg !39
  %292 = tail call float @llvm.nvvm.div.full(float %285, float 1.152000e+03), !dbg !40
  %293 = fadd float %292, 0x3EB0C6F7A0000000, !dbg !41
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %294, 0, !dbg !42
  br i1 %.not.i, label %297, label %295, !dbg !42

295:                                              ; preds = %9
  %296 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %293), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

297:                                              ; preds = %9
  %298 = tail call float @llvm.nvvm.rsqrt.approx.f(float %293), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %295, %297
  %.0.i = phi float [ %296, %295 ], [ %298, %297 ], !dbg !42
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i10 = icmp eq i32 %302, 0, !dbg !42
  br i1 %.not.i10, label %305, label %303, !dbg !42

303:                                              ; preds = %__nv_rsqrtf.exit
  %304 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %293), !dbg !42
  br label %__nv_rsqrtf.exit12, !dbg !42

305:                                              ; preds = %__nv_rsqrtf.exit
  %306 = tail call float @llvm.nvvm.rsqrt.approx.f(float %293), !dbg !42
  br label %__nv_rsqrtf.exit12, !dbg !42

__nv_rsqrtf.exit12:                               ; preds = %303, %305
  %.0.i11 = phi float [ %304, %303 ], [ %306, %305 ], !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !44
  %308 = bitcast float %.0.i to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %308, ptr addrspace(1) %307, i1 %291) #5, !dbg !45
  %309 = sdiv i32 %10, 256, !dbg !46
  %310 = mul i32 %309, 6912, !dbg !47
  %311 = add i32 %16, %310, !dbg !48
  %312 = sext i32 %311 to i64, !dbg !49
  %313 = getelementptr bfloat, ptr addrspace(1) %2, i64 %312, !dbg !49
  %314 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %313, i1 %22) #5, !dbg !50
  %315 = extractvalue { i32, i32 } %314, 0, !dbg !50
  %316 = bitcast i32 %315 to <2 x bfloat>, !dbg !50
  %317 = extractvalue { i32, i32 } %314, 1, !dbg !50
  %318 = bitcast i32 %317 to <2 x bfloat>, !dbg !50
  %319 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %21, i1 %22) #5, !dbg !51
  %320 = extractvalue { i32, i32 } %319, 0, !dbg !51
  %321 = bitcast i32 %320 to <2 x bfloat>, !dbg !51
  %322 = extractvalue { i32, i32 } %319, 1, !dbg !51
  %323 = bitcast i32 %322 to <2 x bfloat>, !dbg !51
  %324 = getelementptr bfloat, ptr addrspace(1) %3, i64 %312, !dbg !52
  %325 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %324, i1 %22) #5, !dbg !53
  %326 = extractvalue { i32, i32 } %325, 0, !dbg !53
  %327 = bitcast i32 %326 to <2 x bfloat>, !dbg !53
  %328 = extractvalue { i32, i32 } %325, 1, !dbg !53
  %329 = bitcast i32 %328 to <2 x bfloat>, !dbg !53
  %330 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !54
  %331 = fpext <2 x bfloat> %316 to <2 x float>, !dbg !55
  %332 = fpext <2 x bfloat> %321 to <2 x float>, !dbg !56
  %333 = fpext <2 x bfloat> %327 to <2 x float>, !dbg !57
  %334 = fadd <2 x float> %331, splat (float 1.000000e+00), !dbg !58
  %335 = insertelement <2 x float> poison, float %284, i64 0, !dbg !59
  %336 = shufflevector <2 x float> %335, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %337 = fsub <2 x float> %332, %336, !dbg !59
  %338 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !60
  %339 = shufflevector <2 x float> %338, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %340 = fmul <2 x float> %339, %337, !dbg !60
  %341 = fmul <2 x float> %334, %340, !dbg !61
  %342 = fadd <2 x float> %341, %333, !dbg !62
  %343 = fptrunc <2 x float> %342 to <2 x bfloat>, !dbg !63
  %344 = fpext <2 x bfloat> %318 to <2 x float>, !dbg !55
  %345 = fpext <2 x bfloat> %323 to <2 x float>, !dbg !56
  %346 = fpext <2 x bfloat> %329 to <2 x float>, !dbg !57
  %347 = fadd <2 x float> %344, splat (float 1.000000e+00), !dbg !58
  %348 = fsub <2 x float> %345, %336, !dbg !59
  %349 = fmul <2 x float> %339, %348, !dbg !60
  %350 = fmul <2 x float> %347, %349, !dbg !61
  %351 = fadd <2 x float> %350, %346, !dbg !62
  %352 = fptrunc <2 x float> %351 to <2 x bfloat>, !dbg !63
  %353 = bitcast <2 x bfloat> %343 to i32, !dbg !63
  %354 = bitcast <2 x bfloat> %352 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %353, i32 %354, ptr addrspace(1) %330, i1 %22) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjsqw2i2zf3a436ecepnjzt5dcdthkdqpwtimptfeymy4qikfqhg.py", directory: "results/my_experiment/torchinductor_cache_0/js")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_native_layer_norm_6, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_native_layer_norm_6", linkageName: "triton_red_fused__to_copy_add_mul_native_layer_norm_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 61, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!37 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!38 = !DILocation(line: 51, column: 25, scope: !6)
!39 = !DILocation(line: 51, column: 36, scope: !6)
!40 = !DILocation(line: 53, column: 20, scope: !6)
!41 = !DILocation(line: 55, column: 20, scope: !6)
!42 = !DILocation(line: 56, column: 28, scope: !6)
!43 = !DILocation(line: 57, column: 4, scope: !6)
!44 = !DILocation(line: 58, column: 28, scope: !6)
!45 = !DILocation(line: 58, column: 40, scope: !6)
!46 = !DILocation(line: 59, column: 19, scope: !6)
!47 = !DILocation(line: 66, column: 47, scope: !6)
!48 = !DILocation(line: 66, column: 42, scope: !6)
!49 = !DILocation(line: 66, column: 35, scope: !6)
!50 = !DILocation(line: 66, column: 52, scope: !6)
!51 = !DILocation(line: 67, column: 52, scope: !6)
!52 = !DILocation(line: 68, column: 35, scope: !6)
!53 = !DILocation(line: 68, column: 52, scope: !6)
!54 = !DILocation(line: 79, column: 29, scope: !6)
!55 = !DILocation(line: 66, column: 113, scope: !6)
!56 = !DILocation(line: 67, column: 114, scope: !6)
!57 = !DILocation(line: 68, column: 113, scope: !6)
!58 = !DILocation(line: 70, column: 24, scope: !6)
!59 = !DILocation(line: 73, column: 24, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 75, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 53, scope: !6)
!64 = !DILocation(line: 60, column: 4, scope: !6)
