; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 3, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = icmp slt i32 %11, 6144, !dbg !13
  %13 = shl i32 %8, 3, !dbg !14
  %14 = and i32 %13, 56, !dbg !14
  %15 = sdiv i32 %11, 12, !dbg !15
  %16 = mul i32 %11, 96
  %17 = mul i32 %15, 2304
  %18 = add i32 %17, %16
  %19 = add i32 %18, %14, !dbg !16
  %20 = sext i32 %19 to i64, !dbg !17
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %12) #3, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !18
  %31 = extractelement <2 x bfloat> %26, i64 0, !dbg !18
  %32 = extractelement <2 x bfloat> %26, i64 1, !dbg !18
  %33 = extractelement <2 x bfloat> %28, i64 0, !dbg !18
  %34 = extractelement <2 x bfloat> %28, i64 1, !dbg !18
  %35 = extractelement <2 x bfloat> %30, i64 0, !dbg !18
  %36 = extractelement <2 x bfloat> %30, i64 1, !dbg !18
  %37 = fpext bfloat %31 to float, !dbg !19
  %38 = fpext bfloat %32 to float, !dbg !19
  %39 = fpext bfloat %33 to float, !dbg !19
  %40 = fpext bfloat %34 to float, !dbg !19
  %41 = fpext bfloat %35 to float, !dbg !19
  %42 = fpext bfloat %36 to float, !dbg !19
  %43 = fmul float %37, %37, !dbg !20
  %44 = fmul float %38, %38, !dbg !20
  %45 = fmul float %39, %39, !dbg !20
  %46 = fmul float %40, %40, !dbg !20
  %47 = fmul float %41, %41, !dbg !20
  %48 = fmul float %42, %42, !dbg !20
  %49 = select i1 %12, float %43, float 0.000000e+00, !dbg !21
  %50 = select i1 %12, float %44, float 0.000000e+00, !dbg !21
  %51 = select i1 %12, float %45, float 0.000000e+00, !dbg !21
  %52 = select i1 %12, float %46, float 0.000000e+00, !dbg !21
  %53 = select i1 %12, float %47, float 0.000000e+00, !dbg !21
  %54 = select i1 %12, float %48, float 0.000000e+00, !dbg !21
  %55 = or disjoint i32 %14, 64, !dbg !22
  %56 = icmp samesign ult i32 %55, 96, !dbg !23
  %57 = add i32 %18, %55, !dbg !16
  %58 = sext i32 %57 to i64, !dbg !17
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !17
  %60 = and i1 %12, %56, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %60) #3, !dbg !18
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !18
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !18
  %64 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !18
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !18
  %66 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !18
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !18
  %68 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !18
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !18
  %70 = extractelement <2 x bfloat> %65, i64 0, !dbg !18
  %71 = extractelement <2 x bfloat> %65, i64 1, !dbg !18
  %72 = extractelement <2 x bfloat> %67, i64 0, !dbg !18
  %73 = extractelement <2 x bfloat> %67, i64 1, !dbg !18
  %74 = extractelement <2 x bfloat> %69, i64 0, !dbg !18
  %75 = extractelement <2 x bfloat> %69, i64 1, !dbg !18
  %76 = fpext bfloat %70 to float, !dbg !19
  %77 = fpext bfloat %71 to float, !dbg !19
  %78 = fpext bfloat %72 to float, !dbg !19
  %79 = fpext bfloat %73 to float, !dbg !19
  %80 = fpext bfloat %74 to float, !dbg !19
  %81 = fpext bfloat %75 to float, !dbg !19
  %82 = fmul float %76, %76, !dbg !20
  %83 = fmul float %77, %77, !dbg !20
  %84 = fmul float %78, %78, !dbg !20
  %85 = fmul float %79, %79, !dbg !20
  %86 = fmul float %80, %80, !dbg !20
  %87 = fmul float %81, %81, !dbg !20
  %88 = fadd float %49, %82, !dbg !25
  %89 = fadd float %50, %83, !dbg !25
  %90 = fadd float %51, %84, !dbg !25
  %91 = fadd float %52, %85, !dbg !25
  %92 = fadd float %53, %86, !dbg !25
  %93 = fadd float %54, %87, !dbg !25
  %94 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !19
  %95 = fmul <2 x float> %94, %94, !dbg !20
  %96 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !21
  %97 = shufflevector <2 x i1> %96, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !21
  %98 = select <2 x i1> %97, <2 x float> %95, <2 x float> zeroinitializer, !dbg !21
  %99 = fpext <2 x bfloat> %63 to <2 x float>, !dbg !19
  %100 = fmul <2 x float> %99, %99, !dbg !20
  %101 = fadd <2 x float> %98, %100, !dbg !25
  %102 = insertelement <2 x i1> poison, i1 %60, i64 0, !dbg !21
  %103 = shufflevector <2 x i1> %102, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !21
  %104 = select <2 x i1> %103, <2 x float> %101, <2 x float> %98, !dbg !21
  %105 = select i1 %60, float %88, float %49, !dbg !21
  %106 = select i1 %60, float %89, float %50, !dbg !21
  %107 = select i1 %60, float %90, float %51, !dbg !21
  %108 = select i1 %60, float %91, float %52, !dbg !21
  %109 = select i1 %60, float %92, float %53, !dbg !21
  %110 = select i1 %60, float %93, float %54, !dbg !21
  %111 = and i32 %8, 63, !dbg !11
  %112 = or disjoint i32 %7, %111, !dbg !12
  %113 = icmp slt i32 %112, 6144, !dbg !13
  %shift = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %114 = fadd <2 x float> %104, %shift, !dbg !26
  %115 = extractelement <2 x float> %114, i64 0, !dbg !26
  %116 = fadd float %105, %115, !dbg !26
  %117 = fadd float %106, %116, !dbg !26
  %118 = fadd float %107, %117, !dbg !26
  %119 = fadd float %108, %118, !dbg !26
  %120 = fadd float %109, %119, !dbg !26
  %121 = fadd float %110, %120, !dbg !26
  %122 = bitcast float %121 to i32, !dbg !31
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = fadd float %121, %124, !dbg !26
  %126 = bitcast float %125 to i32, !dbg !31
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !31
  %128 = bitcast i32 %127 to float, !dbg !31
  %129 = fadd float %125, %128, !dbg !26
  %130 = bitcast float %129 to i32, !dbg !31
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !31
  %132 = bitcast i32 %131 to float, !dbg !31
  %133 = fadd float %129, %132, !dbg !26
  %134 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !32
  %135 = bitcast float %133 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %136 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %111, !dbg !32
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !32
  %138 = sext i32 %112 to i64, !dbg !33
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !33
  %140 = and i32 %8, 448, !dbg !34
  %141 = icmp eq i32 %140, 0, !dbg !34
  %142 = and i1 %141, %113, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %139, i1 %142) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3sg2gpb3pdyenoywzsdvtinxcpgtgfewdle2u5ewpsnkitx2ubu.py", directory: "results/my_experiment/torchinductor_cache_0/3s")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_7", linkageName: "triton_red_fused__to_copy_mean_pow_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 49, scope: !6)
!17 = !DILocation(line: 38, column: 34, scope: !6)
!18 = !DILocation(line: 38, column: 59, scope: !6)
!19 = !DILocation(line: 38, column: 121, scope: !6)
!20 = !DILocation(line: 40, column: 22, scope: !6)
!21 = !DILocation(line: 43, column: 48, scope: !6)
!22 = !DILocation(line: 33, column: 31, scope: !6)
!23 = !DILocation(line: 34, column: 29, scope: !6)
!24 = !DILocation(line: 38, column: 67, scope: !6)
!25 = !DILocation(line: 42, column: 23, scope: !6)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!30 = !DILocation(line: 44, column: 25, scope: !6)
!31 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 44, column: 28, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 45, column: 36, scope: !6)
!35 = !DILocation(line: 45, column: 4, scope: !6)
