; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_gt_mul_neg_sum_where_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 7, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 1, !dbg !11
  %11 = and i32 %10, 126, !dbg !11
  %12 = and i32 %9, 127, !dbg !11
  %13 = or disjoint i32 %11, %8, !dbg !12
  %14 = or disjoint i32 %8, %12, !dbg !12
  %15 = icmp slt i32 %13, 512, !dbg !13
  %16 = icmp slt i32 %14, 512, !dbg !13
  %17 = and i32 %9, 128, !dbg !14
  %18 = icmp eq i32 %17, 0, !dbg !14
  %19 = lshr i32 %9, 6, !dbg !14
  %20 = and i32 %19, 3, !dbg !14
  %21 = or disjoint i32 %20, 4, !dbg !14
  %22 = or disjoint i32 %20, 8, !dbg !14
  %23 = or disjoint i32 %20, 12, !dbg !14
  %24 = icmp eq i32 %20, 0, !dbg !15
  %25 = shl nuw nsw i32 %20, 1, !dbg !16
  %26 = shl nuw nsw i32 %21, 1, !dbg !16
  %27 = shl nuw nsw i32 %22, 1, !dbg !16
  %28 = shl nuw nsw i32 %23, 1, !dbg !16
  %29 = ashr exact i32 %13, 1, !dbg !17
  %30 = mul i32 %29, 18, !dbg !18
  %31 = add i32 %30, %25, !dbg !19
  %32 = add i32 %30, %26, !dbg !19
  %33 = add i32 %30, %27, !dbg !19
  %34 = add i32 %30, %28, !dbg !19
  %35 = sext i32 %31 to i64, !dbg !20
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = sext i32 %32 to i64, !dbg !20
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = sext i32 %33 to i64, !dbg !20
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !20
  %41 = sext i32 %34 to i64, !dbg !20
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !20
  %43 = and i1 %24, %15, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %36, i1 %15) #3, !dbg !22
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !22
  %46 = extractelement <2 x bfloat> %45, i64 0, !dbg !22
  %47 = extractelement <2 x bfloat> %45, i64 1, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %38, i1 %15) #3, !dbg !22
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !22
  %50 = extractelement <2 x bfloat> %49, i64 0, !dbg !22
  %51 = extractelement <2 x bfloat> %49, i64 1, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %43) #3, !dbg !22
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !22
  %54 = extractelement <2 x bfloat> %53, i64 0, !dbg !22
  %55 = extractelement <2 x bfloat> %53, i64 1, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %42, i1 false) #3, !dbg !22
  %57 = zext nneg i32 %20 to i64, !dbg !23
  %58 = getelementptr i64, ptr addrspace(1) %1, i64 %57, !dbg !23
  %59 = zext nneg i32 %21 to i64, !dbg !23
  %60 = getelementptr i64, ptr addrspace(1) %1, i64 %59, !dbg !23
  %61 = zext nneg i32 %22 to i64, !dbg !23
  %62 = getelementptr i64, ptr addrspace(1) %1, i64 %61, !dbg !23
  %63 = zext nneg i32 %23 to i64, !dbg !23
  %64 = getelementptr i64, ptr addrspace(1) %1, i64 %63, !dbg !23
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %24) #3, !dbg !24
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %24) #3, !dbg !24
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 false) #3, !dbg !24
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 false) #3, !dbg !24
  %73 = fcmp ogt bfloat %46, 0xR0000, !dbg !25
  %74 = fcmp ogt bfloat %47, 0xR0000, !dbg !25
  %75 = fcmp ogt bfloat %50, 0xR0000, !dbg !25
  %76 = fcmp ogt bfloat %51, 0xR0000, !dbg !25
  %77 = fcmp ogt bfloat %54, 0xR0000, !dbg !25
  %78 = fcmp ogt bfloat %55, 0xR0000, !dbg !25
  %sext = shl i64 %66, 32, !dbg !26
  %79 = ashr exact i64 %sext, 32, !dbg !26
  %sext2 = shl i64 %68, 32, !dbg !26
  %80 = ashr exact i64 %sext2, 32, !dbg !26
  %sext4 = shl i64 %70, 32, !dbg !26
  %81 = ashr exact i64 %sext4, 32, !dbg !26
  %82 = select i1 %15, i1 %73, i1 false, !dbg !27
  %83 = select i1 %82, i64 %79, i64 0, !dbg !27
  %84 = select i1 %15, i1 %74, i1 false, !dbg !27
  %85 = select i1 %84, i64 %79, i64 0, !dbg !27
  %86 = select i1 %15, i1 %75, i1 false, !dbg !27
  %87 = select i1 %86, i64 %80, i64 0, !dbg !27
  %88 = select i1 %15, i1 %76, i1 false, !dbg !27
  %89 = select i1 %88, i64 %80, i64 0, !dbg !27
  %90 = select i1 %43, i1 %77, i1 false, !dbg !27
  %91 = select i1 %90, i64 %81, i64 0, !dbg !27
  %92 = select i1 %43, i1 %78, i1 false, !dbg !27
  %93 = select i1 %92, i64 %81, i64 0, !dbg !27
  %94 = add nsw i64 %87, %83, !dbg !28
  %95 = add nsw i64 %89, %85, !dbg !28
  %96 = add nsw i64 %94, %91, !dbg !28
  %97 = add nsw i64 %95, %93, !dbg !28
  %98 = shl nuw nsw i32 %11, 2, !dbg !33
  %99 = or disjoint i32 %98, %20, !dbg !33
  %100 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %99, !dbg !33
  %101 = insertelement <1 x i64> poison, i64 %96, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %100, <1 x i64> %101, i1 true) #3, !dbg !33
  %102 = or disjoint i32 %98, 4, !dbg !33
  %103 = or disjoint i32 %102, %20, !dbg !33
  %104 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %103, !dbg !33
  %105 = insertelement <1 x i64> poison, i64 %97, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %104, <1 x i64> %105, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %106 = icmp slt i32 %9, 512, !dbg !33
  %107 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %9, !dbg !33
  %108 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %107, i1 %106) #3, !dbg !33
  %extelt.offset = lshr i64 %108, 32, !dbg !33
  %109 = trunc nuw i64 %extelt.offset to i32, !dbg !33
  %110 = trunc i64 %108 to i32, !dbg !33
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !33
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !33
  %113 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !33
  %114 = insertelement <2 x i32> %113, i32 %112, i64 1, !dbg !33
  %115 = bitcast <2 x i32> %114 to i64, !dbg !33
  %116 = add i64 %108, %115, !dbg !28
  %extelt.offset6 = lshr i64 %116, 32, !dbg !33
  %117 = trunc nuw i64 %extelt.offset6 to i32, !dbg !33
  %118 = trunc i64 %116 to i32, !dbg !33
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !33
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !33
  %121 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !33
  %122 = insertelement <2 x i32> %121, i32 %120, i64 1, !dbg !33
  %123 = bitcast <2 x i32> %122 to i64, !dbg !33
  %124 = add i64 %116, %123, !dbg !28
  %125 = and i32 %9, 3, !dbg !33
  %126 = icmp eq i32 %125, 0, !dbg !33
  %127 = and i1 %106, %126, !dbg !33
  %128 = insertelement <1 x i64> poison, i64 %124, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %107, <1 x i64> %128, i1 %127) #3, !dbg !33
  %129 = getelementptr i8, ptr addrspace(3) %107, i32 2048, !dbg !33
  %130 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %129, i1 %106) #3, !dbg !33
  %extelt.offset7 = lshr i64 %130, 32, !dbg !33
  %131 = trunc nuw i64 %extelt.offset7 to i32, !dbg !33
  %132 = trunc i64 %130 to i32, !dbg !33
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !33
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !33
  %135 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !33
  %136 = insertelement <2 x i32> %135, i32 %134, i64 1, !dbg !33
  %137 = bitcast <2 x i32> %136 to i64, !dbg !33
  %138 = add i64 %130, %137, !dbg !28
  %extelt.offset8 = lshr i64 %138, 32, !dbg !33
  %139 = trunc nuw i64 %extelt.offset8 to i32, !dbg !33
  %140 = trunc i64 %138 to i32, !dbg !33
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !33
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !33
  %143 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !33
  %144 = insertelement <2 x i32> %143, i32 %142, i64 1, !dbg !33
  %145 = bitcast <2 x i32> %144 to i64, !dbg !33
  %146 = add i64 %138, %145, !dbg !28
  %147 = insertelement <1 x i64> poison, i64 %146, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %129, <1 x i64> %147, i1 %127) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %148 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %98, !dbg !33
  %149 = load i64, ptr addrspace(3) %148, align 16, !dbg !33
  %150 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %102, !dbg !33
  %151 = load i64, ptr addrspace(3) %150, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %152 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %11, !dbg !34
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %152, i64 %149, i64 %151, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %153 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %154 = load i64, ptr addrspace(3) %153, align 8, !dbg !34
  %155 = sext i32 %14 to i64, !dbg !35
  %156 = getelementptr i64, ptr addrspace(1) %2, i64 %155, !dbg !35
  %157 = and i1 %18, %16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %154, ptr addrspace(1) %156, i1 %157) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnz6sodu47e5mqrswyjz6y7cx62vuydwyeebqkndjolroizhugqd.py", directory: "results/my_experiment/torchinductor_cache_0/nz")
!4 = !{ptr @triton_per_fused__to_copy_gt_mul_neg_sum_where_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_gt_mul_neg_sum_where_0", linkageName: "triton_per_fused__to_copy_gt_mul_neg_sum_where_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 44, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 27, column: 38, scope: !6)
!15 = !DILocation(line: 29, column: 25, scope: !6)
!16 = !DILocation(line: 34, column: 32, scope: !6)
!17 = !DILocation(line: 34, column: 49, scope: !6)
!18 = !DILocation(line: 34, column: 43, scope: !6)
!19 = !DILocation(line: 34, column: 39, scope: !6)
!20 = !DILocation(line: 34, column: 30, scope: !6)
!21 = !DILocation(line: 34, column: 75, scope: !6)
!22 = !DILocation(line: 34, column: 67, scope: !6)
!23 = !DILocation(line: 35, column: 30, scope: !6)
!24 = !DILocation(line: 35, column: 37, scope: !6)
!25 = !DILocation(line: 37, column: 18, scope: !6)
!26 = !DILocation(line: 45, column: 21, scope: !6)
!27 = !DILocation(line: 47, column: 45, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 48, column: 26, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 48, column: 29, scope: !6)
!35 = !DILocation(line: 49, column: 25, scope: !6)
!36 = !DILocation(line: 49, column: 37, scope: !6)
!37 = !DILocation(line: 49, column: 4, scope: !6)
