; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_clone_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 6, !dbg !10
  %10 = and i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = shl i32 %8, 3, !dbg !12
  %13 = and i32 %12, 504, !dbg !12
  %14 = shl i32 %11, 9, !dbg !13
  %15 = insertelement <2 x i32> poison, i32 %7, i64 0, !dbg !14
  %16 = insertelement <2 x i32> %15, i32 %11, i64 1, !dbg !14
  %17 = shl <2 x i32> %16, <i32 3, i32 9>, !dbg !14
  %18 = insertelement <2 x i32> <i32 poison, i32 3>, i32 %10, i64 0, !dbg !15
  %19 = or disjoint <2 x i32> %17, %18, !dbg !15
  %20 = extractelement <2 x i32> %19, i64 0, !dbg !15
  %21 = icmp slt i32 %20, 6, !dbg !16
  %22 = or disjoint i32 %13, %14, !dbg !17
  %23 = or disjoint i32 %14, 2, !dbg !17
  %24 = ashr exact i32 %22, 2, !dbg !18
  %25 = or disjoint i32 %24, 1, !dbg !18
  %26 = srem i32 %25, 64, !dbg !19
  %27 = sdiv i32 %22, 256, !dbg !20
  %28 = srem i32 %27, 4, !dbg !21
  %29 = srem <2 x i32> %19, <i32 3, i32 4>, !dbg !22
  %30 = mul nsw i32 %28, 12, !dbg !23
  %31 = insertelement <2 x i32> <i32 poison, i32 3>, i32 %30, i64 0, !dbg !24
  %32 = add nsw <2 x i32> %31, %29, !dbg !24
  %33 = extractelement <2 x i32> %32, i64 0, !dbg !25
  %34 = extractelement <2 x i32> %29, i64 1, !dbg !24
  %35 = mul nsw i32 %34, 3, !dbg !24
  %36 = add nsw i32 %33, %35, !dbg !24
  %37 = insertelement <2 x i32> %19, i32 %14, i64 1, !dbg !15
  %38 = or disjoint <2 x i32> %37, <i32 4, i32 1>, !dbg !15
  %39 = or disjoint i32 %20, 4, !dbg !15
  %40 = icmp slt i32 %39, 6, !dbg !16
  %41 = srem <2 x i32> %38, <i32 3, i32 4>, !dbg !22
  %42 = sdiv i32 %39, 3, !dbg !26
  %43 = extractelement <2 x i32> %41, i64 1, !dbg !24
  %44 = mul nsw i32 %43, 3, !dbg !24
  %45 = add nsw i32 %33, %44, !dbg !24
  %46 = extractelement <2 x i32> %41, i64 0, !dbg !25
  %47 = add nsw i32 %30, %46, !dbg !25
  %48 = add nsw i32 %47, %44, !dbg !24
  %49 = add nsw i32 %47, %35, !dbg !24
  %50 = mul nsw i32 %26, 48, !dbg !27
  %51 = insertelement <2 x i32> %19, i32 %22, i64 1, !dbg !26
  %52 = sdiv <2 x i32> %51, <i32 3, i32 1024>, !dbg !26
  %53 = mul <2 x i32> %52, <i32 196608, i32 3072>, !dbg !28
  %54 = mul i32 %42, 196608, !dbg !28
  %55 = extractelement <2 x i32> %53, i64 0, !dbg !29
  %56 = extractelement <2 x i32> %53, i64 1, !dbg !29
  %57 = add i32 %55, %56, !dbg !29
  %58 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %59 = insertelement <2 x i32> %58, i32 %23, i64 1, !dbg !19
  %60 = srem <2 x i32> %59, <i32 64, i32 4>, !dbg !19
  %61 = mul nsw <2 x i32> %60, <i32 48, i32 3>, !dbg !27
  %62 = extractelement <2 x i32> %61, i64 1, !dbg !24
  %63 = add nsw i32 %47, %62, !dbg !24
  %64 = shufflevector <2 x i32> %32, <2 x i32> poison, <2 x i32> <i32 poison, i32 0>, !dbg !30
  %65 = insertelement <2 x i32> %64, i32 %57, i64 0, !dbg !30
  %66 = add <2 x i32> %65, %61, !dbg !30
  %67 = extractelement <2 x i32> %66, i64 0, !dbg !25
  %68 = add i32 %67, %33, !dbg !25
  %69 = add i32 %67, %45, !dbg !25
  %70 = extractelement <2 x i32> %66, i64 1, !dbg !30
  %71 = add i32 %67, %70, !dbg !25
  %72 = add i32 %67, %36, !dbg !25
  %73 = add i32 %57, %50, !dbg !30
  %74 = add i32 %73, %33, !dbg !25
  %75 = add i32 %57, %45, !dbg !30
  %76 = add i32 %75, %50, !dbg !25
  %77 = add i32 %57, %70, !dbg !30
  %78 = add i32 %77, %50, !dbg !25
  %79 = add i32 %57, %36, !dbg !30
  %80 = add i32 %79, %50, !dbg !25
  %81 = extractelement <2 x i32> %61, i64 0, !dbg !29
  %82 = add i32 %81, %56, !dbg !29
  %83 = add i32 %82, %54, !dbg !30
  %84 = add i32 %83, %47, !dbg !25
  %85 = add i32 %83, %48, !dbg !25
  %86 = add i32 %83, %63, !dbg !25
  %87 = add i32 %83, %49, !dbg !25
  %88 = add i32 %54, %56, !dbg !29
  %89 = add i32 %88, %50, !dbg !30
  %90 = add i32 %89, %47, !dbg !25
  %91 = add i32 %89, %48, !dbg !25
  %92 = add i32 %89, %63, !dbg !25
  %93 = add i32 %89, %49, !dbg !25
  %94 = sext i32 %68 to i64, !dbg !31
  %95 = getelementptr bfloat, ptr addrspace(1) %0, i64 %94, !dbg !31
  %96 = sext i32 %69 to i64, !dbg !31
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !31
  %98 = sext i32 %71 to i64, !dbg !31
  %99 = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !31
  %100 = sext i32 %72 to i64, !dbg !31
  %101 = getelementptr bfloat, ptr addrspace(1) %0, i64 %100, !dbg !31
  %102 = sext i32 %74 to i64, !dbg !31
  %103 = getelementptr bfloat, ptr addrspace(1) %0, i64 %102, !dbg !31
  %104 = sext i32 %76 to i64, !dbg !31
  %105 = getelementptr bfloat, ptr addrspace(1) %0, i64 %104, !dbg !31
  %106 = sext i32 %78 to i64, !dbg !31
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !31
  %108 = sext i32 %80 to i64, !dbg !31
  %109 = getelementptr bfloat, ptr addrspace(1) %0, i64 %108, !dbg !31
  %110 = sext i32 %84 to i64, !dbg !31
  %111 = getelementptr bfloat, ptr addrspace(1) %0, i64 %110, !dbg !31
  %112 = sext i32 %85 to i64, !dbg !31
  %113 = getelementptr bfloat, ptr addrspace(1) %0, i64 %112, !dbg !31
  %114 = sext i32 %86 to i64, !dbg !31
  %115 = getelementptr bfloat, ptr addrspace(1) %0, i64 %114, !dbg !31
  %116 = sext i32 %87 to i64, !dbg !31
  %117 = getelementptr bfloat, ptr addrspace(1) %0, i64 %116, !dbg !31
  %118 = sext i32 %90 to i64, !dbg !31
  %119 = getelementptr bfloat, ptr addrspace(1) %0, i64 %118, !dbg !31
  %120 = sext i32 %91 to i64, !dbg !31
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %120, !dbg !31
  %122 = sext i32 %92 to i64, !dbg !31
  %123 = getelementptr bfloat, ptr addrspace(1) %0, i64 %122, !dbg !31
  %124 = sext i32 %93 to i64, !dbg !31
  %125 = getelementptr bfloat, ptr addrspace(1) %0, i64 %124, !dbg !31
  %126 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %95, i1 %21) #1, !dbg !32
  %127 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %97, i1 %21) #1, !dbg !32
  %128 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %99, i1 %21) #1, !dbg !32
  %129 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %101, i1 %21) #1, !dbg !32
  %130 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %103, i1 %21) #1, !dbg !32
  %131 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %105, i1 %21) #1, !dbg !32
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %107, i1 %21) #1, !dbg !32
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %109, i1 %21) #1, !dbg !32
  %134 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %111, i1 %40) #1, !dbg !32
  %135 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %113, i1 %40) #1, !dbg !32
  %136 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %115, i1 %40) #1, !dbg !32
  %137 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %117, i1 %40) #1, !dbg !32
  %138 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %119, i1 %40) #1, !dbg !32
  %139 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %121, i1 %40) #1, !dbg !32
  %140 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %123, i1 %40) #1, !dbg !32
  %141 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %125, i1 %40) #1, !dbg !32
  %142 = sext i32 %33 to i64, !dbg !33
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !33
  %144 = sext i32 %45 to i64, !dbg !33
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !33
  %146 = sext i32 %70 to i64, !dbg !33
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !33
  %148 = sext i32 %36 to i64, !dbg !33
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !33
  %150 = sext i32 %47 to i64, !dbg !33
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !33
  %152 = sext i32 %48 to i64, !dbg !33
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !33
  %154 = sext i32 %63 to i64, !dbg !33
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !33
  %156 = sext i32 %49 to i64, !dbg !33
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !33
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %21) #1, !dbg !34
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %21) #1, !dbg !34
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %21) #1, !dbg !34
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %21) #1, !dbg !34
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %21) #1, !dbg !34
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %21) #1, !dbg !34
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %21) #1, !dbg !34
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %21) #1, !dbg !34
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %40) #1, !dbg !34
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %40) #1, !dbg !34
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %40) #1, !dbg !34
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %40) #1, !dbg !34
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %40) #1, !dbg !34
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %40) #1, !dbg !34
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %40) #1, !dbg !34
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %40) #1, !dbg !34
  %174 = shl i32 %20, 16, !dbg !35
  %175 = shl i32 %39, 16, !dbg !35
  %176 = add i32 %174, %22, !dbg !36
  %177 = add i32 %175, %22, !dbg !36
  %178 = sext i32 %176 to i64, !dbg !37
  %179 = getelementptr bfloat, ptr addrspace(1) %2, i64 %178, !dbg !37
  %180 = sext i32 %177 to i64, !dbg !37
  %181 = getelementptr bfloat, ptr addrspace(1) %2, i64 %180, !dbg !37
  %182 = insertelement <2 x i16> poison, i16 %126, i64 0, !dbg !32
  %183 = insertelement <2 x i16> %182, i16 %127, i64 1, !dbg !32
  %184 = bitcast <2 x i16> %183 to <2 x bfloat>, !dbg !32
  %185 = fpext <2 x bfloat> %184 to <2 x float>, !dbg !38
  %186 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !34
  %187 = insertelement <2 x i32> %186, i32 %159, i64 1, !dbg !34
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !34
  %189 = fadd <2 x float> %185, %188, !dbg !39
  %190 = fptrunc <2 x float> %189 to <2 x bfloat>, !dbg !40
  %191 = insertelement <2 x i16> poison, i16 %128, i64 0, !dbg !32
  %192 = insertelement <2 x i16> %191, i16 %129, i64 1, !dbg !32
  %193 = bitcast <2 x i16> %192 to <2 x bfloat>, !dbg !32
  %194 = fpext <2 x bfloat> %193 to <2 x float>, !dbg !38
  %195 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !34
  %196 = insertelement <2 x i32> %195, i32 %161, i64 1, !dbg !34
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !34
  %198 = fadd <2 x float> %194, %197, !dbg !39
  %199 = fptrunc <2 x float> %198 to <2 x bfloat>, !dbg !40
  %200 = insertelement <2 x i16> poison, i16 %130, i64 0, !dbg !32
  %201 = insertelement <2 x i16> %200, i16 %131, i64 1, !dbg !32
  %202 = bitcast <2 x i16> %201 to <2 x bfloat>, !dbg !32
  %203 = fpext <2 x bfloat> %202 to <2 x float>, !dbg !38
  %204 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !34
  %205 = insertelement <2 x i32> %204, i32 %163, i64 1, !dbg !34
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !34
  %207 = fadd <2 x float> %203, %206, !dbg !39
  %208 = fptrunc <2 x float> %207 to <2 x bfloat>, !dbg !40
  %209 = insertelement <2 x i16> poison, i16 %132, i64 0, !dbg !32
  %210 = insertelement <2 x i16> %209, i16 %133, i64 1, !dbg !32
  %211 = bitcast <2 x i16> %210 to <2 x bfloat>, !dbg !32
  %212 = fpext <2 x bfloat> %211 to <2 x float>, !dbg !38
  %213 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !34
  %214 = insertelement <2 x i32> %213, i32 %165, i64 1, !dbg !34
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !34
  %216 = fadd <2 x float> %212, %215, !dbg !39
  %217 = fptrunc <2 x float> %216 to <2 x bfloat>, !dbg !40
  %218 = insertelement <2 x i16> poison, i16 %134, i64 0, !dbg !32
  %219 = insertelement <2 x i16> %218, i16 %135, i64 1, !dbg !32
  %220 = bitcast <2 x i16> %219 to <2 x bfloat>, !dbg !32
  %221 = fpext <2 x bfloat> %220 to <2 x float>, !dbg !38
  %222 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !34
  %223 = insertelement <2 x i32> %222, i32 %167, i64 1, !dbg !34
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !34
  %225 = fadd <2 x float> %221, %224, !dbg !39
  %226 = fptrunc <2 x float> %225 to <2 x bfloat>, !dbg !40
  %227 = insertelement <2 x i16> poison, i16 %136, i64 0, !dbg !32
  %228 = insertelement <2 x i16> %227, i16 %137, i64 1, !dbg !32
  %229 = bitcast <2 x i16> %228 to <2 x bfloat>, !dbg !32
  %230 = fpext <2 x bfloat> %229 to <2 x float>, !dbg !38
  %231 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !34
  %232 = insertelement <2 x i32> %231, i32 %169, i64 1, !dbg !34
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !34
  %234 = fadd <2 x float> %230, %233, !dbg !39
  %235 = fptrunc <2 x float> %234 to <2 x bfloat>, !dbg !40
  %236 = insertelement <2 x i16> poison, i16 %138, i64 0, !dbg !32
  %237 = insertelement <2 x i16> %236, i16 %139, i64 1, !dbg !32
  %238 = bitcast <2 x i16> %237 to <2 x bfloat>, !dbg !32
  %239 = fpext <2 x bfloat> %238 to <2 x float>, !dbg !38
  %240 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !34
  %241 = insertelement <2 x i32> %240, i32 %171, i64 1, !dbg !34
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !34
  %243 = fadd <2 x float> %239, %242, !dbg !39
  %244 = fptrunc <2 x float> %243 to <2 x bfloat>, !dbg !40
  %245 = insertelement <2 x i16> poison, i16 %140, i64 0, !dbg !32
  %246 = insertelement <2 x i16> %245, i16 %141, i64 1, !dbg !32
  %247 = bitcast <2 x i16> %246 to <2 x bfloat>, !dbg !32
  %248 = fpext <2 x bfloat> %247 to <2 x float>, !dbg !38
  %249 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !34
  %250 = insertelement <2 x i32> %249, i32 %173, i64 1, !dbg !34
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !34
  %252 = fadd <2 x float> %248, %251, !dbg !39
  %253 = fptrunc <2 x float> %252 to <2 x bfloat>, !dbg !40
  %254 = bitcast <2 x bfloat> %190 to i32, !dbg !40
  %255 = bitcast <2 x bfloat> %199 to i32, !dbg !40
  %256 = bitcast <2 x bfloat> %208 to i32, !dbg !40
  %257 = bitcast <2 x bfloat> %217 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %255, i32 %256, i32 %257, ptr addrspace(1) %179, i1 %21) #1, !dbg !40
  %258 = bitcast <2 x bfloat> %226 to i32, !dbg !40
  %259 = bitcast <2 x bfloat> %235 to i32, !dbg !40
  %260 = bitcast <2 x bfloat> %244 to i32, !dbg !40
  %261 = bitcast <2 x bfloat> %253 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %259, i32 %260, i32 %261, ptr addrspace(1) %181, i1 %40) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "copafnfol5e5rf4oh4jgpacrw4kazcsg6d6p2e2fj5ie3j5iukus.py", directory: "results/my_experiment/torchinductor_cache_0/op")
!4 = !{ptr @triton_poi_fused_clone_6, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_clone_6", linkageName: "triton_poi_fused_clone_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 21, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 44, scope: !6)
!11 = !DILocation(line: 24, column: 28, scope: !6)
!12 = !DILocation(line: 25, column: 44, scope: !6)
!13 = !DILocation(line: 24, column: 33, scope: !6)
!14 = !DILocation(line: 21, column: 33, scope: !6)
!15 = !DILocation(line: 22, column: 23, scope: !6)
!16 = !DILocation(line: 23, column: 21, scope: !6)
!17 = !DILocation(line: 25, column: 23, scope: !6)
!18 = !DILocation(line: 28, column: 21, scope: !6)
!19 = !DILocation(line: 28, column: 26, scope: !6)
!20 = !DILocation(line: 29, column: 21, scope: !6)
!21 = !DILocation(line: 29, column: 28, scope: !6)
!22 = !DILocation(line: 31, column: 19, scope: !6)
!23 = !DILocation(line: 35, column: 45, scope: !6)
!24 = !DILocation(line: 35, column: 42, scope: !6)
!25 = !DILocation(line: 35, column: 68, scope: !6)
!26 = !DILocation(line: 32, column: 19, scope: !6)
!27 = !DILocation(line: 35, column: 53, scope: !6)
!28 = !DILocation(line: 35, column: 75, scope: !6)
!29 = !DILocation(line: 35, column: 50, scope: !6)
!30 = !DILocation(line: 35, column: 58, scope: !6)
!31 = !DILocation(line: 35, column: 30, scope: !6)
!32 = !DILocation(line: 35, column: 80, scope: !6)
!33 = !DILocation(line: 36, column: 30, scope: !6)
!34 = !DILocation(line: 36, column: 50, scope: !6)
!35 = !DILocation(line: 39, column: 36, scope: !6)
!36 = !DILocation(line: 39, column: 30, scope: !6)
!37 = !DILocation(line: 39, column: 25, scope: !6)
!38 = !DILocation(line: 35, column: 120, scope: !6)
!39 = !DILocation(line: 38, column: 18, scope: !6)
!40 = !DILocation(line: 39, column: 47, scope: !6)
!41 = !DILocation(line: 39, column: 4, scope: !6)
