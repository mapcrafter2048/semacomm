; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_native_layer_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = icmp slt i32 %11, 512, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = lshr i32 %13, 5, !dbg !11
  %16 = shl i32 %13, 2, !dbg !11
  %17 = and i32 %16, 2044, !dbg !11
  %18 = icmp samesign ult i32 %17, 1152, !dbg !12
  %19 = mul i32 %11, 1152, !dbg !13
  %20 = add i32 %17, %19, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr bfloat, ptr addrspace(1) %1, i64 %21, !dbg !15
  %23 = and i1 %12, %18, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %23) #5, !dbg !17
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !17
  %27 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !17
  %29 = extractelement <2 x bfloat> %26, i64 0, !dbg !17
  %30 = extractelement <2 x bfloat> %26, i64 1, !dbg !17
  %31 = extractelement <2 x bfloat> %28, i64 0, !dbg !17
  %32 = extractelement <2 x bfloat> %28, i64 1, !dbg !17
  %33 = fpext bfloat %29 to float, !dbg !18
  %34 = fpext bfloat %30 to float, !dbg !18
  %35 = fpext bfloat %31 to float, !dbg !18
  %36 = fpext bfloat %32 to float, !dbg !18
  %37 = select i1 %23, float %33, float 0.000000e+00, !dbg !19
  %38 = select i1 %23, float %34, float 0.000000e+00, !dbg !19
  %39 = select i1 %23, float %35, float 0.000000e+00, !dbg !19
  %40 = select i1 %23, float %36, float 0.000000e+00, !dbg !19
  %41 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %42 = fsub float %38, %37, !dbg !21
  %43 = select i1 %23, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %44 = fcmp oeq float %43, 0.000000e+00, !dbg !27
  %45 = tail call float @llvm.nvvm.div.full(float %41, float %43), !dbg !28
  %46 = select i1 %44, float 0.000000e+00, float %45, !dbg !29
  %47 = fmul float %46, %42, !dbg !30
  %48 = fadd float %37, %47, !dbg !31
  %49 = fmul float %42, %42, !dbg !32
  %50 = fmul float %41, %49, !dbg !33
  %51 = fmul float %46, %50, !dbg !34
  %52 = fadd float %51, 0.000000e+00, !dbg !35
  %53 = fsub float %39, %48, !dbg !21
  %54 = select i1 %23, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %55 = fcmp oeq float %54, 0.000000e+00, !dbg !27
  %56 = tail call float @llvm.nvvm.div.full(float %41, float %54), !dbg !28
  %57 = select i1 %55, float 0.000000e+00, float %56, !dbg !29
  %58 = fmul float %57, %53, !dbg !30
  %59 = fadd float %48, %58, !dbg !31
  %60 = fmul float %53, %53, !dbg !32
  %61 = fmul float %43, %60, !dbg !33
  %62 = fmul float %57, %61, !dbg !34
  %63 = fadd float %52, %62, !dbg !35
  %64 = fsub float %40, %59, !dbg !21
  %65 = select i1 %23, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %66 = fcmp oeq float %65, 0.000000e+00, !dbg !27
  %67 = tail call float @llvm.nvvm.div.full(float %41, float %65), !dbg !28
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !29
  %69 = fmul float %68, %64, !dbg !30
  %70 = fadd float %59, %69, !dbg !31
  %71 = fmul float %64, %64, !dbg !32
  %72 = fmul float %54, %71, !dbg !33
  %73 = fmul float %68, %72, !dbg !34
  %74 = fadd float %63, %73, !dbg !35
  %75 = bitcast float %70 to i32, !dbg !36
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 16, i32 31), !dbg !36
  %77 = bitcast i32 %76 to float, !dbg !36
  %78 = bitcast float %74 to i32, !dbg !36
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !36
  %80 = bitcast i32 %79 to float, !dbg !36
  %81 = bitcast float %65 to i32, !dbg !36
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !36
  %83 = bitcast i32 %82 to float, !dbg !36
  %84 = fsub float %77, %70, !dbg !21
  %85 = fadd float %65, %83, !dbg !26
  %86 = fcmp oeq float %85, 0.000000e+00, !dbg !27
  %87 = tail call float @llvm.nvvm.div.full(float %83, float %85), !dbg !28
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !29
  %89 = fmul float %88, %84, !dbg !30
  %90 = fadd float %70, %89, !dbg !31
  %91 = fadd float %74, %80, !dbg !37
  %92 = fmul float %84, %84, !dbg !32
  %93 = fmul float %65, %92, !dbg !33
  %94 = fmul float %88, %93, !dbg !34
  %95 = fadd float %91, %94, !dbg !35
  %96 = bitcast float %90 to i32, !dbg !36
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !36
  %98 = bitcast i32 %97 to float, !dbg !36
  %99 = bitcast float %95 to i32, !dbg !36
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !36
  %101 = bitcast i32 %100 to float, !dbg !36
  %102 = bitcast float %85 to i32, !dbg !36
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !36
  %104 = bitcast i32 %103 to float, !dbg !36
  %105 = fsub float %98, %90, !dbg !21
  %106 = fadd float %85, %104, !dbg !26
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !27
  %108 = tail call float @llvm.nvvm.div.full(float %104, float %106), !dbg !28
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !29
  %110 = fmul float %109, %105, !dbg !30
  %111 = fadd float %90, %110, !dbg !31
  %112 = fadd float %95, %101, !dbg !37
  %113 = fmul float %105, %105, !dbg !32
  %114 = fmul float %85, %113, !dbg !33
  %115 = fmul float %109, %114, !dbg !34
  %116 = fadd float %112, %115, !dbg !35
  %117 = bitcast float %111 to i32, !dbg !36
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !36
  %119 = bitcast i32 %118 to float, !dbg !36
  %120 = bitcast float %116 to i32, !dbg !36
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !36
  %122 = bitcast i32 %121 to float, !dbg !36
  %123 = bitcast float %106 to i32, !dbg !36
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !36
  %125 = bitcast i32 %124 to float, !dbg !36
  %126 = fsub float %119, %111, !dbg !21
  %127 = fadd float %106, %125, !dbg !26
  %128 = fcmp oeq float %127, 0.000000e+00, !dbg !27
  %129 = tail call float @llvm.nvvm.div.full(float %125, float %127), !dbg !28
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !29
  %131 = fmul float %130, %126, !dbg !30
  %132 = fadd float %111, %131, !dbg !31
  %133 = fadd float %116, %122, !dbg !37
  %134 = fmul float %126, %126, !dbg !32
  %135 = fmul float %106, %134, !dbg !33
  %136 = fmul float %130, %135, !dbg !34
  %137 = fadd float %133, %136, !dbg !35
  %138 = bitcast float %132 to i32, !dbg !36
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = bitcast float %137 to i32, !dbg !36
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !36
  %143 = bitcast i32 %142 to float, !dbg !36
  %144 = bitcast float %127 to i32, !dbg !36
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = fsub float %140, %132, !dbg !21
  %148 = fadd float %127, %146, !dbg !26
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !27
  %150 = tail call float @llvm.nvvm.div.full(float %146, float %148), !dbg !28
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !29
  %152 = fmul float %151, %147, !dbg !30
  %153 = fadd float %132, %152, !dbg !31
  %154 = fadd float %137, %143, !dbg !37
  %155 = fmul float %147, %147, !dbg !32
  %156 = fmul float %127, %155, !dbg !33
  %157 = fmul float %151, %156, !dbg !34
  %158 = fadd float %154, %157, !dbg !35
  %159 = bitcast float %153 to i32, !dbg !36
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !36
  %161 = bitcast i32 %160 to float, !dbg !36
  %162 = bitcast float %158 to i32, !dbg !36
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !36
  %164 = bitcast i32 %163 to float, !dbg !36
  %165 = bitcast float %148 to i32, !dbg !36
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !36
  %167 = bitcast i32 %166 to float, !dbg !36
  %168 = fsub float %161, %153, !dbg !21
  %169 = fadd float %148, %167, !dbg !26
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !27
  %171 = tail call float @llvm.nvvm.div.full(float %167, float %169), !dbg !28
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !29
  %173 = fmul float %172, %168, !dbg !30
  %174 = fadd float %153, %173, !dbg !31
  %175 = fadd float %158, %164, !dbg !37
  %176 = fmul float %168, %168, !dbg !32
  %177 = fmul float %148, %176, !dbg !33
  %178 = fmul float %172, %177, !dbg !34
  %179 = fadd float %175, %178, !dbg !35
  %180 = and i32 %15, 15, !dbg !36
  %181 = icmp eq i32 %14, 0, !dbg !36
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !36
  %183 = bitcast float %174 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 %181) #5, !dbg !36
  %184 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %180, !dbg !36
  %185 = bitcast float %179 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 %181) #5, !dbg !36
  %186 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %180, !dbg !36
  %187 = bitcast float %169 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 %181) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %188 = icmp slt i32 %13, 16, !dbg !36
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !36
  %190 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %189, i1 %188) #5, !dbg !36
  %191 = bitcast i32 %190 to float, !dbg !36
  %192 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %13, !dbg !36
  %193 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %192, i1 %188) #5, !dbg !36
  %194 = bitcast i32 %193 to float, !dbg !36
  %195 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %13, !dbg !36
  %196 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %195, i1 %188) #5, !dbg !36
  %197 = bitcast i32 %196 to float, !dbg !36
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !36
  %199 = bitcast i32 %198 to float, !dbg !36
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 8, i32 31), !dbg !36
  %201 = bitcast i32 %200 to float, !dbg !36
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !36
  %203 = bitcast i32 %202 to float, !dbg !36
  %204 = fsub float %199, %191, !dbg !21
  %205 = fadd float %197, %203, !dbg !26
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !27
  %207 = tail call float @llvm.nvvm.div.full(float %203, float %205), !dbg !28
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !29
  %209 = fmul float %204, %208, !dbg !30
  %210 = fadd float %209, %191, !dbg !31
  %211 = fadd float %194, %201, !dbg !37
  %212 = fmul float %204, %204, !dbg !32
  %213 = fmul float %212, %197, !dbg !33
  %214 = fmul float %213, %208, !dbg !34
  %215 = fadd float %211, %214, !dbg !35
  %216 = bitcast float %210 to i32, !dbg !36
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !36
  %218 = bitcast i32 %217 to float, !dbg !36
  %219 = bitcast float %215 to i32, !dbg !36
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !36
  %221 = bitcast i32 %220 to float, !dbg !36
  %222 = bitcast float %205 to i32, !dbg !36
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 4, i32 31), !dbg !36
  %224 = bitcast i32 %223 to float, !dbg !36
  %225 = fsub float %218, %210, !dbg !21
  %226 = fadd float %205, %224, !dbg !26
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !27
  %228 = tail call float @llvm.nvvm.div.full(float %224, float %226), !dbg !28
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !29
  %230 = fmul float %225, %229, !dbg !30
  %231 = fadd float %210, %230, !dbg !31
  %232 = fadd float %215, %221, !dbg !37
  %233 = fmul float %225, %225, !dbg !32
  %234 = fmul float %205, %233, !dbg !33
  %235 = fmul float %229, %234, !dbg !34
  %236 = fadd float %232, %235, !dbg !35
  %237 = bitcast float %231 to i32, !dbg !36
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 2, i32 31), !dbg !36
  %239 = bitcast i32 %238 to float, !dbg !36
  %240 = bitcast float %236 to i32, !dbg !36
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !36
  %242 = bitcast i32 %241 to float, !dbg !36
  %243 = bitcast float %226 to i32, !dbg !36
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !36
  %245 = bitcast i32 %244 to float, !dbg !36
  %246 = fsub float %239, %231, !dbg !21
  %247 = fadd float %226, %245, !dbg !26
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !27
  %249 = tail call float @llvm.nvvm.div.full(float %245, float %247), !dbg !28
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !29
  %251 = fmul float %246, %250, !dbg !30
  %252 = fadd float %231, %251, !dbg !31
  %253 = fadd float %236, %242, !dbg !37
  %254 = fmul float %246, %246, !dbg !32
  %255 = fmul float %226, %254, !dbg !33
  %256 = fmul float %250, %255, !dbg !34
  %257 = fadd float %253, %256, !dbg !35
  %258 = bitcast float %252 to i32, !dbg !36
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !36
  %260 = bitcast i32 %259 to float, !dbg !36
  %261 = bitcast float %257 to i32, !dbg !36
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !36
  %263 = bitcast i32 %262 to float, !dbg !36
  %264 = bitcast float %247 to i32, !dbg !36
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !36
  %266 = bitcast i32 %265 to float, !dbg !36
  %267 = fsub float %260, %252, !dbg !21
  %268 = fadd float %247, %266, !dbg !26
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !27
  %270 = tail call float @llvm.nvvm.div.full(float %266, float %268), !dbg !28
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !29
  %272 = fmul float %267, %271, !dbg !30
  %273 = fadd float %252, %272, !dbg !31
  %274 = fadd float %257, %263, !dbg !37
  %275 = fmul float %267, %267, !dbg !32
  %276 = fmul float %247, %275, !dbg !33
  %277 = fmul float %271, %276, !dbg !34
  %278 = fadd float %274, %277, !dbg !35
  %279 = and i32 %13, 15, !dbg !36
  %280 = icmp eq i32 %279, 0, !dbg !36
  %281 = and i1 %188, %280, !dbg !36
  %282 = bitcast float %273 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %282, i1 %281) #5, !dbg !36
  %283 = bitcast float %278 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %283, i1 %281) #5, !dbg !36
  %284 = bitcast float %268 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %284, i1 %281) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %285 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %286 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !36
  %287 = sext i32 %11 to i64, !dbg !38
  %288 = getelementptr float, ptr addrspace(1) %5, i64 %287, !dbg !38
  %289 = and i32 %13, 511, !dbg !39
  %290 = icmp eq i32 %289, 0, !dbg !39
  %291 = bitcast float %285 to i32, !dbg !39
  %292 = and i1 %12, %290, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %288, i1 %292) #5, !dbg !39
  %293 = tail call float @llvm.nvvm.div.full(float %286, float 1.152000e+03), !dbg !40
  %294 = fadd float %293, 0x3EB0C6F7A0000000, !dbg !41
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %295, 0, !dbg !42
  br i1 %.not.i, label %298, label %296, !dbg !42

296:                                              ; preds = %10
  %297 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %294), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

298:                                              ; preds = %10
  %299 = tail call float @llvm.nvvm.rsqrt.approx.f(float %294), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %296, %298
  %.0.i = phi float [ %297, %296 ], [ %299, %298 ], !dbg !42
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i10 = icmp eq i32 %303, 0, !dbg !42
  br i1 %.not.i10, label %306, label %304, !dbg !42

304:                                              ; preds = %__nv_rsqrtf.exit
  %305 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %294), !dbg !42
  br label %__nv_rsqrtf.exit12, !dbg !42

306:                                              ; preds = %__nv_rsqrtf.exit
  %307 = tail call float @llvm.nvvm.rsqrt.approx.f(float %294), !dbg !42
  br label %__nv_rsqrtf.exit12, !dbg !42

__nv_rsqrtf.exit12:                               ; preds = %304, %306
  %.0.i11 = phi float [ %305, %304 ], [ %307, %306 ], !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %308 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !44
  %309 = bitcast float %.0.i to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %308, i1 %292) #5, !dbg !45
  %310 = sdiv i32 %11, 256, !dbg !46
  %311 = mul i32 %310, 1152, !dbg !47
  %312 = add i32 %17, %311, !dbg !48
  %313 = sext i32 %312 to i64, !dbg !49
  %314 = getelementptr bfloat, ptr addrspace(1) %2, i64 %313, !dbg !49
  %315 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %314, i1 %23) #5, !dbg !50
  %316 = extractvalue { i32, i32 } %315, 0, !dbg !50
  %317 = bitcast i32 %316 to <2 x bfloat>, !dbg !50
  %318 = extractvalue { i32, i32 } %315, 1, !dbg !50
  %319 = bitcast i32 %318 to <2 x bfloat>, !dbg !50
  %320 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %23) #5, !dbg !51
  %321 = extractvalue { i32, i32 } %320, 0, !dbg !51
  %322 = bitcast i32 %321 to <2 x bfloat>, !dbg !51
  %323 = extractvalue { i32, i32 } %320, 1, !dbg !51
  %324 = bitcast i32 %323 to <2 x bfloat>, !dbg !51
  %325 = mul i32 %310, 2304, !dbg !52
  %326 = add i32 %17, %325, !dbg !53
  %327 = sext i32 %326 to i64, !dbg !54
  %328 = getelementptr bfloat, ptr addrspace(1) %3, i64 %327, !dbg !54
  %329 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %328, i1 %23) #5, !dbg !55
  %330 = extractvalue { i32, i32 } %329, 0, !dbg !55
  %331 = bitcast i32 %330 to <2 x bfloat>, !dbg !55
  %332 = extractvalue { i32, i32 } %329, 1, !dbg !55
  %333 = bitcast i32 %332 to <2 x bfloat>, !dbg !55
  %334 = zext nneg i32 %17 to i64, !dbg !56
  %335 = getelementptr float, ptr addrspace(1) %4, i64 %334, !dbg !56
  %336 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %335, i1 %18) #5, !dbg !57
  %337 = extractvalue { i32, i32, i32, i32 } %336, 0, !dbg !57
  %338 = extractvalue { i32, i32, i32, i32 } %336, 1, !dbg !57
  %339 = extractvalue { i32, i32, i32, i32 } %336, 2, !dbg !57
  %340 = extractvalue { i32, i32, i32, i32 } %336, 3, !dbg !57
  %341 = getelementptr bfloat, ptr addrspace(1) %6, i64 %21, !dbg !58
  %342 = fpext <2 x bfloat> %317 to <2 x float>, !dbg !59
  %343 = fpext <2 x bfloat> %322 to <2 x float>, !dbg !60
  %344 = fpext <2 x bfloat> %331 to <2 x float>, !dbg !61
  %345 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !57
  %346 = insertelement <2 x i32> %345, i32 %338, i64 1, !dbg !57
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !57
  %348 = insertelement <2 x float> poison, float %285, i64 0, !dbg !62
  %349 = shufflevector <2 x float> %348, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %350 = fsub <2 x float> %343, %349, !dbg !62
  %351 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !63
  %352 = shufflevector <2 x float> %351, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %353 = fmul <2 x float> %352, %350, !dbg !63
  %354 = fmul <2 x float> %353, %342, !dbg !64
  %355 = fadd <2 x float> %347, %344, !dbg !65
  %356 = fadd <2 x float> %355, %354, !dbg !66
  %357 = fptrunc <2 x float> %356 to <2 x bfloat>, !dbg !67
  %358 = fpext <2 x bfloat> %319 to <2 x float>, !dbg !59
  %359 = fpext <2 x bfloat> %324 to <2 x float>, !dbg !60
  %360 = fpext <2 x bfloat> %333 to <2 x float>, !dbg !61
  %361 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !57
  %362 = insertelement <2 x i32> %361, i32 %340, i64 1, !dbg !57
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !57
  %364 = fsub <2 x float> %359, %349, !dbg !62
  %365 = fmul <2 x float> %352, %364, !dbg !63
  %366 = fmul <2 x float> %365, %358, !dbg !64
  %367 = fadd <2 x float> %363, %360, !dbg !65
  %368 = fadd <2 x float> %367, %366, !dbg !66
  %369 = fptrunc <2 x float> %368 to <2 x bfloat>, !dbg !67
  %370 = bitcast <2 x bfloat> %357 to i32, !dbg !67
  %371 = bitcast <2 x bfloat> %369 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %370, i32 %371, ptr addrspace(1) %341, i1 %23) #5, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb2uc6nmryy5aeigbdaarqjzwkmshbhz5cqmocnqu3kgai4ywqma.py", directory: "results/my_experiment/torchinductor_cache_0/b2")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_native_layer_norm_2, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_native_layer_norm_2", linkageName: "triton_red_fused__to_copy_add_div_mul_native_layer_norm_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 61, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!37 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!38 = !DILocation(line: 51, column: 25, scope: !6)
!39 = !DILocation(line: 51, column: 36, scope: !6)
!40 = !DILocation(line: 53, column: 20, scope: !6)
!41 = !DILocation(line: 55, column: 20, scope: !6)
!42 = !DILocation(line: 56, column: 28, scope: !6)
!43 = !DILocation(line: 57, column: 4, scope: !6)
!44 = !DILocation(line: 58, column: 28, scope: !6)
!45 = !DILocation(line: 58, column: 40, scope: !6)
!46 = !DILocation(line: 59, column: 19, scope: !6)
!47 = !DILocation(line: 66, column: 47, scope: !6)
!48 = !DILocation(line: 66, column: 42, scope: !6)
!49 = !DILocation(line: 66, column: 35, scope: !6)
!50 = !DILocation(line: 66, column: 52, scope: !6)
!51 = !DILocation(line: 67, column: 52, scope: !6)
!52 = !DILocation(line: 68, column: 47, scope: !6)
!53 = !DILocation(line: 68, column: 42, scope: !6)
!54 = !DILocation(line: 68, column: 35, scope: !6)
!55 = !DILocation(line: 68, column: 52, scope: !6)
!56 = !DILocation(line: 69, column: 35, scope: !6)
!57 = !DILocation(line: 69, column: 42, scope: !6)
!58 = !DILocation(line: 83, column: 29, scope: !6)
!59 = !DILocation(line: 66, column: 113, scope: !6)
!60 = !DILocation(line: 67, column: 114, scope: !6)
!61 = !DILocation(line: 68, column: 113, scope: !6)
!62 = !DILocation(line: 72, column: 24, scope: !6)
!63 = !DILocation(line: 73, column: 24, scope: !6)
!64 = !DILocation(line: 74, column: 24, scope: !6)
!65 = !DILocation(line: 76, column: 24, scope: !6)
!66 = !DILocation(line: 78, column: 24, scope: !6)
!67 = !DILocation(line: 83, column: 53, scope: !6)
!68 = !DILocation(line: 60, column: 4, scope: !6)
