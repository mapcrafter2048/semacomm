; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mul_native_layer_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11, ptr addrspace(1) readnone captures(none) %12) local_unnamed_addr !dbg !6 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %15 = icmp slt i32 %14, 512, !dbg !10
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %17 = and i32 %16, 31, !dbg !11
  %18 = lshr i32 %16, 5, !dbg !11
  %19 = shl i32 %16, 2, !dbg !11
  %20 = and i32 %19, 2044, !dbg !11
  %21 = sdiv i32 %14, 256, !dbg !12
  %22 = icmp samesign ult i32 %20, 1152, !dbg !13
  %23 = mul i32 %14, 1152, !dbg !14
  %24 = add i32 %20, %23, !dbg !15
  %25 = sext i32 %24 to i64, !dbg !16
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !16
  %27 = and i1 %15, %22, !dbg !17
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %27) #5, !dbg !18
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !18
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !18
  %31 = extractvalue { i32, i32 } %28, 1, !dbg !18
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !18
  %33 = mul i32 %21, 6912, !dbg !19
  %34 = add i32 %20, %33, !dbg !20
  %35 = sext i32 %34 to i64, !dbg !21
  %36 = getelementptr bfloat, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %27) #5, !dbg !22
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !22
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !22
  %40 = extractvalue { i32, i32 } %37, 1, !dbg !22
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !22
  %42 = getelementptr bfloat, ptr addrspace(1) %3, i64 %25, !dbg !23
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %27) #5, !dbg !24
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !24
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !24
  %46 = extractvalue { i32, i32 } %43, 1, !dbg !24
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !24
  %48 = zext nneg i32 %20 to i64, !dbg !25
  %49 = getelementptr bfloat, ptr addrspace(1) %4, i64 %48, !dbg !25
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %49, i1 %22) #5, !dbg !26
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !26
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !26
  %53 = extractvalue { i32, i32 } %50, 1, !dbg !26
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !26
  %55 = select i1 %27, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %56 = getelementptr bfloat, ptr addrspace(1) %7, i64 %25, !dbg !28
  %57 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !29
  %58 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !30
  %59 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !31
  %60 = fpext <2 x bfloat> %52 to <2 x float>, !dbg !32
  %61 = fadd <2 x float> %59, %60, !dbg !33
  %62 = fmul <2 x float> %61, %58, !dbg !34
  %63 = fadd <2 x float> %62, %57, !dbg !35
  %64 = extractelement <2 x float> %63, i64 0, !dbg !36
  %65 = select i1 %27, float %64, float 0.000000e+00, !dbg !36
  %66 = extractelement <2 x float> %63, i64 1, !dbg !36
  %67 = select i1 %27, float %66, float 0.000000e+00, !dbg !36
  %68 = fptrunc <2 x float> %63 to <2 x bfloat>, !dbg !37
  %69 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !29
  %70 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !30
  %71 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !31
  %72 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !32
  %73 = fadd <2 x float> %71, %72, !dbg !33
  %74 = fmul <2 x float> %73, %70, !dbg !34
  %75 = fadd <2 x float> %74, %69, !dbg !35
  %76 = extractelement <2 x float> %75, i64 0, !dbg !36
  %77 = select i1 %27, float %76, float 0.000000e+00, !dbg !36
  %78 = extractelement <2 x float> %75, i64 1, !dbg !36
  %79 = select i1 %27, float %78, float 0.000000e+00, !dbg !36
  %80 = fptrunc <2 x float> %75 to <2 x bfloat>, !dbg !37
  %81 = bitcast <2 x bfloat> %68 to i32, !dbg !37
  %82 = bitcast <2 x bfloat> %80 to i32, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %81, i32 %82, ptr addrspace(1) %56, i1 %27) #5, !dbg !37
  %83 = fsub float %67, %65, !dbg !38
  %84 = select i1 %27, float 2.000000e+00, float 0.000000e+00, !dbg !43
  %85 = fcmp oeq float %84, 0.000000e+00, !dbg !44
  %86 = tail call float @llvm.nvvm.div.full(float %55, float %84), !dbg !45
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !46
  %88 = fmul float %87, %83, !dbg !47
  %89 = fadd float %65, %88, !dbg !48
  %90 = fmul float %83, %83, !dbg !49
  %91 = fmul float %55, %90, !dbg !50
  %92 = fmul float %87, %91, !dbg !51
  %93 = fadd float %92, 0.000000e+00, !dbg !52
  %94 = fsub float %77, %89, !dbg !38
  %95 = select i1 %27, float 3.000000e+00, float 0.000000e+00, !dbg !43
  %96 = fcmp oeq float %95, 0.000000e+00, !dbg !44
  %97 = tail call float @llvm.nvvm.div.full(float %55, float %95), !dbg !45
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !46
  %99 = fmul float %98, %94, !dbg !47
  %100 = fadd float %89, %99, !dbg !48
  %101 = fmul float %94, %94, !dbg !49
  %102 = fmul float %84, %101, !dbg !50
  %103 = fmul float %98, %102, !dbg !51
  %104 = fadd float %93, %103, !dbg !52
  %105 = fsub float %79, %100, !dbg !38
  %106 = select i1 %27, float 4.000000e+00, float 0.000000e+00, !dbg !43
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !44
  %108 = tail call float @llvm.nvvm.div.full(float %55, float %106), !dbg !45
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !46
  %110 = fmul float %109, %105, !dbg !47
  %111 = fadd float %100, %110, !dbg !48
  %112 = fmul float %105, %105, !dbg !49
  %113 = fmul float %95, %112, !dbg !50
  %114 = fmul float %109, %113, !dbg !51
  %115 = fadd float %104, %114, !dbg !52
  %116 = bitcast float %111 to i32, !dbg !53
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !53
  %118 = bitcast i32 %117 to float, !dbg !53
  %119 = bitcast float %115 to i32, !dbg !53
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !53
  %121 = bitcast i32 %120 to float, !dbg !53
  %122 = bitcast float %106 to i32, !dbg !53
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !53
  %124 = bitcast i32 %123 to float, !dbg !53
  %125 = fsub float %118, %111, !dbg !38
  %126 = fadd float %106, %124, !dbg !43
  %127 = fcmp oeq float %126, 0.000000e+00, !dbg !44
  %128 = tail call float @llvm.nvvm.div.full(float %124, float %126), !dbg !45
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !46
  %130 = fmul float %129, %125, !dbg !47
  %131 = fadd float %111, %130, !dbg !48
  %132 = fadd float %115, %121, !dbg !54
  %133 = fmul float %125, %125, !dbg !49
  %134 = fmul float %106, %133, !dbg !50
  %135 = fmul float %129, %134, !dbg !51
  %136 = fadd float %132, %135, !dbg !52
  %137 = bitcast float %131 to i32, !dbg !53
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !53
  %139 = bitcast i32 %138 to float, !dbg !53
  %140 = bitcast float %136 to i32, !dbg !53
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !53
  %142 = bitcast i32 %141 to float, !dbg !53
  %143 = bitcast float %126 to i32, !dbg !53
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !53
  %145 = bitcast i32 %144 to float, !dbg !53
  %146 = fsub float %139, %131, !dbg !38
  %147 = fadd float %126, %145, !dbg !43
  %148 = fcmp oeq float %147, 0.000000e+00, !dbg !44
  %149 = tail call float @llvm.nvvm.div.full(float %145, float %147), !dbg !45
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !46
  %151 = fmul float %150, %146, !dbg !47
  %152 = fadd float %131, %151, !dbg !48
  %153 = fadd float %136, %142, !dbg !54
  %154 = fmul float %146, %146, !dbg !49
  %155 = fmul float %126, %154, !dbg !50
  %156 = fmul float %150, %155, !dbg !51
  %157 = fadd float %153, %156, !dbg !52
  %158 = bitcast float %152 to i32, !dbg !53
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 4, i32 31), !dbg !53
  %160 = bitcast i32 %159 to float, !dbg !53
  %161 = bitcast float %157 to i32, !dbg !53
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !53
  %163 = bitcast i32 %162 to float, !dbg !53
  %164 = bitcast float %147 to i32, !dbg !53
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !53
  %166 = bitcast i32 %165 to float, !dbg !53
  %167 = fsub float %160, %152, !dbg !38
  %168 = fadd float %147, %166, !dbg !43
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !44
  %170 = tail call float @llvm.nvvm.div.full(float %166, float %168), !dbg !45
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !46
  %172 = fmul float %171, %167, !dbg !47
  %173 = fadd float %152, %172, !dbg !48
  %174 = fadd float %157, %163, !dbg !54
  %175 = fmul float %167, %167, !dbg !49
  %176 = fmul float %147, %175, !dbg !50
  %177 = fmul float %171, %176, !dbg !51
  %178 = fadd float %174, %177, !dbg !52
  %179 = bitcast float %173 to i32, !dbg !53
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !53
  %181 = bitcast i32 %180 to float, !dbg !53
  %182 = bitcast float %178 to i32, !dbg !53
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !53
  %184 = bitcast i32 %183 to float, !dbg !53
  %185 = bitcast float %168 to i32, !dbg !53
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 2, i32 31), !dbg !53
  %187 = bitcast i32 %186 to float, !dbg !53
  %188 = fsub float %181, %173, !dbg !38
  %189 = fadd float %168, %187, !dbg !43
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !44
  %191 = tail call float @llvm.nvvm.div.full(float %187, float %189), !dbg !45
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !46
  %193 = fmul float %192, %188, !dbg !47
  %194 = fadd float %173, %193, !dbg !48
  %195 = fadd float %178, %184, !dbg !54
  %196 = fmul float %188, %188, !dbg !49
  %197 = fmul float %168, %196, !dbg !50
  %198 = fmul float %192, %197, !dbg !51
  %199 = fadd float %195, %198, !dbg !52
  %200 = bitcast float %194 to i32, !dbg !53
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !53
  %202 = bitcast i32 %201 to float, !dbg !53
  %203 = bitcast float %199 to i32, !dbg !53
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 1, i32 31), !dbg !53
  %205 = bitcast i32 %204 to float, !dbg !53
  %206 = bitcast float %189 to i32, !dbg !53
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !53
  %208 = bitcast i32 %207 to float, !dbg !53
  %209 = fsub float %202, %194, !dbg !38
  %210 = fadd float %189, %208, !dbg !43
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !44
  %212 = tail call float @llvm.nvvm.div.full(float %208, float %210), !dbg !45
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !46
  %214 = fmul float %213, %209, !dbg !47
  %215 = fadd float %194, %214, !dbg !48
  %216 = fadd float %199, %205, !dbg !54
  %217 = fmul float %209, %209, !dbg !49
  %218 = fmul float %189, %217, !dbg !50
  %219 = fmul float %213, %218, !dbg !51
  %220 = fadd float %216, %219, !dbg !52
  %221 = and i32 %18, 15, !dbg !53
  %222 = icmp eq i32 %17, 0, !dbg !53
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !53
  %224 = bitcast float %215 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 %222) #5, !dbg !53
  %225 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %221, !dbg !53
  %226 = bitcast float %220 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 %222) #5, !dbg !53
  %227 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %221, !dbg !53
  %228 = bitcast float %210 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 %222) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %229 = icmp slt i32 %16, 16, !dbg !53
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %16, !dbg !53
  %231 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %229) #5, !dbg !53
  %232 = bitcast i32 %231 to float, !dbg !53
  %233 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %16, !dbg !53
  %234 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %233, i1 %229) #5, !dbg !53
  %235 = bitcast i32 %234 to float, !dbg !53
  %236 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %16, !dbg !53
  %237 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %236, i1 %229) #5, !dbg !53
  %238 = bitcast i32 %237 to float, !dbg !53
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !53
  %240 = bitcast i32 %239 to float, !dbg !53
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !53
  %242 = bitcast i32 %241 to float, !dbg !53
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !53
  %244 = bitcast i32 %243 to float, !dbg !53
  %245 = fsub float %240, %232, !dbg !38
  %246 = fadd float %238, %244, !dbg !43
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !44
  %248 = tail call float @llvm.nvvm.div.full(float %244, float %246), !dbg !45
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !46
  %250 = fmul float %245, %249, !dbg !47
  %251 = fadd float %250, %232, !dbg !48
  %252 = fadd float %235, %242, !dbg !54
  %253 = fmul float %245, %245, !dbg !49
  %254 = fmul float %253, %238, !dbg !50
  %255 = fmul float %254, %249, !dbg !51
  %256 = fadd float %252, %255, !dbg !52
  %257 = bitcast float %251 to i32, !dbg !53
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !53
  %259 = bitcast i32 %258 to float, !dbg !53
  %260 = bitcast float %256 to i32, !dbg !53
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !53
  %262 = bitcast i32 %261 to float, !dbg !53
  %263 = bitcast float %246 to i32, !dbg !53
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !53
  %265 = bitcast i32 %264 to float, !dbg !53
  %266 = fsub float %259, %251, !dbg !38
  %267 = fadd float %246, %265, !dbg !43
  %268 = fcmp oeq float %267, 0.000000e+00, !dbg !44
  %269 = tail call float @llvm.nvvm.div.full(float %265, float %267), !dbg !45
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !46
  %271 = fmul float %266, %270, !dbg !47
  %272 = fadd float %251, %271, !dbg !48
  %273 = fadd float %256, %262, !dbg !54
  %274 = fmul float %266, %266, !dbg !49
  %275 = fmul float %246, %274, !dbg !50
  %276 = fmul float %270, %275, !dbg !51
  %277 = fadd float %273, %276, !dbg !52
  %278 = bitcast float %272 to i32, !dbg !53
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !53
  %280 = bitcast i32 %279 to float, !dbg !53
  %281 = bitcast float %277 to i32, !dbg !53
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !53
  %283 = bitcast i32 %282 to float, !dbg !53
  %284 = bitcast float %267 to i32, !dbg !53
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !53
  %286 = bitcast i32 %285 to float, !dbg !53
  %287 = fsub float %280, %272, !dbg !38
  %288 = fadd float %267, %286, !dbg !43
  %289 = fcmp oeq float %288, 0.000000e+00, !dbg !44
  %290 = tail call float @llvm.nvvm.div.full(float %286, float %288), !dbg !45
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !46
  %292 = fmul float %287, %291, !dbg !47
  %293 = fadd float %272, %292, !dbg !48
  %294 = fadd float %277, %283, !dbg !54
  %295 = fmul float %287, %287, !dbg !49
  %296 = fmul float %267, %295, !dbg !50
  %297 = fmul float %291, %296, !dbg !51
  %298 = fadd float %294, %297, !dbg !52
  %299 = bitcast float %293 to i32, !dbg !53
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !53
  %301 = bitcast i32 %300 to float, !dbg !53
  %302 = bitcast float %298 to i32, !dbg !53
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !53
  %304 = bitcast i32 %303 to float, !dbg !53
  %305 = bitcast float %288 to i32, !dbg !53
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !53
  %307 = bitcast i32 %306 to float, !dbg !53
  %308 = fsub float %301, %293, !dbg !38
  %309 = fadd float %288, %307, !dbg !43
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !44
  %311 = tail call float @llvm.nvvm.div.full(float %307, float %309), !dbg !45
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !46
  %313 = fmul float %308, %312, !dbg !47
  %314 = fadd float %293, %313, !dbg !48
  %315 = fadd float %298, %304, !dbg !54
  %316 = fmul float %308, %308, !dbg !49
  %317 = fmul float %288, %316, !dbg !50
  %318 = fmul float %312, %317, !dbg !51
  %319 = fadd float %315, %318, !dbg !52
  %320 = and i32 %16, 15, !dbg !53
  %321 = icmp eq i32 %320, 0, !dbg !53
  %322 = and i1 %229, %321, !dbg !53
  %323 = bitcast float %314 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %323, i1 %322) #5, !dbg !53
  %324 = bitcast float %319 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %324, i1 %322) #5, !dbg !53
  %325 = bitcast float %309 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %325, i1 %322) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %326 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %327 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !53
  %328 = sext i32 %14 to i64, !dbg !55
  %329 = getelementptr float, ptr addrspace(1) %8, i64 %328, !dbg !55
  %330 = and i32 %16, 511, !dbg !56
  %331 = icmp eq i32 %330, 0, !dbg !56
  %332 = bitcast float %326 to i32, !dbg !56
  %333 = and i1 %15, %331, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %332, ptr addrspace(1) %329, i1 %333) #5, !dbg !56
  %334 = tail call float @llvm.nvvm.div.full(float %327, float 1.152000e+03), !dbg !57
  %335 = fadd float %334, 0x3EB0C6F7A0000000, !dbg !58
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %.not.i = icmp eq i32 %336, 0, !dbg !59
  br i1 %.not.i, label %339, label %337, !dbg !59

337:                                              ; preds = %13
  %338 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %335), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

339:                                              ; preds = %13
  %340 = tail call float @llvm.nvvm.rsqrt.approx.f(float %335), !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %337, %339
  %.0.i = phi float [ %338, %337 ], [ %340, %339 ], !dbg !59
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !59
  %.not.i10 = icmp eq i32 %344, 0, !dbg !59
  br i1 %.not.i10, label %347, label %345, !dbg !59

345:                                              ; preds = %__nv_rsqrtf.exit
  %346 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %335), !dbg !59
  br label %__nv_rsqrtf.exit12, !dbg !59

347:                                              ; preds = %__nv_rsqrtf.exit
  %348 = tail call float @llvm.nvvm.rsqrt.approx.f(float %335), !dbg !59
  br label %__nv_rsqrtf.exit12, !dbg !59

__nv_rsqrtf.exit12:                               ; preds = %345, %347
  %.0.i11 = phi float [ %346, %345 ], [ %348, %347 ], !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !61
  %350 = bitcast float %.0.i to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %349, i1 %333) #5, !dbg !62
  %351 = getelementptr bfloat, ptr addrspace(1) %5, i64 %35, !dbg !63
  %352 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %351, i1 %27) #5, !dbg !64
  %353 = extractvalue { i32, i32 } %352, 0, !dbg !64
  %354 = bitcast i32 %353 to <2 x bfloat>, !dbg !64
  %355 = extractvalue { i32, i32 } %352, 1, !dbg !64
  %356 = bitcast i32 %355 to <2 x bfloat>, !dbg !64
  %357 = extractelement <2 x bfloat> %354, i64 0, !dbg !64
  %358 = extractelement <2 x bfloat> %354, i64 1, !dbg !64
  %359 = extractelement <2 x bfloat> %356, i64 0, !dbg !64
  %360 = extractelement <2 x bfloat> %356, i64 1, !dbg !64
  %361 = fpext bfloat %357 to float, !dbg !65
  %362 = fpext bfloat %358 to float, !dbg !65
  %363 = fpext bfloat %359 to float, !dbg !65
  %364 = fpext bfloat %360 to float, !dbg !65
  %365 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %27) #5, !dbg !66
  %366 = extractvalue { i32, i32 } %365, 0, !dbg !66
  %367 = bitcast i32 %366 to <2 x bfloat>, !dbg !66
  %368 = extractvalue { i32, i32 } %365, 1, !dbg !66
  %369 = bitcast i32 %368 to <2 x bfloat>, !dbg !66
  %370 = extractelement <2 x bfloat> %367, i64 0, !dbg !66
  %371 = extractelement <2 x bfloat> %367, i64 1, !dbg !66
  %372 = extractelement <2 x bfloat> %369, i64 0, !dbg !66
  %373 = extractelement <2 x bfloat> %369, i64 1, !dbg !66
  %374 = fpext bfloat %370 to float, !dbg !67
  %375 = fpext bfloat %371 to float, !dbg !67
  %376 = fpext bfloat %372 to float, !dbg !67
  %377 = fpext bfloat %373 to float, !dbg !67
  %378 = getelementptr bfloat, ptr addrspace(1) %6, i64 %35, !dbg !68
  %379 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %378, i1 %27) #5, !dbg !69
  %380 = extractvalue { i32, i32 } %379, 0, !dbg !69
  %381 = bitcast i32 %380 to <2 x bfloat>, !dbg !69
  %382 = extractvalue { i32, i32 } %379, 1, !dbg !69
  %383 = bitcast i32 %382 to <2 x bfloat>, !dbg !69
  %384 = extractelement <2 x bfloat> %381, i64 0, !dbg !69
  %385 = extractelement <2 x bfloat> %381, i64 1, !dbg !69
  %386 = extractelement <2 x bfloat> %383, i64 0, !dbg !69
  %387 = extractelement <2 x bfloat> %383, i64 1, !dbg !69
  %388 = fpext bfloat %384 to float, !dbg !70
  %389 = fpext bfloat %385 to float, !dbg !70
  %390 = fpext bfloat %386 to float, !dbg !70
  %391 = fpext bfloat %387 to float, !dbg !70
  %392 = fadd float %361, 1.000000e+00, !dbg !71
  %393 = fadd float %362, 1.000000e+00, !dbg !71
  %394 = fadd float %363, 1.000000e+00, !dbg !71
  %395 = fadd float %364, 1.000000e+00, !dbg !71
  %396 = fsub float %374, %326, !dbg !72
  %397 = fsub float %375, %326, !dbg !72
  %398 = fsub float %376, %326, !dbg !72
  %399 = fsub float %377, %326, !dbg !72
  %400 = fmul float %.0.i11, %396, !dbg !73
  %401 = fmul float %.0.i11, %397, !dbg !73
  %402 = fmul float %.0.i11, %398, !dbg !73
  %403 = fmul float %.0.i11, %399, !dbg !73
  %404 = fmul float %392, %400, !dbg !74
  %405 = fmul float %393, %401, !dbg !74
  %406 = fmul float %394, %402, !dbg !74
  %407 = fmul float %395, %403, !dbg !74
  %408 = fadd float %404, %388, !dbg !75
  %409 = fadd float %405, %389, !dbg !75
  %410 = fadd float %406, %390, !dbg !75
  %411 = fadd float %407, %391, !dbg !75
  %412 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !76
  %413 = bitcast float %408 to i32, !dbg !77
  %414 = bitcast float %409 to i32, !dbg !77
  %415 = bitcast float %410 to i32, !dbg !77
  %416 = bitcast float %411 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %413, i32 %414, i32 %415, i32 %416, ptr addrspace(1) %412, i1 %27) #5, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ezwf6fa5k2ibk6grdehs2ods5rbs4pzzoi2dcxkotgvyvycby7.py", directory: "results/my_experiment/torchinductor_cache_0/7e")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_native_layer_norm_3, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_native_layer_norm_3", linkageName: "triton_red_fused__to_copy_add_mul_native_layer_norm_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 19, scope: !6)
!13 = !DILocation(line: 35, column: 29, scope: !6)
!14 = !DILocation(line: 39, column: 46, scope: !6)
!15 = !DILocation(line: 39, column: 41, scope: !6)
!16 = !DILocation(line: 39, column: 34, scope: !6)
!17 = !DILocation(line: 39, column: 59, scope: !6)
!18 = !DILocation(line: 39, column: 51, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 40, column: 41, scope: !6)
!21 = !DILocation(line: 40, column: 34, scope: !6)
!22 = !DILocation(line: 40, column: 51, scope: !6)
!23 = !DILocation(line: 41, column: 34, scope: !6)
!24 = !DILocation(line: 41, column: 51, scope: !6)
!25 = !DILocation(line: 42, column: 34, scope: !6)
!26 = !DILocation(line: 42, column: 41, scope: !6)
!27 = !DILocation(line: 53, column: 66, scope: !6)
!28 = !DILocation(line: 54, column: 29, scope: !6)
!29 = !DILocation(line: 39, column: 113, scope: !6)
!30 = !DILocation(line: 40, column: 112, scope: !6)
!31 = !DILocation(line: 41, column: 113, scope: !6)
!32 = !DILocation(line: 42, column: 94, scope: !6)
!33 = !DILocation(line: 43, column: 22, scope: !6)
!34 = !DILocation(line: 44, column: 22, scope: !6)
!35 = !DILocation(line: 45, column: 22, scope: !6)
!36 = !DILocation(line: 51, column: 62, scope: !6)
!37 = !DILocation(line: 54, column: 52, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = distinct !DILexicalBlockFile(scope: !6, file: !40, discriminator: 0)
!42 = !DILocation(line: 55, column: 82, scope: !6)
!43 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !42)
!44 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !42)
!45 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !42)
!46 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !42)
!47 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !42)
!48 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !42)
!49 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !42)
!50 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !42)
!51 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !42)
!52 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !42)
!53 = !DILocation(line: 229, column: 46, scope: !41, inlinedAt: !42)
!54 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !42)
!55 = !DILocation(line: 59, column: 25, scope: !6)
!56 = !DILocation(line: 59, column: 36, scope: !6)
!57 = !DILocation(line: 61, column: 21, scope: !6)
!58 = !DILocation(line: 63, column: 20, scope: !6)
!59 = !DILocation(line: 64, column: 28, scope: !6)
!60 = !DILocation(line: 65, column: 4, scope: !6)
!61 = !DILocation(line: 66, column: 28, scope: !6)
!62 = !DILocation(line: 66, column: 40, scope: !6)
!63 = !DILocation(line: 73, column: 35, scope: !6)
!64 = !DILocation(line: 73, column: 52, scope: !6)
!65 = !DILocation(line: 73, column: 113, scope: !6)
!66 = !DILocation(line: 74, column: 53, scope: !6)
!67 = !DILocation(line: 74, column: 115, scope: !6)
!68 = !DILocation(line: 75, column: 35, scope: !6)
!69 = !DILocation(line: 75, column: 52, scope: !6)
!70 = !DILocation(line: 75, column: 113, scope: !6)
!71 = !DILocation(line: 77, column: 24, scope: !6)
!72 = !DILocation(line: 80, column: 24, scope: !6)
!73 = !DILocation(line: 81, column: 24, scope: !6)
!74 = !DILocation(line: 82, column: 24, scope: !6)
!75 = !DILocation(line: 84, column: 24, scope: !6)
!76 = !DILocation(line: 85, column: 29, scope: !6)
!77 = !DILocation(line: 85, column: 53, scope: !6)
!78 = !DILocation(line: 67, column: 4, scope: !6)
