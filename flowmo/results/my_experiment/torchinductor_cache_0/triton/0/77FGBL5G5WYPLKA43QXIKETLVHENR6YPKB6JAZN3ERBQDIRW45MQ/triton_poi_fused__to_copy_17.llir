; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused__to_copy_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 10, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 3, !dbg !11
  %12 = and i32 %11, 1016, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = or disjoint i32 %13, 1, !dbg !12
  %15 = or disjoint i32 %13, 2, !dbg !12
  %16 = or disjoint i32 %13, 3, !dbg !12
  %17 = or disjoint i32 %13, 4, !dbg !12
  %18 = or disjoint i32 %13, 5, !dbg !12
  %19 = or disjoint i32 %13, 6, !dbg !12
  %20 = or disjoint i32 %13, 7, !dbg !12
  %21 = sdiv i32 %13, 3342336, !dbg !13
  %22 = srem i32 %13, 278528, !dbg !14
  %23 = srem i32 %14, 278528, !dbg !14
  %24 = srem i32 %15, 278528, !dbg !14
  %25 = srem i32 %16, 278528, !dbg !14
  %26 = srem i32 %17, 278528, !dbg !14
  %27 = srem i32 %18, 278528, !dbg !14
  %28 = srem i32 %19, 278528, !dbg !14
  %29 = srem i32 %20, 278528, !dbg !14
  %30 = sdiv i32 %13, 64, !dbg !15
  %31 = mul i32 %30, 64, !dbg !16
  %.decomposed = sub i32 %13, %31, !dbg !16
  %32 = srem i32 %14, 64, !dbg !16
  %33 = srem i32 %15, 64, !dbg !16
  %34 = srem i32 %16, 64, !dbg !16
  %35 = srem i32 %17, 64, !dbg !16
  %36 = srem i32 %18, 64, !dbg !16
  %37 = srem i32 %19, 64, !dbg !16
  %38 = srem i32 %20, 64, !dbg !16
  %39 = shl nsw i32 %22, 1, !dbg !17
  %40 = shl nsw i32 %23, 1, !dbg !17
  %41 = shl nsw i32 %24, 1, !dbg !17
  %42 = shl nsw i32 %25, 1, !dbg !17
  %43 = shl nsw i32 %26, 1, !dbg !17
  %44 = shl nsw i32 %27, 1, !dbg !17
  %45 = shl nsw i32 %28, 1, !dbg !17
  %46 = shl nsw i32 %29, 1, !dbg !17
  %47 = mul nsw i32 %21, 557056, !dbg !18
  %48 = add nsw i32 %39, %47, !dbg !19
  %49 = add nsw i32 %40, %47, !dbg !19
  %50 = add nsw i32 %41, %47, !dbg !19
  %51 = add nsw i32 %42, %47, !dbg !19
  %52 = add nsw i32 %43, %47, !dbg !19
  %53 = add nsw i32 %44, %47, !dbg !19
  %54 = add nsw i32 %45, %47, !dbg !19
  %55 = add nsw i32 %46, %47, !dbg !19
  %56 = sext i32 %48 to i64, !dbg !20
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !20
  %58 = sext i32 %49 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = sext i32 %50 to i64, !dbg !20
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !20
  %62 = sext i32 %51 to i64, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !20
  %64 = sext i32 %52 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !20
  %66 = sext i32 %53 to i64, !dbg !20
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !20
  %68 = sext i32 %54 to i64, !dbg !20
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !20
  %70 = sext i32 %55 to i64, !dbg !20
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %57) #1, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %59) #1, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %61) #1, !dbg !21
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %63) #1, !dbg !21
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %65) #1, !dbg !21
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #1, !dbg !21
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %69) #1, !dbg !21
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %71) #1, !dbg !21
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !22
  %80 = ashr exact i8 %.lhs.trunc, 1, !dbg !22
  %.sext = sext i8 %80 to i32, !dbg !22
  %.lhs.trunc1 = trunc nsw i32 %32 to i8, !dbg !22
  %81 = sdiv i8 %.lhs.trunc1, 2, !dbg !22
  %.sext2 = sext i8 %81 to i32, !dbg !22
  %.lhs.trunc3 = trunc nsw i32 %33 to i8, !dbg !22
  %82 = ashr exact i8 %.lhs.trunc3, 1, !dbg !22
  %.sext4 = sext i8 %82 to i32, !dbg !22
  %.lhs.trunc5 = trunc nsw i32 %34 to i8, !dbg !22
  %83 = sdiv i8 %.lhs.trunc5, 2, !dbg !22
  %.sext6 = sext i8 %83 to i32, !dbg !22
  %.lhs.trunc7 = trunc nsw i32 %35 to i8, !dbg !22
  %84 = ashr exact i8 %.lhs.trunc7, 1, !dbg !22
  %.sext8 = sext i8 %84 to i32, !dbg !22
  %.lhs.trunc9 = trunc nsw i32 %36 to i8, !dbg !22
  %85 = sdiv i8 %.lhs.trunc9, 2, !dbg !22
  %.sext10 = sext i8 %85 to i32, !dbg !22
  %.lhs.trunc11 = trunc nsw i32 %37 to i8, !dbg !22
  %86 = ashr exact i8 %.lhs.trunc11, 1, !dbg !22
  %.sext12 = sext i8 %86 to i32, !dbg !22
  %.lhs.trunc13 = trunc nsw i32 %38 to i8, !dbg !22
  %87 = sdiv i8 %.lhs.trunc13, 2, !dbg !22
  %.sext14 = sext i8 %87 to i32, !dbg !22
  %88 = shl nsw i32 %.sext, 1, !dbg !23
  %89 = shl nsw i32 %.sext2, 1, !dbg !23
  %90 = shl nsw i32 %.sext4, 1, !dbg !23
  %91 = shl nsw i32 %.sext6, 1, !dbg !23
  %92 = shl nsw i32 %.sext8, 1, !dbg !23
  %93 = shl nsw i32 %.sext10, 1, !dbg !23
  %94 = shl nsw i32 %.sext12, 1, !dbg !23
  %95 = shl nsw i32 %.sext14, 1, !dbg !23
  %96 = shl nsw i32 %30, 6, !dbg !24
  %97 = add i32 %88, %96, !dbg !25
  %98 = add i32 %89, %96, !dbg !25
  %99 = add i32 %90, %96, !dbg !25
  %100 = add i32 %91, %96, !dbg !25
  %101 = add i32 %92, %96, !dbg !25
  %102 = add i32 %93, %96, !dbg !25
  %103 = add i32 %94, %96, !dbg !25
  %104 = add i32 %95, %96, !dbg !25
  %105 = sext i32 %97 to i64, !dbg !26
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !26
  %107 = sext i32 %98 to i64, !dbg !26
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !26
  %109 = sext i32 %99 to i64, !dbg !26
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !26
  %111 = sext i32 %100 to i64, !dbg !26
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !26
  %113 = sext i32 %101 to i64, !dbg !26
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !26
  %115 = sext i32 %102 to i64, !dbg !26
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !26
  %117 = sext i32 %103 to i64, !dbg !26
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !26
  %119 = sext i32 %104 to i64, !dbg !26
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %106) #1, !dbg !27
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %108) #1, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %110) #1, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %112) #1, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %114) #1, !dbg !27
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %116) #1, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %118) #1, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %120) #1, !dbg !27
  %129 = or disjoint i32 %39, 1, !dbg !28
  %130 = add nsw i32 %129, %47, !dbg !29
  %131 = or disjoint i32 %47, 1, !dbg !28
  %132 = add i32 %131, %40, !dbg !29
  %133 = add i32 %131, %41, !dbg !29
  %134 = add i32 %131, %42, !dbg !29
  %135 = add i32 %131, %43, !dbg !29
  %136 = add i32 %131, %44, !dbg !29
  %137 = add i32 %131, %45, !dbg !29
  %138 = add i32 %131, %46, !dbg !29
  %139 = sext i32 %130 to i64, !dbg !30
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !30
  %141 = sext i32 %132 to i64, !dbg !30
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !30
  %143 = sext i32 %133 to i64, !dbg !30
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !30
  %145 = sext i32 %134 to i64, !dbg !30
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !30
  %147 = sext i32 %135 to i64, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !30
  %149 = sext i32 %136 to i64, !dbg !30
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !30
  %151 = sext i32 %137 to i64, !dbg !30
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !30
  %153 = sext i32 %138 to i64, !dbg !30
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !30
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %140) #1, !dbg !31
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %142) #1, !dbg !31
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %144) #1, !dbg !31
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %146) #1, !dbg !31
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %148) #1, !dbg !31
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %150) #1, !dbg !31
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %152) #1, !dbg !31
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %154) #1, !dbg !31
  %163 = or disjoint i32 %96, 1, !dbg !32
  %164 = add i32 %163, %88, !dbg !33
  %165 = add i32 %163, %89, !dbg !33
  %166 = add i32 %163, %90, !dbg !33
  %167 = add i32 %163, %91, !dbg !33
  %168 = add i32 %163, %92, !dbg !33
  %169 = add i32 %163, %93, !dbg !33
  %170 = add i32 %163, %94, !dbg !33
  %171 = add i32 %163, %95, !dbg !33
  %172 = sext i32 %164 to i64, !dbg !34
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !34
  %174 = sext i32 %165 to i64, !dbg !34
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !34
  %176 = sext i32 %166 to i64, !dbg !34
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !34
  %178 = sext i32 %167 to i64, !dbg !34
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !34
  %180 = sext i32 %168 to i64, !dbg !34
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !34
  %182 = sext i32 %169 to i64, !dbg !34
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !34
  %184 = sext i32 %170 to i64, !dbg !34
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !34
  %186 = sext i32 %171 to i64, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !34
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %173) #1, !dbg !35
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %175) #1, !dbg !35
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %177) #1, !dbg !35
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %179) #1, !dbg !35
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %181) #1, !dbg !35
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %183) #1, !dbg !35
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %185) #1, !dbg !35
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %187) #1, !dbg !35
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !36
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !36
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !36
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !36
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !36
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !36
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !36
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !36
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %196) #1, !dbg !37
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %197) #1, !dbg !37
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %198) #1, !dbg !37
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %199) #1, !dbg !37
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %200) #1, !dbg !37
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %201) #1, !dbg !37
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %202) #1, !dbg !37
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %203) #1, !dbg !37
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !38
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !38
  %214 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !38
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !38
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !38
  %217 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !38
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !38
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !38
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %212) #1, !dbg !39
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %213) #1, !dbg !39
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %214) #1, !dbg !39
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %215) #1, !dbg !39
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %216) #1, !dbg !39
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %217) #1, !dbg !39
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %218) #1, !dbg !39
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %219) #1, !dbg !39
  %228 = sext i32 %13 to i64, !dbg !40
  %229 = getelementptr bfloat, ptr addrspace(1) %3, i64 %228, !dbg !40
  %230 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !27
  %231 = insertelement <2 x i32> %230, i32 %73, i64 1, !dbg !27
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !27
  %233 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !21
  %234 = insertelement <2 x i32> %233, i32 %122, i64 1, !dbg !21
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !21
  %236 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !35
  %237 = insertelement <2 x i32> %236, i32 %156, i64 1, !dbg !35
  %238 = bitcast <2 x i32> %237 to <2 x float>, !dbg !35
  %239 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !31
  %240 = insertelement <2 x i32> %239, i32 %189, i64 1, !dbg !31
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !31
  %242 = fmul <2 x float> %232, %235, !dbg !41
  %243 = fmul <2 x float> %238, %241, !dbg !42
  %244 = fadd <2 x float> %242, %243, !dbg !43
  %245 = fptrunc <2 x float> %244 to <2 x bfloat>, !dbg !44
  %246 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !27
  %247 = insertelement <2 x i32> %246, i32 %75, i64 1, !dbg !27
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !27
  %249 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !21
  %250 = insertelement <2 x i32> %249, i32 %124, i64 1, !dbg !21
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !21
  %252 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !35
  %253 = insertelement <2 x i32> %252, i32 %158, i64 1, !dbg !35
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !35
  %255 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !31
  %256 = insertelement <2 x i32> %255, i32 %191, i64 1, !dbg !31
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !31
  %258 = fmul <2 x float> %248, %251, !dbg !41
  %259 = fmul <2 x float> %254, %257, !dbg !42
  %260 = fadd <2 x float> %258, %259, !dbg !43
  %261 = fptrunc <2 x float> %260 to <2 x bfloat>, !dbg !44
  %262 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !27
  %263 = insertelement <2 x i32> %262, i32 %77, i64 1, !dbg !27
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !27
  %265 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !21
  %266 = insertelement <2 x i32> %265, i32 %126, i64 1, !dbg !21
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !21
  %268 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !35
  %269 = insertelement <2 x i32> %268, i32 %160, i64 1, !dbg !35
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !35
  %271 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !31
  %272 = insertelement <2 x i32> %271, i32 %193, i64 1, !dbg !31
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !31
  %274 = fmul <2 x float> %264, %267, !dbg !41
  %275 = fmul <2 x float> %270, %273, !dbg !42
  %276 = fadd <2 x float> %274, %275, !dbg !43
  %277 = fptrunc <2 x float> %276 to <2 x bfloat>, !dbg !44
  %278 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !27
  %279 = insertelement <2 x i32> %278, i32 %79, i64 1, !dbg !27
  %280 = bitcast <2 x i32> %279 to <2 x float>, !dbg !27
  %281 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !21
  %282 = insertelement <2 x i32> %281, i32 %128, i64 1, !dbg !21
  %283 = bitcast <2 x i32> %282 to <2 x float>, !dbg !21
  %284 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !35
  %285 = insertelement <2 x i32> %284, i32 %162, i64 1, !dbg !35
  %286 = bitcast <2 x i32> %285 to <2 x float>, !dbg !35
  %287 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !31
  %288 = insertelement <2 x i32> %287, i32 %195, i64 1, !dbg !31
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !31
  %290 = fmul <2 x float> %280, %283, !dbg !41
  %291 = fmul <2 x float> %286, %289, !dbg !42
  %292 = fadd <2 x float> %290, %291, !dbg !43
  %293 = fptrunc <2 x float> %292 to <2 x bfloat>, !dbg !44
  %294 = bitcast <2 x bfloat> %245 to i32, !dbg !44
  %295 = bitcast <2 x bfloat> %261 to i32, !dbg !44
  %296 = bitcast <2 x bfloat> %277 to i32, !dbg !44
  %297 = bitcast <2 x bfloat> %293 to i32, !dbg !44
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %294, i32 %295, i32 %296, i32 %297, ptr addrspace(1) %229) #1, !dbg !44
  %298 = getelementptr bfloat, ptr addrspace(1) %4, i64 %228, !dbg !45
  %299 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !37
  %300 = insertelement <2 x i32> %299, i32 %205, i64 1, !dbg !37
  %301 = bitcast <2 x i32> %300 to <2 x float>, !dbg !37
  %302 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !39
  %303 = insertelement <2 x i32> %302, i32 %221, i64 1, !dbg !39
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !39
  %305 = insertelement <2 x i32> %233, i32 %73, i64 1, !dbg !21
  %306 = bitcast <2 x i32> %305 to <2 x float>, !dbg !21
  %307 = insertelement <2 x i32> %239, i32 %156, i64 1, !dbg !31
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !31
  %309 = fmul <2 x float> %306, %301, !dbg !46
  %310 = fmul <2 x float> %308, %304, !dbg !47
  %311 = fadd <2 x float> %309, %310, !dbg !48
  %312 = fptrunc <2 x float> %311 to <2 x bfloat>, !dbg !49
  %313 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !37
  %314 = insertelement <2 x i32> %313, i32 %207, i64 1, !dbg !37
  %315 = bitcast <2 x i32> %314 to <2 x float>, !dbg !37
  %316 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !39
  %317 = insertelement <2 x i32> %316, i32 %223, i64 1, !dbg !39
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !39
  %319 = insertelement <2 x i32> %249, i32 %75, i64 1, !dbg !21
  %320 = bitcast <2 x i32> %319 to <2 x float>, !dbg !21
  %321 = insertelement <2 x i32> %255, i32 %158, i64 1, !dbg !31
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !31
  %323 = fmul <2 x float> %320, %315, !dbg !46
  %324 = fmul <2 x float> %322, %318, !dbg !47
  %325 = fadd <2 x float> %323, %324, !dbg !48
  %326 = fptrunc <2 x float> %325 to <2 x bfloat>, !dbg !49
  %327 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !37
  %328 = insertelement <2 x i32> %327, i32 %209, i64 1, !dbg !37
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !37
  %330 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !39
  %331 = insertelement <2 x i32> %330, i32 %225, i64 1, !dbg !39
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !39
  %333 = insertelement <2 x i32> %265, i32 %77, i64 1, !dbg !21
  %334 = bitcast <2 x i32> %333 to <2 x float>, !dbg !21
  %335 = insertelement <2 x i32> %271, i32 %160, i64 1, !dbg !31
  %336 = bitcast <2 x i32> %335 to <2 x float>, !dbg !31
  %337 = fmul <2 x float> %334, %329, !dbg !46
  %338 = fmul <2 x float> %336, %332, !dbg !47
  %339 = fadd <2 x float> %337, %338, !dbg !48
  %340 = fptrunc <2 x float> %339 to <2 x bfloat>, !dbg !49
  %341 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !37
  %342 = insertelement <2 x i32> %341, i32 %211, i64 1, !dbg !37
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !37
  %344 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !39
  %345 = insertelement <2 x i32> %344, i32 %227, i64 1, !dbg !39
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !39
  %347 = insertelement <2 x i32> %281, i32 %79, i64 1, !dbg !21
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !21
  %349 = insertelement <2 x i32> %287, i32 %162, i64 1, !dbg !31
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !31
  %351 = fmul <2 x float> %348, %343, !dbg !46
  %352 = fmul <2 x float> %350, %346, !dbg !47
  %353 = fadd <2 x float> %351, %352, !dbg !48
  %354 = fptrunc <2 x float> %353 to <2 x bfloat>, !dbg !49
  %355 = bitcast <2 x bfloat> %312 to i32, !dbg !49
  %356 = bitcast <2 x bfloat> %326 to i32, !dbg !49
  %357 = bitcast <2 x bfloat> %340 to i32, !dbg !49
  %358 = bitcast <2 x bfloat> %354 to i32, !dbg !49
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %355, i32 %356, i32 %357, i32 %358, ptr addrspace(1) %298) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cixrnrmvd4huenzlqm7xadk7ndpsorbo5vjx6syqiziy2yxkymxy.py", directory: "results/my_experiment/torchinductor_cache_0/ix")
!4 = !{ptr @triton_poi_fused__to_copy_17, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_17", linkageName: "triton_poi_fused__to_copy_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 19, scope: !6)
!14 = !DILocation(line: 24, column: 19, scope: !6)
!15 = !DILocation(line: 26, column: 19, scope: !6)
!16 = !DILocation(line: 25, column: 19, scope: !6)
!17 = !DILocation(line: 28, column: 32, scope: !6)
!18 = !DILocation(line: 28, column: 44, scope: !6)
!19 = !DILocation(line: 28, column: 37, scope: !6)
!20 = !DILocation(line: 28, column: 30, scope: !6)
!21 = !DILocation(line: 28, column: 49, scope: !6)
!22 = !DILocation(line: 29, column: 39, scope: !6)
!23 = !DILocation(line: 29, column: 33, scope: !6)
!24 = !DILocation(line: 29, column: 47, scope: !6)
!25 = !DILocation(line: 29, column: 44, scope: !6)
!26 = !DILocation(line: 29, column: 30, scope: !6)
!27 = !DILocation(line: 29, column: 52, scope: !6)
!28 = !DILocation(line: 30, column: 34, scope: !6)
!29 = !DILocation(line: 30, column: 41, scope: !6)
!30 = !DILocation(line: 30, column: 30, scope: !6)
!31 = !DILocation(line: 30, column: 53, scope: !6)
!32 = !DILocation(line: 31, column: 34, scope: !6)
!33 = !DILocation(line: 31, column: 48, scope: !6)
!34 = !DILocation(line: 31, column: 30, scope: !6)
!35 = !DILocation(line: 31, column: 56, scope: !6)
!36 = !DILocation(line: 32, column: 30, scope: !6)
!37 = !DILocation(line: 32, column: 52, scope: !6)
!38 = !DILocation(line: 33, column: 31, scope: !6)
!39 = !DILocation(line: 33, column: 57, scope: !6)
!40 = !DILocation(line: 42, column: 25, scope: !6)
!41 = !DILocation(line: 34, column: 18, scope: !6)
!42 = !DILocation(line: 35, column: 18, scope: !6)
!43 = !DILocation(line: 36, column: 18, scope: !6)
!44 = !DILocation(line: 42, column: 36, scope: !6)
!45 = !DILocation(line: 43, column: 25, scope: !6)
!46 = !DILocation(line: 38, column: 18, scope: !6)
!47 = !DILocation(line: 39, column: 19, scope: !6)
!48 = !DILocation(line: 40, column: 19, scope: !6)
!49 = !DILocation(line: 43, column: 37, scope: !6)
!50 = !DILocation(line: 43, column: 4, scope: !6)
