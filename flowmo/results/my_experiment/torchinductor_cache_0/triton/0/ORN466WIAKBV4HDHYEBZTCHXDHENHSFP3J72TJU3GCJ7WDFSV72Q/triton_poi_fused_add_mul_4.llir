; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_add_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 10, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = shl i32 %8, 3, !dbg !11
  %10 = and i32 %9, 1016, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = srem i32 %11, 768, !dbg !13
  %14 = srem i32 %12, 768, !dbg !13
  %15 = sext i32 %11 to i64, !dbg !14
  %16 = getelementptr bfloat, ptr addrspace(1) %1, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %16) #1, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !15
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %15, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %26) #1, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !17
  %36 = sext i32 %13 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !18
  %38 = sext i32 %14 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !18
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %37) #1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %39) #1, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !19
  %50 = fpext <2 x bfloat> %19 to <2 x float>, !dbg !20
  %51 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !21
  %52 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !19
  %53 = insertelement <2 x i32> %52, i32 %42, i64 1, !dbg !19
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !19
  %55 = fadd <2 x float> %54, %51, !dbg !22
  %56 = fadd <2 x float> %55, %50, !dbg !23
  %57 = fptrunc <2 x float> %56 to <2 x bfloat>, !dbg !24
  %58 = fpext <2 x bfloat> %21 to <2 x float>, !dbg !20
  %59 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !21
  %60 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !19
  %61 = insertelement <2 x i32> %60, i32 %44, i64 1, !dbg !19
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !19
  %63 = fadd <2 x float> %62, %59, !dbg !22
  %64 = fadd <2 x float> %63, %58, !dbg !23
  %65 = fptrunc <2 x float> %64 to <2 x bfloat>, !dbg !24
  %66 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !20
  %67 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !21
  %68 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !19
  %69 = insertelement <2 x i32> %68, i32 %47, i64 1, !dbg !19
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !19
  %71 = fadd <2 x float> %67, %70, !dbg !22
  %72 = fadd <2 x float> %71, %66, !dbg !23
  %73 = fptrunc <2 x float> %72 to <2 x bfloat>, !dbg !24
  %74 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !20
  %75 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !21
  %76 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !19
  %77 = insertelement <2 x i32> %76, i32 %49, i64 1, !dbg !19
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !19
  %79 = fadd <2 x float> %75, %78, !dbg !22
  %80 = fadd <2 x float> %79, %74, !dbg !23
  %81 = fptrunc <2 x float> %80 to <2 x bfloat>, !dbg !24
  %82 = bitcast <2 x bfloat> %57 to i32, !dbg !24
  %83 = bitcast <2 x bfloat> %65 to i32, !dbg !24
  %84 = bitcast <2 x bfloat> %73 to i32, !dbg !24
  %85 = bitcast <2 x bfloat> %81 to i32, !dbg !24
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %82, i32 %83, i32 %84, i32 %85, ptr addrspace(1) %26) #1, !dbg !24
  ret void, !dbg !25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvqrb67vcjwz25y7cpstkmazzlsrmkjpy6fssxud3ux6gaeyjymc.py", directory: "results/my_experiment/torchinductor_cache_0/vq")
!4 = !{ptr @triton_poi_fused_add_mul_4, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_4", linkageName: "triton_poi_fused_add_mul_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 19, scope: !6)
!14 = !DILocation(line: 25, column: 30, scope: !6)
!15 = !DILocation(line: 25, column: 35, scope: !6)
!16 = !DILocation(line: 26, column: 34, scope: !6)
!17 = !DILocation(line: 26, column: 39, scope: !6)
!18 = !DILocation(line: 27, column: 30, scope: !6)
!19 = !DILocation(line: 27, column: 35, scope: !6)
!20 = !DILocation(line: 25, column: 44, scope: !6)
!21 = !DILocation(line: 26, column: 48, scope: !6)
!22 = !DILocation(line: 29, column: 18, scope: !6)
!23 = !DILocation(line: 32, column: 18, scope: !6)
!24 = !DILocation(line: 33, column: 39, scope: !6)
!25 = !DILocation(line: 33, column: 4, scope: !6)
