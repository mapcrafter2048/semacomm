; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_clone_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %8 = icmp slt i32 %7, 6, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %10 = shl i32 %9, 10, !dbg !12
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %12 = shl i32 %11, 3, !dbg !13
  %13 = and i32 %12, 1016, !dbg !13
  %14 = or disjoint i32 %13, %10, !dbg !14
  %15 = or disjoint i32 %10, 1, !dbg !14
  %16 = or disjoint i32 %10, 2, !dbg !14
  %17 = or disjoint i32 %10, 3, !dbg !14
  %18 = srem i32 %15, 4, !dbg !15
  %19 = srem i32 %17, 4, !dbg !15
  %20 = ashr exact i32 %14, 2, !dbg !16
  %21 = or disjoint i32 %20, 1, !dbg !16
  %22 = srem i32 %21, 64, !dbg !17
  %23 = sdiv i32 %14, 256, !dbg !18
  %24 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %25 = insertelement <2 x i32> %24, i32 %7, i64 1, !dbg !19
  %26 = srem <2 x i32> %25, <i32 4, i32 3>, !dbg !19
  %27 = mul nsw i32 %18, 3, !dbg !20
  %28 = mul nsw i32 %19, 3, !dbg !20
  %29 = extractelement <2 x i32> %26, i64 0, !dbg !21
  %30 = mul nsw i32 %29, 12, !dbg !21
  %31 = mul nsw i32 %22, 48, !dbg !22
  %32 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !23
  %33 = insertelement <2 x i32> %32, i32 %7, i64 1, !dbg !23
  %34 = sdiv <2 x i32> %33, <i32 1024, i32 3>, !dbg !23
  %35 = mul <2 x i32> %34, <i32 3072, i32 196608>, !dbg !24
  %36 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %37 = insertelement <2 x i32> %36, i32 %16, i64 1, !dbg !17
  %38 = srem <2 x i32> %37, <i32 64, i32 4>, !dbg !17
  %39 = insertelement <2 x i32> %35, i32 %30, i64 1, !dbg !25
  %40 = shufflevector <2 x i32> %35, <2 x i32> %26, <2 x i32> <i32 1, i32 3>, !dbg !25
  %41 = add <2 x i32> %39, %40, !dbg !25
  %42 = extractelement <2 x i32> %41, i64 1, !dbg !26
  %43 = add nsw i32 %42, %27, !dbg !27
  %44 = add nsw i32 %42, %28, !dbg !27
  %45 = mul nsw <2 x i32> %38, <i32 48, i32 3>, !dbg !22
  %46 = add <2 x i32> %41, %45, !dbg !28
  %47 = extractelement <2 x i32> %46, i64 0, !dbg !26
  %48 = add i32 %47, %42, !dbg !26
  %49 = add i32 %47, %43, !dbg !26
  %50 = extractelement <2 x i32> %46, i64 1, !dbg !28
  %51 = add i32 %47, %50, !dbg !26
  %52 = add i32 %47, %44, !dbg !26
  %53 = extractelement <2 x i32> %41, i64 0, !dbg !28
  %54 = add i32 %53, %31, !dbg !28
  %55 = add i32 %54, %42, !dbg !26
  %56 = add i32 %53, %43, !dbg !28
  %57 = add i32 %56, %31, !dbg !26
  %58 = add i32 %53, %50, !dbg !28
  %59 = add i32 %58, %31, !dbg !26
  %60 = add i32 %53, %44, !dbg !28
  %61 = add i32 %60, %31, !dbg !26
  %62 = sext i32 %48 to i64, !dbg !29
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !29
  %64 = sext i32 %49 to i64, !dbg !29
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !29
  %66 = sext i32 %51 to i64, !dbg !29
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !29
  %68 = sext i32 %52 to i64, !dbg !29
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !29
  %70 = sext i32 %55 to i64, !dbg !29
  %71 = getelementptr bfloat, ptr addrspace(1) %0, i64 %70, !dbg !29
  %72 = sext i32 %57 to i64, !dbg !29
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !29
  %74 = sext i32 %59 to i64, !dbg !29
  %75 = getelementptr bfloat, ptr addrspace(1) %0, i64 %74, !dbg !29
  %76 = sext i32 %61 to i64, !dbg !29
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !29
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %63, i1 %8) #1, !dbg !30
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %8) #1, !dbg !30
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %67, i1 %8) #1, !dbg !30
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %69, i1 %8) #1, !dbg !30
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %8) #1, !dbg !30
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %8) #1, !dbg !30
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %75, i1 %8) #1, !dbg !30
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %77, i1 %8) #1, !dbg !30
  %86 = sext i32 %42 to i64, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !31
  %88 = sext i32 %43 to i64, !dbg !31
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !31
  %90 = sext i32 %50 to i64, !dbg !31
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !31
  %92 = sext i32 %44 to i64, !dbg !31
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !31
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %8) #1, !dbg !32
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %8) #1, !dbg !32
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %8) #1, !dbg !32
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %8) #1, !dbg !32
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %8) #1, !dbg !32
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %8) #1, !dbg !32
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %8) #1, !dbg !32
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %8) #1, !dbg !32
  %102 = shl i32 %7, 16, !dbg !33
  %103 = add i32 %14, %102, !dbg !34
  %104 = sext i32 %103 to i64, !dbg !35
  %105 = getelementptr bfloat, ptr addrspace(1) %2, i64 %104, !dbg !35
  %106 = insertelement <2 x i16> poison, i16 %78, i64 0, !dbg !30
  %107 = insertelement <2 x i16> %106, i16 %79, i64 1, !dbg !30
  %108 = bitcast <2 x i16> %107 to <2 x bfloat>, !dbg !30
  %109 = fpext <2 x bfloat> %108 to <2 x float>, !dbg !36
  %110 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !32
  %111 = insertelement <2 x i32> %110, i32 %95, i64 1, !dbg !32
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !32
  %113 = fadd <2 x float> %109, %112, !dbg !37
  %114 = fptrunc <2 x float> %113 to <2 x bfloat>, !dbg !38
  %115 = insertelement <2 x i16> poison, i16 %80, i64 0, !dbg !30
  %116 = insertelement <2 x i16> %115, i16 %81, i64 1, !dbg !30
  %117 = bitcast <2 x i16> %116 to <2 x bfloat>, !dbg !30
  %118 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !36
  %119 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !32
  %120 = insertelement <2 x i32> %119, i32 %97, i64 1, !dbg !32
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !32
  %122 = fadd <2 x float> %118, %121, !dbg !37
  %123 = fptrunc <2 x float> %122 to <2 x bfloat>, !dbg !38
  %124 = insertelement <2 x i16> poison, i16 %82, i64 0, !dbg !30
  %125 = insertelement <2 x i16> %124, i16 %83, i64 1, !dbg !30
  %126 = bitcast <2 x i16> %125 to <2 x bfloat>, !dbg !30
  %127 = fpext <2 x bfloat> %126 to <2 x float>, !dbg !36
  %128 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !32
  %129 = insertelement <2 x i32> %128, i32 %99, i64 1, !dbg !32
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !32
  %131 = fadd <2 x float> %127, %130, !dbg !37
  %132 = fptrunc <2 x float> %131 to <2 x bfloat>, !dbg !38
  %133 = insertelement <2 x i16> poison, i16 %84, i64 0, !dbg !30
  %134 = insertelement <2 x i16> %133, i16 %85, i64 1, !dbg !30
  %135 = bitcast <2 x i16> %134 to <2 x bfloat>, !dbg !30
  %136 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !36
  %137 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !32
  %138 = insertelement <2 x i32> %137, i32 %101, i64 1, !dbg !32
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !32
  %140 = fadd <2 x float> %136, %139, !dbg !37
  %141 = fptrunc <2 x float> %140 to <2 x bfloat>, !dbg !38
  %142 = bitcast <2 x bfloat> %114 to i32, !dbg !38
  %143 = bitcast <2 x bfloat> %123 to i32, !dbg !38
  %144 = bitcast <2 x bfloat> %132 to i32, !dbg !38
  %145 = bitcast <2 x bfloat> %141 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %105, i1 %8) #1, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "copafnfol5e5rf4oh4jgpacrw4kazcsg6d6p2e2fj5ie3j5iukus.py", directory: "results/my_experiment/torchinductor_cache_0/op")
!4 = !{ptr @triton_poi_fused_clone_6, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_clone_6", linkageName: "triton_poi_fused_clone_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 21, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 21, scope: !6)
!11 = !DILocation(line: 24, column: 28, scope: !6)
!12 = !DILocation(line: 24, column: 33, scope: !6)
!13 = !DILocation(line: 25, column: 44, scope: !6)
!14 = !DILocation(line: 25, column: 23, scope: !6)
!15 = !DILocation(line: 27, column: 19, scope: !6)
!16 = !DILocation(line: 28, column: 21, scope: !6)
!17 = !DILocation(line: 28, column: 26, scope: !6)
!18 = !DILocation(line: 29, column: 21, scope: !6)
!19 = !DILocation(line: 29, column: 28, scope: !6)
!20 = !DILocation(line: 35, column: 37, scope: !6)
!21 = !DILocation(line: 35, column: 45, scope: !6)
!22 = !DILocation(line: 35, column: 53, scope: !6)
!23 = !DILocation(line: 30, column: 19, scope: !6)
!24 = !DILocation(line: 35, column: 63, scope: !6)
!25 = !DILocation(line: 35, column: 50, scope: !6)
!26 = !DILocation(line: 35, column: 68, scope: !6)
!27 = !DILocation(line: 35, column: 42, scope: !6)
!28 = !DILocation(line: 35, column: 58, scope: !6)
!29 = !DILocation(line: 35, column: 30, scope: !6)
!30 = !DILocation(line: 35, column: 80, scope: !6)
!31 = !DILocation(line: 36, column: 30, scope: !6)
!32 = !DILocation(line: 36, column: 50, scope: !6)
!33 = !DILocation(line: 39, column: 36, scope: !6)
!34 = !DILocation(line: 39, column: 30, scope: !6)
!35 = !DILocation(line: 39, column: 25, scope: !6)
!36 = !DILocation(line: 35, column: 120, scope: !6)
!37 = !DILocation(line: 38, column: 18, scope: !6)
!38 = !DILocation(line: 39, column: 47, scope: !6)
!39 = !DILocation(line: 39, column: 4, scope: !6)
