; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 3, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = shl i32 %8, 3, !dbg !13
  %13 = and i32 %12, 56, !dbg !13
  %14 = sdiv i32 %11, 12, !dbg !14
  %15 = mul i32 %11, 96
  %16 = mul i32 %14, 2304
  %17 = add i32 %16, %15
  %18 = add i32 %17, %13, !dbg !15
  %19 = sext i32 %18 to i64, !dbg !16
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !17
  %30 = extractelement <2 x bfloat> %25, i64 0, !dbg !17
  %31 = extractelement <2 x bfloat> %25, i64 1, !dbg !17
  %32 = extractelement <2 x bfloat> %27, i64 0, !dbg !17
  %33 = extractelement <2 x bfloat> %27, i64 1, !dbg !17
  %34 = extractelement <2 x bfloat> %29, i64 0, !dbg !17
  %35 = extractelement <2 x bfloat> %29, i64 1, !dbg !17
  %36 = fpext bfloat %30 to float, !dbg !18
  %37 = fpext bfloat %31 to float, !dbg !18
  %38 = fpext bfloat %32 to float, !dbg !18
  %39 = fpext bfloat %33 to float, !dbg !18
  %40 = fpext bfloat %34 to float, !dbg !18
  %41 = fpext bfloat %35 to float, !dbg !18
  %42 = fmul float %36, %36, !dbg !19
  %43 = fmul float %37, %37, !dbg !19
  %44 = fmul float %38, %38, !dbg !19
  %45 = fmul float %39, %39, !dbg !19
  %46 = fmul float %40, %40, !dbg !19
  %47 = fmul float %41, %41, !dbg !19
  %48 = or disjoint i32 %13, 64, !dbg !20
  %49 = icmp samesign ult i32 %48, 96, !dbg !21
  %50 = add i32 %17, %48, !dbg !15
  %51 = sext i32 %50 to i64, !dbg !16
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !16
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i1 %49) #3, !dbg !17
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !17
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !17
  %56 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !17
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !17
  %58 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !17
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !17
  %60 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !17
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !17
  %62 = extractelement <2 x bfloat> %57, i64 0, !dbg !17
  %63 = extractelement <2 x bfloat> %57, i64 1, !dbg !17
  %64 = extractelement <2 x bfloat> %59, i64 0, !dbg !17
  %65 = extractelement <2 x bfloat> %59, i64 1, !dbg !17
  %66 = extractelement <2 x bfloat> %61, i64 0, !dbg !17
  %67 = extractelement <2 x bfloat> %61, i64 1, !dbg !17
  %68 = fpext bfloat %62 to float, !dbg !18
  %69 = fpext bfloat %63 to float, !dbg !18
  %70 = fpext bfloat %64 to float, !dbg !18
  %71 = fpext bfloat %65 to float, !dbg !18
  %72 = fpext bfloat %66 to float, !dbg !18
  %73 = fpext bfloat %67 to float, !dbg !18
  %74 = fmul float %68, %68, !dbg !19
  %75 = fmul float %69, %69, !dbg !19
  %76 = fmul float %70, %70, !dbg !19
  %77 = fmul float %71, %71, !dbg !19
  %78 = fmul float %72, %72, !dbg !19
  %79 = fmul float %73, %73, !dbg !19
  %80 = fadd float %42, %74, !dbg !22
  %81 = fadd float %43, %75, !dbg !22
  %82 = fadd float %44, %76, !dbg !22
  %83 = fadd float %45, %77, !dbg !22
  %84 = fadd float %46, %78, !dbg !22
  %85 = fadd float %47, %79, !dbg !22
  %86 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !18
  %87 = fmul <2 x float> %86, %86, !dbg !19
  %88 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !18
  %89 = fmul <2 x float> %88, %88, !dbg !19
  %90 = fadd <2 x float> %87, %89, !dbg !22
  %91 = insertelement <2 x i1> poison, i1 %49, i64 0, !dbg !23
  %92 = shufflevector <2 x i1> %91, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !23
  %93 = select <2 x i1> %92, <2 x float> %90, <2 x float> %87, !dbg !23
  %94 = select i1 %49, float %80, float %42, !dbg !23
  %95 = select i1 %49, float %81, float %43, !dbg !23
  %96 = select i1 %49, float %82, float %44, !dbg !23
  %97 = select i1 %49, float %83, float %45, !dbg !23
  %98 = select i1 %49, float %84, float %46, !dbg !23
  %99 = select i1 %49, float %85, float %47, !dbg !23
  %100 = and i32 %8, 63, !dbg !11
  %101 = or disjoint i32 %7, %100, !dbg !12
  %shift = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %102 = fadd <2 x float> %93, %shift, !dbg !24
  %103 = extractelement <2 x float> %102, i64 0, !dbg !24
  %104 = fadd float %94, %103, !dbg !24
  %105 = fadd float %95, %104, !dbg !24
  %106 = fadd float %96, %105, !dbg !24
  %107 = fadd float %97, %106, !dbg !24
  %108 = fadd float %98, %107, !dbg !24
  %109 = fadd float %99, %108, !dbg !24
  %110 = bitcast float %109 to i32, !dbg !29
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = fadd float %109, %112, !dbg !24
  %114 = bitcast float %113 to i32, !dbg !29
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = fadd float %113, %116, !dbg !24
  %118 = bitcast float %117 to i32, !dbg !29
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fadd float %117, %120, !dbg !24
  %122 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %123 = bitcast float %121 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %124 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %100, !dbg !30
  %125 = load i32, ptr addrspace(3) %124, align 4, !dbg !30
  %126 = sext i32 %101 to i64, !dbg !31
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !31
  %128 = and i32 %8, 448, !dbg !32
  %129 = icmp eq i32 %128, 0, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %127, i1 %129) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csx4xk5b2z3osj2theivxgr52hc6r2e274t2hx3mv7akolyy3hpi.py", directory: "results/my_experiment/torchinductor_cache_0/sx")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_3, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_3", linkageName: "triton_red_fused__to_copy_mean_pow_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 38, column: 49, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 59, scope: !6)
!18 = !DILocation(line: 38, column: 113, scope: !6)
!19 = !DILocation(line: 40, column: 22, scope: !6)
!20 = !DILocation(line: 33, column: 31, scope: !6)
!21 = !DILocation(line: 34, column: 29, scope: !6)
!22 = !DILocation(line: 42, column: 23, scope: !6)
!23 = !DILocation(line: 43, column: 40, scope: !6)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 44, column: 25, scope: !6)
!29 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 44, column: 28, scope: !6)
!31 = !DILocation(line: 45, column: 25, scope: !6)
!32 = !DILocation(line: 45, column: 36, scope: !6)
!33 = !DILocation(line: 45, column: 4, scope: !6)
