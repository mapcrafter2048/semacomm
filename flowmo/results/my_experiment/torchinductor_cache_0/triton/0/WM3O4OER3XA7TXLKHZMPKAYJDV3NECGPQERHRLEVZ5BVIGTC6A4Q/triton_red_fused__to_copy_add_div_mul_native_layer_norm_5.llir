; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_native_layer_norm_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %13 = and i32 %12, 31, !dbg !10
  %14 = lshr i32 %12, 5, !dbg !10
  %15 = shl i32 %12, 2, !dbg !10
  %16 = and i32 %15, 2044, !dbg !10
  %17 = icmp samesign ult i32 %16, 1152, !dbg !11
  %18 = mul i32 %11, 1152, !dbg !12
  %19 = add i32 %16, %18, !dbg !13
  %20 = sext i32 %19 to i64, !dbg !14
  %21 = getelementptr bfloat, ptr addrspace(1) %1, i64 %20, !dbg !14
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %21, i1 %17) #5, !dbg !15
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !15
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !15
  %25 = extractvalue { i32, i32 } %22, 1, !dbg !15
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !15
  %27 = extractelement <2 x bfloat> %24, i64 0, !dbg !15
  %28 = extractelement <2 x bfloat> %24, i64 1, !dbg !15
  %29 = extractelement <2 x bfloat> %26, i64 0, !dbg !15
  %30 = extractelement <2 x bfloat> %26, i64 1, !dbg !15
  %31 = fpext bfloat %27 to float, !dbg !16
  %32 = fpext bfloat %28 to float, !dbg !16
  %33 = fpext bfloat %29 to float, !dbg !16
  %34 = fpext bfloat %30 to float, !dbg !16
  %35 = select i1 %17, float %31, float 0.000000e+00, !dbg !17
  %36 = select i1 %17, float %32, float 0.000000e+00, !dbg !17
  %37 = select i1 %17, float %33, float 0.000000e+00, !dbg !17
  %38 = select i1 %17, float %34, float 0.000000e+00, !dbg !17
  %39 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !18
  %40 = fsub float %36, %35, !dbg !19
  %41 = select i1 %17, float 2.000000e+00, float 0.000000e+00, !dbg !24
  %42 = fcmp oeq float %41, 0.000000e+00, !dbg !25
  %43 = tail call float @llvm.nvvm.div.full(float %39, float %41), !dbg !26
  %44 = select i1 %42, float 0.000000e+00, float %43, !dbg !27
  %45 = fmul float %44, %40, !dbg !28
  %46 = fadd float %35, %45, !dbg !29
  %47 = fmul float %40, %40, !dbg !30
  %48 = fmul float %39, %47, !dbg !31
  %49 = fmul float %44, %48, !dbg !32
  %50 = fadd float %49, 0.000000e+00, !dbg !33
  %51 = fsub float %37, %46, !dbg !19
  %52 = select i1 %17, float 3.000000e+00, float 0.000000e+00, !dbg !24
  %53 = fcmp oeq float %52, 0.000000e+00, !dbg !25
  %54 = tail call float @llvm.nvvm.div.full(float %39, float %52), !dbg !26
  %55 = select i1 %53, float 0.000000e+00, float %54, !dbg !27
  %56 = fmul float %55, %51, !dbg !28
  %57 = fadd float %46, %56, !dbg !29
  %58 = fmul float %51, %51, !dbg !30
  %59 = fmul float %41, %58, !dbg !31
  %60 = fmul float %55, %59, !dbg !32
  %61 = fadd float %50, %60, !dbg !33
  %62 = fsub float %38, %57, !dbg !19
  %63 = select i1 %17, float 4.000000e+00, float 0.000000e+00, !dbg !24
  %64 = fcmp oeq float %63, 0.000000e+00, !dbg !25
  %65 = tail call float @llvm.nvvm.div.full(float %39, float %63), !dbg !26
  %66 = select i1 %64, float 0.000000e+00, float %65, !dbg !27
  %67 = fmul float %66, %62, !dbg !28
  %68 = fadd float %57, %67, !dbg !29
  %69 = fmul float %62, %62, !dbg !30
  %70 = fmul float %52, %69, !dbg !31
  %71 = fmul float %66, %70, !dbg !32
  %72 = fadd float %61, %71, !dbg !33
  %73 = bitcast float %68 to i32, !dbg !34
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !34
  %75 = bitcast i32 %74 to float, !dbg !34
  %76 = bitcast float %72 to i32, !dbg !34
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !34
  %78 = bitcast i32 %77 to float, !dbg !34
  %79 = bitcast float %63 to i32, !dbg !34
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 16, i32 31), !dbg !34
  %81 = bitcast i32 %80 to float, !dbg !34
  %82 = fsub float %75, %68, !dbg !19
  %83 = fadd float %63, %81, !dbg !24
  %84 = fcmp oeq float %83, 0.000000e+00, !dbg !25
  %85 = tail call float @llvm.nvvm.div.full(float %81, float %83), !dbg !26
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !27
  %87 = fmul float %86, %82, !dbg !28
  %88 = fadd float %68, %87, !dbg !29
  %89 = fadd float %72, %78, !dbg !35
  %90 = fmul float %82, %82, !dbg !30
  %91 = fmul float %63, %90, !dbg !31
  %92 = fmul float %86, %91, !dbg !32
  %93 = fadd float %89, %92, !dbg !33
  %94 = bitcast float %88 to i32, !dbg !34
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !34
  %96 = bitcast i32 %95 to float, !dbg !34
  %97 = bitcast float %93 to i32, !dbg !34
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !34
  %99 = bitcast i32 %98 to float, !dbg !34
  %100 = bitcast float %83 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = fsub float %96, %88, !dbg !19
  %104 = fadd float %83, %102, !dbg !24
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !25
  %106 = tail call float @llvm.nvvm.div.full(float %102, float %104), !dbg !26
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !27
  %108 = fmul float %107, %103, !dbg !28
  %109 = fadd float %88, %108, !dbg !29
  %110 = fadd float %93, %99, !dbg !35
  %111 = fmul float %103, %103, !dbg !30
  %112 = fmul float %83, %111, !dbg !31
  %113 = fmul float %107, %112, !dbg !32
  %114 = fadd float %110, %113, !dbg !33
  %115 = bitcast float %109 to i32, !dbg !34
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !34
  %117 = bitcast i32 %116 to float, !dbg !34
  %118 = bitcast float %114 to i32, !dbg !34
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = bitcast float %104 to i32, !dbg !34
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = fsub float %117, %109, !dbg !19
  %125 = fadd float %104, %123, !dbg !24
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !25
  %127 = tail call float @llvm.nvvm.div.full(float %123, float %125), !dbg !26
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !27
  %129 = fmul float %128, %124, !dbg !28
  %130 = fadd float %109, %129, !dbg !29
  %131 = fadd float %114, %120, !dbg !35
  %132 = fmul float %124, %124, !dbg !30
  %133 = fmul float %104, %132, !dbg !31
  %134 = fmul float %128, %133, !dbg !32
  %135 = fadd float %131, %134, !dbg !33
  %136 = bitcast float %130 to i32, !dbg !34
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !34
  %138 = bitcast i32 %137 to float, !dbg !34
  %139 = bitcast float %135 to i32, !dbg !34
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = bitcast float %125 to i32, !dbg !34
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !34
  %144 = bitcast i32 %143 to float, !dbg !34
  %145 = fsub float %138, %130, !dbg !19
  %146 = fadd float %125, %144, !dbg !24
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !25
  %148 = tail call float @llvm.nvvm.div.full(float %144, float %146), !dbg !26
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !27
  %150 = fmul float %149, %145, !dbg !28
  %151 = fadd float %130, %150, !dbg !29
  %152 = fadd float %135, %141, !dbg !35
  %153 = fmul float %145, %145, !dbg !30
  %154 = fmul float %125, %153, !dbg !31
  %155 = fmul float %149, %154, !dbg !32
  %156 = fadd float %152, %155, !dbg !33
  %157 = bitcast float %151 to i32, !dbg !34
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = bitcast float %156 to i32, !dbg !34
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !34
  %162 = bitcast i32 %161 to float, !dbg !34
  %163 = bitcast float %146 to i32, !dbg !34
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !34
  %165 = bitcast i32 %164 to float, !dbg !34
  %166 = fsub float %159, %151, !dbg !19
  %167 = fadd float %146, %165, !dbg !24
  %168 = fcmp oeq float %167, 0.000000e+00, !dbg !25
  %169 = tail call float @llvm.nvvm.div.full(float %165, float %167), !dbg !26
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !27
  %171 = fmul float %170, %166, !dbg !28
  %172 = fadd float %151, %171, !dbg !29
  %173 = fadd float %156, %162, !dbg !35
  %174 = fmul float %166, %166, !dbg !30
  %175 = fmul float %146, %174, !dbg !31
  %176 = fmul float %170, %175, !dbg !32
  %177 = fadd float %173, %176, !dbg !33
  %178 = and i32 %14, 15, !dbg !34
  %179 = icmp eq i32 %13, 0, !dbg !34
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !34
  %181 = bitcast float %172 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 %179) #5, !dbg !34
  %182 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %178, !dbg !34
  %183 = bitcast float %177 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 %179) #5, !dbg !34
  %184 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %178, !dbg !34
  %185 = bitcast float %167 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 %179) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %186 = icmp slt i32 %12, 16, !dbg !34
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %188 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %187, i1 %186) #5, !dbg !34
  %189 = bitcast i32 %188 to float, !dbg !34
  %190 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %12, !dbg !34
  %191 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %190, i1 %186) #5, !dbg !34
  %192 = bitcast i32 %191 to float, !dbg !34
  %193 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !34
  %194 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %193, i1 %186) #5, !dbg !34
  %195 = bitcast i32 %194 to float, !dbg !34
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !34
  %197 = bitcast i32 %196 to float, !dbg !34
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 8, i32 31), !dbg !34
  %199 = bitcast i32 %198 to float, !dbg !34
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 8, i32 31), !dbg !34
  %201 = bitcast i32 %200 to float, !dbg !34
  %202 = fsub float %197, %189, !dbg !19
  %203 = fadd float %195, %201, !dbg !24
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !25
  %205 = tail call float @llvm.nvvm.div.full(float %201, float %203), !dbg !26
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !27
  %207 = fmul float %202, %206, !dbg !28
  %208 = fadd float %207, %189, !dbg !29
  %209 = fadd float %192, %199, !dbg !35
  %210 = fmul float %202, %202, !dbg !30
  %211 = fmul float %210, %195, !dbg !31
  %212 = fmul float %211, %206, !dbg !32
  %213 = fadd float %209, %212, !dbg !33
  %214 = bitcast float %208 to i32, !dbg !34
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 4, i32 31), !dbg !34
  %216 = bitcast i32 %215 to float, !dbg !34
  %217 = bitcast float %213 to i32, !dbg !34
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !34
  %219 = bitcast i32 %218 to float, !dbg !34
  %220 = bitcast float %203 to i32, !dbg !34
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !34
  %222 = bitcast i32 %221 to float, !dbg !34
  %223 = fsub float %216, %208, !dbg !19
  %224 = fadd float %203, %222, !dbg !24
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !25
  %226 = tail call float @llvm.nvvm.div.full(float %222, float %224), !dbg !26
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !27
  %228 = fmul float %223, %227, !dbg !28
  %229 = fadd float %208, %228, !dbg !29
  %230 = fadd float %213, %219, !dbg !35
  %231 = fmul float %223, %223, !dbg !30
  %232 = fmul float %203, %231, !dbg !31
  %233 = fmul float %227, %232, !dbg !32
  %234 = fadd float %230, %233, !dbg !33
  %235 = bitcast float %229 to i32, !dbg !34
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !34
  %237 = bitcast i32 %236 to float, !dbg !34
  %238 = bitcast float %234 to i32, !dbg !34
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !34
  %240 = bitcast i32 %239 to float, !dbg !34
  %241 = bitcast float %224 to i32, !dbg !34
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 2, i32 31), !dbg !34
  %243 = bitcast i32 %242 to float, !dbg !34
  %244 = fsub float %237, %229, !dbg !19
  %245 = fadd float %224, %243, !dbg !24
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !25
  %247 = tail call float @llvm.nvvm.div.full(float %243, float %245), !dbg !26
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !27
  %249 = fmul float %244, %248, !dbg !28
  %250 = fadd float %229, %249, !dbg !29
  %251 = fadd float %234, %240, !dbg !35
  %252 = fmul float %244, %244, !dbg !30
  %253 = fmul float %224, %252, !dbg !31
  %254 = fmul float %248, %253, !dbg !32
  %255 = fadd float %251, %254, !dbg !33
  %256 = bitcast float %250 to i32, !dbg !34
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !34
  %258 = bitcast i32 %257 to float, !dbg !34
  %259 = bitcast float %255 to i32, !dbg !34
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !34
  %261 = bitcast i32 %260 to float, !dbg !34
  %262 = bitcast float %245 to i32, !dbg !34
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !34
  %264 = bitcast i32 %263 to float, !dbg !34
  %265 = fsub float %258, %250, !dbg !19
  %266 = fadd float %245, %264, !dbg !24
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !25
  %268 = tail call float @llvm.nvvm.div.full(float %264, float %266), !dbg !26
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !27
  %270 = fmul float %265, %269, !dbg !28
  %271 = fadd float %250, %270, !dbg !29
  %272 = fadd float %255, %261, !dbg !35
  %273 = fmul float %265, %265, !dbg !30
  %274 = fmul float %245, %273, !dbg !31
  %275 = fmul float %269, %274, !dbg !32
  %276 = fadd float %272, %275, !dbg !33
  %277 = and i32 %12, 15, !dbg !34
  %278 = icmp eq i32 %277, 0, !dbg !34
  %279 = and i1 %186, %278, !dbg !34
  %280 = bitcast float %271 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %280, i1 %279) #5, !dbg !34
  %281 = bitcast float %276 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %281, i1 %279) #5, !dbg !34
  %282 = bitcast float %266 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %282, i1 %279) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %283 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %284 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !34
  %285 = sext i32 %11 to i64, !dbg !36
  %286 = getelementptr float, ptr addrspace(1) %5, i64 %285, !dbg !36
  %287 = and i32 %12, 511, !dbg !37
  %288 = icmp eq i32 %287, 0, !dbg !37
  %289 = bitcast float %283 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %286, i1 %288) #5, !dbg !37
  %290 = tail call float @llvm.nvvm.div.full(float %284, float 1.152000e+03), !dbg !38
  %291 = fadd float %290, 0x3EB0C6F7A0000000, !dbg !39
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %292, 0, !dbg !40
  br i1 %.not.i, label %295, label %293, !dbg !40

293:                                              ; preds = %10
  %294 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %291), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

295:                                              ; preds = %10
  %296 = tail call float @llvm.nvvm.rsqrt.approx.f(float %291), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %293, %295
  %.0.i = phi float [ %294, %293 ], [ %296, %295 ], !dbg !40
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i10 = icmp eq i32 %300, 0, !dbg !40
  br i1 %.not.i10, label %303, label %301, !dbg !40

301:                                              ; preds = %__nv_rsqrtf.exit
  %302 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %291), !dbg !40
  br label %__nv_rsqrtf.exit12, !dbg !40

303:                                              ; preds = %__nv_rsqrtf.exit
  %304 = tail call float @llvm.nvvm.rsqrt.approx.f(float %291), !dbg !40
  br label %__nv_rsqrtf.exit12, !dbg !40

__nv_rsqrtf.exit12:                               ; preds = %301, %303
  %.0.i11 = phi float [ %302, %301 ], [ %304, %303 ], !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %305 = getelementptr float, ptr addrspace(1) %0, i64 %285, !dbg !42
  %306 = bitcast float %.0.i to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %306, ptr addrspace(1) %305, i1 %288) #5, !dbg !43
  %307 = sdiv i32 %11, 4096, !dbg !44
  %308 = mul nsw i32 %307, 1152, !dbg !45
  %309 = add nsw i32 %16, %308, !dbg !46
  %310 = sext i32 %309 to i64, !dbg !47
  %311 = getelementptr bfloat, ptr addrspace(1) %2, i64 %310, !dbg !47
  %312 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %311, i1 %17) #5, !dbg !48
  %313 = extractvalue { i32, i32 } %312, 0, !dbg !48
  %314 = bitcast i32 %313 to <2 x bfloat>, !dbg !48
  %315 = extractvalue { i32, i32 } %312, 1, !dbg !48
  %316 = bitcast i32 %315 to <2 x bfloat>, !dbg !48
  %317 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %21, i1 %17) #5, !dbg !49
  %318 = extractvalue { i32, i32 } %317, 0, !dbg !49
  %319 = bitcast i32 %318 to <2 x bfloat>, !dbg !49
  %320 = extractvalue { i32, i32 } %317, 1, !dbg !49
  %321 = bitcast i32 %320 to <2 x bfloat>, !dbg !49
  %322 = mul nsw i32 %307, 2304, !dbg !50
  %323 = add nsw i32 %16, %322, !dbg !51
  %324 = sext i32 %323 to i64, !dbg !52
  %325 = getelementptr bfloat, ptr addrspace(1) %3, i64 %324, !dbg !52
  %326 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %325, i1 %17) #5, !dbg !53
  %327 = extractvalue { i32, i32 } %326, 0, !dbg !53
  %328 = bitcast i32 %327 to <2 x bfloat>, !dbg !53
  %329 = extractvalue { i32, i32 } %326, 1, !dbg !53
  %330 = bitcast i32 %329 to <2 x bfloat>, !dbg !53
  %331 = zext nneg i32 %16 to i64, !dbg !54
  %332 = getelementptr float, ptr addrspace(1) %4, i64 %331, !dbg !54
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %332, i1 %17) #5, !dbg !55
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !55
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !55
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !55
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !55
  %338 = getelementptr bfloat, ptr addrspace(1) %6, i64 %20, !dbg !56
  %339 = fpext <2 x bfloat> %314 to <2 x float>, !dbg !57
  %340 = fpext <2 x bfloat> %319 to <2 x float>, !dbg !58
  %341 = fpext <2 x bfloat> %328 to <2 x float>, !dbg !59
  %342 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !55
  %343 = insertelement <2 x i32> %342, i32 %335, i64 1, !dbg !55
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !55
  %345 = insertelement <2 x float> poison, float %283, i64 0, !dbg !60
  %346 = shufflevector <2 x float> %345, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %347 = fsub <2 x float> %340, %346, !dbg !60
  %348 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !61
  %349 = shufflevector <2 x float> %348, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %350 = fmul <2 x float> %349, %347, !dbg !61
  %351 = fmul <2 x float> %350, %339, !dbg !62
  %352 = fadd <2 x float> %344, %341, !dbg !63
  %353 = fadd <2 x float> %352, %351, !dbg !64
  %354 = fptrunc <2 x float> %353 to <2 x bfloat>, !dbg !65
  %355 = fpext <2 x bfloat> %316 to <2 x float>, !dbg !57
  %356 = fpext <2 x bfloat> %321 to <2 x float>, !dbg !58
  %357 = fpext <2 x bfloat> %330 to <2 x float>, !dbg !59
  %358 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !55
  %359 = insertelement <2 x i32> %358, i32 %337, i64 1, !dbg !55
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !55
  %361 = fsub <2 x float> %356, %346, !dbg !60
  %362 = fmul <2 x float> %349, %361, !dbg !61
  %363 = fmul <2 x float> %362, %355, !dbg !62
  %364 = fadd <2 x float> %360, %357, !dbg !63
  %365 = fadd <2 x float> %364, %363, !dbg !64
  %366 = fptrunc <2 x float> %365 to <2 x bfloat>, !dbg !65
  %367 = bitcast <2 x bfloat> %354 to i32, !dbg !65
  %368 = bitcast <2 x bfloat> %366 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %367, i32 %368, ptr addrspace(1) %338, i1 %17) #5, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxl7kjyo435ec4skd75vvra5glcm3rgp33jz4qz7cvjmf4ipyxsl.py", directory: "results/my_experiment/torchinductor_cache_0/xl")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_native_layer_norm_5, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_native_layer_norm_5", linkageName: "triton_red_fused__to_copy_add_div_mul_native_layer_norm_5", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 26, column: 37, scope: !6)
!11 = !DILocation(line: 34, column: 29, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 41, scope: !6)
!14 = !DILocation(line: 38, column: 34, scope: !6)
!15 = !DILocation(line: 38, column: 51, scope: !6)
!16 = !DILocation(line: 38, column: 104, scope: !6)
!17 = !DILocation(line: 44, column: 54, scope: !6)
!18 = !DILocation(line: 46, column: 58, scope: !6)
!19 = !DILocation(line: 217, column: 21, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!23 = !DILocation(line: 47, column: 79, scope: !6)
!24 = !DILocation(line: 218, column: 28, scope: !20, inlinedAt: !23)
!25 = !DILocation(line: 219, column: 39, scope: !20, inlinedAt: !23)
!26 = !DILocation(line: 219, column: 60, scope: !20, inlinedAt: !23)
!27 = !DILocation(line: 219, column: 49, scope: !20, inlinedAt: !23)
!28 = !DILocation(line: 221, column: 25, scope: !20, inlinedAt: !23)
!29 = !DILocation(line: 221, column: 17, scope: !20, inlinedAt: !23)
!30 = !DILocation(line: 222, column: 30, scope: !20, inlinedAt: !23)
!31 = !DILocation(line: 222, column: 38, scope: !20, inlinedAt: !23)
!32 = !DILocation(line: 222, column: 49, scope: !20, inlinedAt: !23)
!33 = !DILocation(line: 222, column: 22, scope: !20, inlinedAt: !23)
!34 = !DILocation(line: 229, column: 46, scope: !22, inlinedAt: !23)
!35 = !DILocation(line: 222, column: 15, scope: !20, inlinedAt: !23)
!36 = !DILocation(line: 51, column: 25, scope: !6)
!37 = !DILocation(line: 51, column: 36, scope: !6)
!38 = !DILocation(line: 53, column: 20, scope: !6)
!39 = !DILocation(line: 55, column: 20, scope: !6)
!40 = !DILocation(line: 56, column: 28, scope: !6)
!41 = !DILocation(line: 57, column: 4, scope: !6)
!42 = !DILocation(line: 58, column: 28, scope: !6)
!43 = !DILocation(line: 58, column: 40, scope: !6)
!44 = !DILocation(line: 59, column: 19, scope: !6)
!45 = !DILocation(line: 66, column: 47, scope: !6)
!46 = !DILocation(line: 66, column: 42, scope: !6)
!47 = !DILocation(line: 66, column: 35, scope: !6)
!48 = !DILocation(line: 66, column: 52, scope: !6)
!49 = !DILocation(line: 67, column: 52, scope: !6)
!50 = !DILocation(line: 68, column: 47, scope: !6)
!51 = !DILocation(line: 68, column: 42, scope: !6)
!52 = !DILocation(line: 68, column: 35, scope: !6)
!53 = !DILocation(line: 68, column: 52, scope: !6)
!54 = !DILocation(line: 69, column: 35, scope: !6)
!55 = !DILocation(line: 69, column: 42, scope: !6)
!56 = !DILocation(line: 83, column: 29, scope: !6)
!57 = !DILocation(line: 66, column: 105, scope: !6)
!58 = !DILocation(line: 67, column: 106, scope: !6)
!59 = !DILocation(line: 68, column: 105, scope: !6)
!60 = !DILocation(line: 72, column: 24, scope: !6)
!61 = !DILocation(line: 73, column: 24, scope: !6)
!62 = !DILocation(line: 74, column: 24, scope: !6)
!63 = !DILocation(line: 76, column: 24, scope: !6)
!64 = !DILocation(line: 78, column: 24, scope: !6)
!65 = !DILocation(line: 83, column: 53, scope: !6)
!66 = !DILocation(line: 60, column: 4, scope: !6)
