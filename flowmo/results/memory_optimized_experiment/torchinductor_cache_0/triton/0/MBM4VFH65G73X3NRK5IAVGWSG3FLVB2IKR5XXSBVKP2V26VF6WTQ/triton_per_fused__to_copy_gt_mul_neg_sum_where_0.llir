; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_gt_mul_neg_sum_where_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 3, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 28, !dbg !11
  %11 = shl i32 %9, 1, !dbg !11
  %12 = and i32 %11, 6, !dbg !11
  %13 = and i32 %9, 7, !dbg !11
  %14 = or disjoint i32 %12, %8, !dbg !12
  %15 = or disjoint i32 %8, %13, !dbg !12
  %16 = icmp slt i32 %14, 512, !dbg !13
  %17 = icmp slt i32 %15, 512, !dbg !13
  %18 = lshr i32 %9, 5, !dbg !14
  %19 = lshr i32 %9, 2, !dbg !14
  %20 = and i32 %19, 15, !dbg !14
  %21 = icmp samesign ult i32 %20, 9, !dbg !15
  %22 = shl nuw nsw i32 %20, 1, !dbg !16
  %23 = ashr exact i32 %14, 1, !dbg !17
  %24 = mul i32 %23, 18, !dbg !18
  %25 = add i32 %24, %22, !dbg !19
  %26 = sext i32 %25 to i64, !dbg !20
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = and i1 %21, %16, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 %28) #3, !dbg !22
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !22
  %31 = extractelement <2 x bfloat> %30, i64 0, !dbg !22
  %32 = extractelement <2 x bfloat> %30, i64 1, !dbg !22
  %33 = zext nneg i32 %20 to i64, !dbg !23
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !23
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %21) #3, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %21) #3, !dbg !24
  %37 = fcmp ogt bfloat %31, 0xR0000, !dbg !25
  %38 = fcmp ogt bfloat %32, 0xR0000, !dbg !25
  %sext = shl i64 %36, 32, !dbg !26
  %39 = ashr exact i64 %sext, 32, !dbg !26
  %40 = select i1 %28, i1 %37, i1 false, !dbg !27
  %41 = select i1 %40, i64 %39, i64 0, !dbg !27
  %42 = select i1 %28, i1 %38, i1 false, !dbg !27
  %43 = select i1 %42, i64 %39, i64 0, !dbg !27
  %extelt.offset = lshr i64 %41, 32, !dbg !28
  %44 = trunc nuw i64 %extelt.offset to i32, !dbg !28
  %45 = trunc nsw i64 %41 to i32, !dbg !28
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 16, i32 31), !dbg !28
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !28
  %48 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !28
  %49 = insertelement <2 x i32> %48, i32 %47, i64 1, !dbg !28
  %50 = bitcast <2 x i32> %49 to i64, !dbg !28
  %51 = add i64 %41, %50, !dbg !32
  %extelt.offset2 = lshr i64 %51, 32, !dbg !28
  %52 = trunc nuw i64 %extelt.offset2 to i32, !dbg !28
  %53 = trunc i64 %51 to i32, !dbg !28
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !28
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !28
  %56 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !28
  %57 = insertelement <2 x i32> %56, i32 %55, i64 1, !dbg !28
  %58 = bitcast <2 x i32> %57 to i64, !dbg !28
  %59 = add i64 %51, %58, !dbg !32
  %extelt.offset3 = lshr i64 %59, 32, !dbg !28
  %60 = trunc nuw i64 %extelt.offset3 to i32, !dbg !28
  %61 = trunc i64 %59 to i32, !dbg !28
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !28
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !28
  %64 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !28
  %65 = insertelement <2 x i32> %64, i32 %63, i64 1, !dbg !28
  %66 = bitcast <2 x i32> %65 to i64, !dbg !28
  %67 = add i64 %59, %66, !dbg !32
  %extelt.offset4 = lshr i64 %43, 32, !dbg !28
  %68 = trunc nuw i64 %extelt.offset4 to i32, !dbg !28
  %69 = trunc nsw i64 %43 to i32, !dbg !28
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !28
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !28
  %72 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !28
  %73 = insertelement <2 x i32> %72, i32 %71, i64 1, !dbg !28
  %74 = bitcast <2 x i32> %73 to i64, !dbg !28
  %75 = add i64 %43, %74, !dbg !32
  %extelt.offset5 = lshr i64 %75, 32, !dbg !28
  %76 = trunc nuw i64 %extelt.offset5 to i32, !dbg !28
  %77 = trunc i64 %75 to i32, !dbg !28
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !28
  %80 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !28
  %81 = insertelement <2 x i32> %80, i32 %79, i64 1, !dbg !28
  %82 = bitcast <2 x i32> %81 to i64, !dbg !28
  %83 = add i64 %75, %82, !dbg !32
  %extelt.offset6 = lshr i64 %83, 32, !dbg !28
  %84 = trunc nuw i64 %extelt.offset6 to i32, !dbg !28
  %85 = trunc i64 %83 to i32, !dbg !28
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !28
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !28
  %88 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !28
  %89 = insertelement <2 x i32> %88, i32 %87, i64 1, !dbg !28
  %90 = bitcast <2 x i32> %89 to i64, !dbg !28
  %91 = add i64 %83, %90, !dbg !32
  %92 = and i32 %18, 1, !dbg !28
  %93 = icmp eq i32 %10, 0, !dbg !28
  %94 = shl nuw nsw i32 %12, 1, !dbg !28
  %95 = or disjoint i32 %94, %92, !dbg !28
  %96 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %95, !dbg !28
  %97 = insertelement <1 x i64> poison, i64 %67, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %96, <1 x i64> %97, i1 %93) #3, !dbg !28
  %98 = or disjoint i32 %94, 2, !dbg !28
  %99 = or disjoint i32 %98, %92, !dbg !28
  %100 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %99, !dbg !28
  %101 = insertelement <1 x i64> poison, i64 %91, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %100, <1 x i64> %101, i1 %93) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %102 = icmp slt i32 %9, 16, !dbg !28
  %103 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %104 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %103, i1 %102) #3, !dbg !28
  %extelt.offset7 = lshr i64 %104, 32, !dbg !28
  %105 = trunc nuw i64 %extelt.offset7 to i32, !dbg !28
  %106 = trunc i64 %104 to i32, !dbg !28
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !28
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !28
  %109 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !28
  %110 = insertelement <2 x i32> %109, i32 %108, i64 1, !dbg !28
  %111 = bitcast <2 x i32> %110 to i64, !dbg !28
  %112 = add i64 %104, %111, !dbg !32
  %113 = and i32 %9, 1, !dbg !28
  %114 = icmp eq i32 %113, 0, !dbg !28
  %115 = and i1 %102, %114, !dbg !28
  %116 = insertelement <1 x i64> poison, i64 %112, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %103, <1 x i64> %116, i1 %115) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %117 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %94, !dbg !28
  %118 = load i64, ptr addrspace(3) %117, align 16, !dbg !28
  %119 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %98, !dbg !28
  %120 = load i64, ptr addrspace(3) %119, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %121 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %121, i64 %118, i64 %120, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %122 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %123 = load i64, ptr addrspace(3) %122, align 8, !dbg !34
  %124 = sext i32 %15 to i64, !dbg !35
  %125 = getelementptr i64, ptr addrspace(1) %2, i64 %124, !dbg !35
  %126 = and i32 %9, 56, !dbg !36
  %127 = icmp eq i32 %126, 0, !dbg !36
  %128 = and i1 %127, %17, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %123, ptr addrspace(1) %125, i1 %128) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnz6sodu47e5mqrswyjz6y7cx62vuydwyeebqkndjolroizhugqd.py", directory: "results/memory_optimized_experiment/torchinductor_cache_0/nz")
!4 = !{ptr @triton_per_fused__to_copy_gt_mul_neg_sum_where_0, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_gt_mul_neg_sum_where_0", linkageName: "triton_per_fused__to_copy_gt_mul_neg_sum_where_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 44, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 27, column: 38, scope: !6)
!15 = !DILocation(line: 29, column: 25, scope: !6)
!16 = !DILocation(line: 34, column: 32, scope: !6)
!17 = !DILocation(line: 34, column: 49, scope: !6)
!18 = !DILocation(line: 34, column: 43, scope: !6)
!19 = !DILocation(line: 34, column: 39, scope: !6)
!20 = !DILocation(line: 34, column: 30, scope: !6)
!21 = !DILocation(line: 34, column: 75, scope: !6)
!22 = !DILocation(line: 34, column: 67, scope: !6)
!23 = !DILocation(line: 35, column: 30, scope: !6)
!24 = !DILocation(line: 35, column: 37, scope: !6)
!25 = !DILocation(line: 37, column: 18, scope: !6)
!26 = !DILocation(line: 45, column: 21, scope: !6)
!27 = !DILocation(line: 47, column: 45, scope: !6)
!28 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 48, column: 26, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 48, column: 29, scope: !6)
!35 = !DILocation(line: 49, column: 25, scope: !6)
!36 = !DILocation(line: 49, column: 37, scope: !6)
!37 = !DILocation(line: 49, column: 4, scope: !6)
