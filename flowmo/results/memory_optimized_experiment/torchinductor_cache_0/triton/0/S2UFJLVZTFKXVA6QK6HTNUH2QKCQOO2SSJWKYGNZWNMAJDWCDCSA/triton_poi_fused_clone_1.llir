; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_clone_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %10 = shl i32 %9, 10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 255, !dbg !11
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = or disjoint i32 %13, 256, !dbg !12
  %15 = or disjoint i32 %13, 512, !dbg !12
  %16 = or disjoint i32 %13, 768, !dbg !12
  %17 = icmp slt i32 %13, 2304, !dbg !13
  %18 = icmp slt i32 %14, 2304, !dbg !13
  %19 = icmp slt i32 %15, 2304, !dbg !13
  %20 = icmp slt i32 %16, 2304, !dbg !13
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !14
  %22 = shl i32 %21, 1, !dbg !15
  %23 = icmp slt i32 %22, 2, !dbg !16
  %24 = sdiv i32 %13, 9, !dbg !17
  %25 = mul i32 %24, 9, !dbg !18
  %.decomposed = sub i32 %13, %25, !dbg !18
  %26 = sdiv i32 %14, 9, !dbg !17
  %27 = mul i32 %26, 9, !dbg !18
  %.decomposed1 = sub i32 %14, %27, !dbg !18
  %28 = sdiv i32 %15, 9, !dbg !17
  %29 = mul i32 %28, 9, !dbg !18
  %.decomposed2 = sub i32 %15, %29, !dbg !18
  %30 = sdiv i32 %16, 9, !dbg !17
  %31 = mul i32 %30, 9, !dbg !18
  %.decomposed3 = sub i32 %16, %31, !dbg !18
  %32 = add i32 %13, %21, !dbg !19
  %33 = shl i32 %32, 1, !dbg !19
  %34 = add i32 %14, %21, !dbg !19
  %35 = shl i32 %34, 1, !dbg !19
  %36 = add i32 %15, %21, !dbg !19
  %37 = shl i32 %36, 1, !dbg !19
  %38 = add i32 %16, %21, !dbg !19
  %39 = shl i32 %38, 1, !dbg !19
  %40 = sext i32 %33 to i64, !dbg !20
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = sext i32 %35 to i64, !dbg !20
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = sext i32 %37 to i64, !dbg !20
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = sext i32 %39 to i64, !dbg !20
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !20
  %48 = and i1 %23, %17, !dbg !21
  %49 = and i1 %23, %18, !dbg !21
  %50 = and i1 %23, %19, !dbg !21
  %51 = and i1 %23, %20, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %48) #1, !dbg !22
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %49) #1, !dbg !22
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %50) #1, !dbg !22
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %51) #1, !dbg !22
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !22
  %60 = add i32 %24, %21, !dbg !23
  %61 = shl i32 %60, 1, !dbg !23
  %62 = add i32 %26, %21, !dbg !23
  %63 = shl i32 %62, 1, !dbg !23
  %64 = add i32 %28, %21, !dbg !23
  %65 = shl i32 %64, 1, !dbg !23
  %66 = add i32 %30, %21, !dbg !23
  %67 = shl i32 %66, 1, !dbg !23
  %68 = shl nsw i32 %.decomposed, 9, !dbg !24
  %69 = shl nsw i32 %.decomposed1, 9, !dbg !24
  %70 = shl nsw i32 %.decomposed2, 9, !dbg !24
  %71 = shl nsw i32 %.decomposed3, 9, !dbg !24
  %72 = add i32 %61, %68, !dbg !25
  %73 = add i32 %63, %69, !dbg !25
  %74 = add i32 %65, %70, !dbg !25
  %75 = add i32 %67, %71, !dbg !25
  %76 = sext i32 %72 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !26
  %78 = sext i32 %73 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !26
  %80 = sext i32 %74 to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !26
  %82 = sext i32 %75 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !26
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 %48) #1, !dbg !27
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !27
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !27
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %49) #1, !dbg !27
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !27
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !27
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %50) #1, !dbg !27
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !27
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !27
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %51) #1, !dbg !27
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !27
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %2) #1, !dbg !28
  %97 = bitcast i32 %96 to float, !dbg !28
  %98 = mul i32 %21, 18, !dbg !29
  %99 = add i32 %98, 9, !dbg !29
  %100 = mul i32 %24, 18, !dbg !30
  %101 = mul i32 %26, 18, !dbg !30
  %102 = mul i32 %28, 18, !dbg !30
  %103 = mul i32 %30, 18, !dbg !30
  %104 = add i32 %100, %.decomposed, !dbg !31
  %105 = add i32 %104, %98, !dbg !32
  %106 = add i32 %104, %99, !dbg !32
  %107 = add i32 %101, %.decomposed1, !dbg !31
  %108 = add i32 %107, %98, !dbg !32
  %109 = add i32 %107, %99, !dbg !32
  %110 = add i32 %102, %.decomposed2, !dbg !31
  %111 = add i32 %110, %98, !dbg !32
  %112 = add i32 %110, %99, !dbg !32
  %113 = add i32 %103, %.decomposed3, !dbg !31
  %114 = add i32 %113, %98, !dbg !32
  %115 = add i32 %113, %99, !dbg !32
  %116 = sext i32 %105 to i64, !dbg !33
  %117 = getelementptr bfloat, ptr addrspace(1) %3, i64 %116, !dbg !33
  %118 = sext i32 %106 to i64, !dbg !33
  %119 = getelementptr bfloat, ptr addrspace(1) %3, i64 %118, !dbg !33
  %120 = sext i32 %108 to i64, !dbg !33
  %121 = getelementptr bfloat, ptr addrspace(1) %3, i64 %120, !dbg !33
  %122 = sext i32 %109 to i64, !dbg !33
  %123 = getelementptr bfloat, ptr addrspace(1) %3, i64 %122, !dbg !33
  %124 = sext i32 %111 to i64, !dbg !33
  %125 = getelementptr bfloat, ptr addrspace(1) %3, i64 %124, !dbg !33
  %126 = sext i32 %112 to i64, !dbg !33
  %127 = getelementptr bfloat, ptr addrspace(1) %3, i64 %126, !dbg !33
  %128 = sext i32 %114 to i64, !dbg !33
  %129 = getelementptr bfloat, ptr addrspace(1) %3, i64 %128, !dbg !33
  %130 = sext i32 %115 to i64, !dbg !33
  %131 = getelementptr bfloat, ptr addrspace(1) %3, i64 %130, !dbg !33
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %117, i1 %48) #1, !dbg !34
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %119, i1 %48) #1, !dbg !34
  %134 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %121, i1 %49) #1, !dbg !34
  %135 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %123, i1 %49) #1, !dbg !34
  %136 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %125, i1 %50) #1, !dbg !34
  %137 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %127, i1 %50) #1, !dbg !34
  %138 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %129, i1 %51) #1, !dbg !34
  %139 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %131, i1 %51) #1, !dbg !34
  %140 = fmul float %97, 0x3F447AE140000000, !dbg !35
  %141 = fmul float %140, 0x3F2C71C720000000, !dbg !36
  %142 = getelementptr bfloat, ptr addrspace(1) %4, i64 %40, !dbg !37
  %143 = getelementptr bfloat, ptr addrspace(1) %4, i64 %42, !dbg !37
  %144 = getelementptr bfloat, ptr addrspace(1) %4, i64 %44, !dbg !37
  %145 = getelementptr bfloat, ptr addrspace(1) %4, i64 %46, !dbg !37
  %146 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !38
  %147 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !27
  %148 = insertelement <2 x i32> %147, i32 %86, i64 1, !dbg !27
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !27
  %150 = insertelement <2 x i16> poison, i16 %132, i64 0, !dbg !34
  %151 = insertelement <2 x i16> %150, i16 %133, i64 1, !dbg !34
  %152 = bitcast <2 x i16> %151 to <2 x bfloat>, !dbg !34
  %153 = fpext <2 x bfloat> %152 to <2 x float>, !dbg !39
  %154 = insertelement <2 x float> poison, float %141, i64 0, !dbg !40
  %155 = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %156 = fmul <2 x float> %155, %149, !dbg !40
  %157 = fadd <2 x float> %156, %146, !dbg !41
  %158 = fadd <2 x float> %157, %153, !dbg !42
  %159 = fptrunc <2 x float> %158 to <2 x bfloat>, !dbg !43
  %160 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !38
  %161 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !27
  %162 = insertelement <2 x i32> %161, i32 %89, i64 1, !dbg !27
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !27
  %164 = insertelement <2 x i16> poison, i16 %134, i64 0, !dbg !34
  %165 = insertelement <2 x i16> %164, i16 %135, i64 1, !dbg !34
  %166 = bitcast <2 x i16> %165 to <2 x bfloat>, !dbg !34
  %167 = fpext <2 x bfloat> %166 to <2 x float>, !dbg !39
  %168 = fmul <2 x float> %155, %163, !dbg !40
  %169 = fadd <2 x float> %168, %160, !dbg !41
  %170 = fadd <2 x float> %169, %167, !dbg !42
  %171 = fptrunc <2 x float> %170 to <2 x bfloat>, !dbg !43
  %172 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !38
  %173 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !27
  %174 = insertelement <2 x i32> %173, i32 %92, i64 1, !dbg !27
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !27
  %176 = insertelement <2 x i16> poison, i16 %136, i64 0, !dbg !34
  %177 = insertelement <2 x i16> %176, i16 %137, i64 1, !dbg !34
  %178 = bitcast <2 x i16> %177 to <2 x bfloat>, !dbg !34
  %179 = fpext <2 x bfloat> %178 to <2 x float>, !dbg !39
  %180 = fmul <2 x float> %155, %175, !dbg !40
  %181 = fadd <2 x float> %180, %172, !dbg !41
  %182 = fadd <2 x float> %181, %179, !dbg !42
  %183 = fptrunc <2 x float> %182 to <2 x bfloat>, !dbg !43
  %184 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !38
  %185 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !27
  %186 = insertelement <2 x i32> %185, i32 %95, i64 1, !dbg !27
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !27
  %188 = insertelement <2 x i16> poison, i16 %138, i64 0, !dbg !34
  %189 = insertelement <2 x i16> %188, i16 %139, i64 1, !dbg !34
  %190 = bitcast <2 x i16> %189 to <2 x bfloat>, !dbg !34
  %191 = fpext <2 x bfloat> %190 to <2 x float>, !dbg !39
  %192 = fmul <2 x float> %155, %187, !dbg !40
  %193 = fadd <2 x float> %192, %184, !dbg !41
  %194 = fadd <2 x float> %193, %191, !dbg !42
  %195 = fptrunc <2 x float> %194 to <2 x bfloat>, !dbg !43
  %196 = bitcast <2 x bfloat> %159 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %142, i1 %48) #1, !dbg !43
  %197 = bitcast <2 x bfloat> %171 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %143, i1 %49) #1, !dbg !43
  %198 = bitcast <2 x bfloat> %183 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %144, i1 %50) #1, !dbg !43
  %199 = bitcast <2 x bfloat> %195 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %145, i1 %51) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmzxghy63jb5j566fxllkxexikiebhkoqfeedbxuoykgvrx6ns4v.py", directory: "results/memory_optimized_experiment/torchinductor_cache_0/mz")
!4 = !{ptr @triton_poi_fused_clone_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_clone_1", linkageName: "triton_poi_fused_clone_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 21, column: 28, scope: !6)
!10 = !DILocation(line: 21, column: 33, scope: !6)
!11 = !DILocation(line: 22, column: 44, scope: !6)
!12 = !DILocation(line: 22, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 24, column: 28, scope: !6)
!15 = !DILocation(line: 24, column: 33, scope: !6)
!16 = !DILocation(line: 26, column: 21, scope: !6)
!17 = !DILocation(line: 30, column: 19, scope: !6)
!18 = !DILocation(line: 29, column: 19, scope: !6)
!19 = !DILocation(line: 31, column: 35, scope: !6)
!20 = !DILocation(line: 31, column: 30, scope: !6)
!21 = !DILocation(line: 31, column: 50, scope: !6)
!22 = !DILocation(line: 31, column: 42, scope: !6)
!23 = !DILocation(line: 32, column: 35, scope: !6)
!24 = !DILocation(line: 32, column: 46, scope: !6)
!25 = !DILocation(line: 32, column: 42, scope: !6)
!26 = !DILocation(line: 32, column: 30, scope: !6)
!27 = !DILocation(line: 32, column: 51, scope: !6)
!28 = !DILocation(line: 33, column: 19, scope: !6)
!29 = !DILocation(line: 35, column: 38, scope: !6)
!30 = !DILocation(line: 35, column: 46, scope: !6)
!31 = !DILocation(line: 35, column: 36, scope: !6)
!32 = !DILocation(line: 35, column: 43, scope: !6)
!33 = !DILocation(line: 35, column: 31, scope: !6)
!34 = !DILocation(line: 35, column: 51, scope: !6)
!35 = !DILocation(line: 37, column: 18, scope: !6)
!36 = !DILocation(line: 39, column: 18, scope: !6)
!37 = !DILocation(line: 44, column: 25, scope: !6)
!38 = !DILocation(line: 31, column: 90, scope: !6)
!39 = !DILocation(line: 35, column: 99, scope: !6)
!40 = !DILocation(line: 40, column: 18, scope: !6)
!41 = !DILocation(line: 42, column: 19, scope: !6)
!42 = !DILocation(line: 43, column: 20, scope: !6)
!43 = !DILocation(line: 44, column: 44, scope: !6)
!44 = !DILocation(line: 44, column: 4, scope: !6)
