; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_per_fused__to_copy_gt_mul_neg_sum_where_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 512, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 15, !dbg !11
  %11 = icmp samesign ult i32 %10, 9, !dbg !12
  %12 = shl nuw nsw i32 %10, 1, !dbg !13
  %13 = sdiv i32 %7, 2, !dbg !14
  %14 = shl i32 %13, 4, !dbg !15
  %15 = add i32 %14, %7, !dbg !15
  %16 = add i32 %15, %12, !dbg !16
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = and i1 %8, %11, !dbg !18
  %20 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %18, i1 %19) #2, !dbg !19
  %21 = bitcast i16 %20 to bfloat, !dbg !19
  %22 = zext nneg i32 %10 to i64, !dbg !20
  %23 = getelementptr i64, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %11) #2, !dbg !21
  %25 = fcmp ogt bfloat %21, 0xR0000, !dbg !22
  %sext = shl i64 %24, 32, !dbg !23
  %26 = ashr exact i64 %sext, 32, !dbg !23
  %27 = select i1 %19, i1 %25, i1 false, !dbg !24
  %28 = select i1 %27, i64 %26, i64 0, !dbg !24
  %extelt.offset = lshr i64 %28, 32, !dbg !25
  %29 = trunc nuw i64 %extelt.offset to i32, !dbg !25
  %30 = trunc nsw i64 %28 to i32, !dbg !25
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 8, i32 31), !dbg !25
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 8, i32 31), !dbg !25
  %33 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !25
  %34 = insertelement <2 x i32> %33, i32 %32, i64 1, !dbg !25
  %35 = bitcast <2 x i32> %34 to i64, !dbg !25
  %36 = add i64 %28, %35, !dbg !29
  %extelt.offset1 = lshr i64 %36, 32, !dbg !25
  %37 = trunc nuw i64 %extelt.offset1 to i32, !dbg !25
  %38 = trunc i64 %36 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 4, i32 31), !dbg !25
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 4, i32 31), !dbg !25
  %41 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !25
  %42 = insertelement <2 x i32> %41, i32 %40, i64 1, !dbg !25
  %43 = bitcast <2 x i32> %42 to i64, !dbg !25
  %44 = add i64 %36, %43, !dbg !29
  %extelt.offset2 = lshr i64 %44, 32, !dbg !25
  %45 = trunc nuw i64 %extelt.offset2 to i32, !dbg !25
  %46 = trunc i64 %44 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !25
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !25
  %49 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %50 = insertelement <2 x i32> %49, i32 %48, i64 1, !dbg !25
  %51 = bitcast <2 x i32> %50 to i64, !dbg !25
  %52 = add i64 %44, %51, !dbg !29
  %extelt.offset3 = lshr i64 %52, 32, !dbg !25
  %53 = trunc nuw i64 %extelt.offset3 to i32, !dbg !25
  %54 = trunc i64 %52 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !25
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !25
  %57 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !25
  %58 = insertelement <2 x i32> %57, i32 %56, i64 1, !dbg !25
  %59 = bitcast <2 x i32> %58 to i64, !dbg !25
  %60 = add i64 %52, %59, !dbg !29
  %61 = sext i32 %7 to i64, !dbg !31
  %62 = getelementptr i64, ptr addrspace(1) %2, i64 %61, !dbg !31
  %63 = and i32 %9, 63, !dbg !32
  %64 = icmp eq i32 %63, 0, !dbg !32
  %65 = and i1 %8, %64, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %60, ptr addrspace(1) %62, i1 %65) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnz6sodu47e5mqrswyjz6y7cx62vuydwyeebqkndjolroizhugqd.py", directory: "results/memory_optimized_experiment/torchinductor_cache_0/nz")
!4 = !{ptr @triton_per_fused__to_copy_gt_mul_neg_sum_where_0, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_gt_mul_neg_sum_where_0", linkageName: "triton_per_fused__to_copy_gt_mul_neg_sum_where_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 26, column: 21, scope: !6)
!11 = !DILocation(line: 27, column: 38, scope: !6)
!12 = !DILocation(line: 29, column: 25, scope: !6)
!13 = !DILocation(line: 34, column: 32, scope: !6)
!14 = !DILocation(line: 34, column: 49, scope: !6)
!15 = !DILocation(line: 34, column: 39, scope: !6)
!16 = !DILocation(line: 34, column: 56, scope: !6)
!17 = !DILocation(line: 34, column: 30, scope: !6)
!18 = !DILocation(line: 34, column: 75, scope: !6)
!19 = !DILocation(line: 34, column: 67, scope: !6)
!20 = !DILocation(line: 35, column: 30, scope: !6)
!21 = !DILocation(line: 35, column: 37, scope: !6)
!22 = !DILocation(line: 37, column: 18, scope: !6)
!23 = !DILocation(line: 45, column: 21, scope: !6)
!24 = !DILocation(line: 47, column: 45, scope: !6)
!25 = !DILocation(line: 286, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 48, column: 26, scope: !6)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 49, column: 25, scope: !6)
!32 = !DILocation(line: 49, column: 37, scope: !6)
!33 = !DILocation(line: 49, column: 4, scope: !6)
