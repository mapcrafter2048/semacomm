#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#loc = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":18:0)
#loc1 = loc(unknown)
#loc39 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":57:27)
#loc45 = loc(callsite(#loc1 at #loc39))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 16 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_clone_gt_mean_mse_loss_mse_loss_backward_neg_where_2(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":18:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":18:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":18:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<-1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4608_i32 = arith.constant 4608 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<4608> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4608> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<2> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<512> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<512> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<18> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<18> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked1> loc(#loc1)
    %cst_14 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked1> loc(#loc1)
    %cst_15 = arith.constant dense<-1.000000e+00> : tensor<1x2048xf32, #blocked1> loc(#loc1)
    %cst_16 = arith.constant dense<2.000000e+00> : tensor<1x2048xf32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2048xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2048xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x2048xi32, #blocked1> loc(#loc2)
    %4 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>, #blocked1> loc(#loc3)
    %5 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc3)
    %6 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>, #blocked1> loc(#loc4)
    %7 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc5)
    %8 = scf.for %arg5 = %c0_i32 to %c4608_i32 step %c2048_i32 iter_args(%arg6 = %cst_12) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %12 = tt.splat %arg5 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc7)
      %13 = tt.splat %arg5 : i32 -> tensor<1x2048xi32, #blocked1> loc(#loc7)
      %14 = arith.addi %12, %2 : tensor<1x2048xi32, #blocked> loc(#loc7)
      %15 = arith.addi %13, %3 : tensor<1x2048xi32, #blocked1> loc(#loc7)
      %16 = arith.cmpi slt, %14, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc8)
      %17 = arith.cmpi slt, %15, %cst_3 : tensor<1x2048xi32, #blocked1> loc(#loc8)
      %18 = arith.remsi %15, %cst_4 : tensor<1x2048xi32, #blocked1> loc(#loc9)
      %19 = arith.divsi %15, %cst_4 : tensor<1x2048xi32, #blocked1> loc(#loc10)
      %20 = arith.remsi %19, %cst_6 : tensor<1x2048xi32, #blocked1> loc(#loc11)
      %21 = arith.divsi %15, %cst_7 : tensor<1x2048xi32, #blocked1> loc(#loc12)
      %22 = arith.divsi %14, %cst_8 : tensor<1x2048xi32, #blocked> loc(#loc12)
      %23 = arith.remsi %14, %cst_8 : tensor<1x2048xi32, #blocked> loc(#loc13)
      %24 = arith.muli %21, %cst_4 : tensor<1x2048xi32, #blocked1> loc(#loc14)
      %25 = arith.muli %22, %cst_5 : tensor<1x2048xi32, #blocked> loc(#loc14)
      %26 = arith.addi %18, %24 : tensor<1x2048xi32, #blocked1> loc(#loc15)
      %27 = arith.muli %20, %cst_9 : tensor<1x2048xi32, #blocked1> loc(#loc16)
      %28 = arith.addi %26, %27 : tensor<1x2048xi32, #blocked1> loc(#loc17)
      %29 = tt.addptr %4, %28 : tensor<1x2048x!tt.ptr<bf16>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc3)
      %30 = tt.load %29, %17, %cst_1 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<bf16>, #blocked1> loc(#loc18)
      %31 = arith.extf %30 : tensor<1x2048xbf16, #blocked1> to tensor<1x2048xf32, #blocked1> loc(#loc19)
      %32 = ttg.convert_layout %30 : tensor<1x2048xbf16, #blocked1> -> tensor<1x2048xbf16, #blocked> loc(#loc19)
      %33 = arith.extf %32 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc19)
      %34 = arith.divsi %23, %cst_5 : tensor<1x2048xi32, #blocked> loc(#loc20)
      %35 = arith.muli %34, %cst_10 : tensor<1x2048xi32, #blocked> loc(#loc21)
      %36 = arith.addi %25, %35 : tensor<1x2048xi32, #blocked> loc(#loc22)
      %37 = arith.remsi %23, %cst_5 : tensor<1x2048xi32, #blocked> loc(#loc23)
      %38 = arith.addi %36, %37 : tensor<1x2048xi32, #blocked> loc(#loc24)
      %39 = tt.addptr %5, %38 : tensor<1x2048x!tt.ptr<bf16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc25)
      %40 = tt.load %39, %16, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc26)
      %41 = ttg.convert_layout %40 : tensor<1x2048xbf16, #blocked> -> tensor<1x2048xbf16, #blocked1> loc(#loc27)
      %42 = arith.extf %41 : tensor<1x2048xbf16, #blocked1> to tensor<1x2048xf32, #blocked1> loc(#loc28)
      %43 = arith.extf %40 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc28)
      %44 = arith.cmpf ogt, %42, %cst_13 : tensor<1x2048xf32, #blocked1> loc(#loc29)
      %45 = arith.cmpf ogt, %43, %cst_12 : tensor<1x2048xf32, #blocked> loc(#loc29)
      %46 = arith.select %44, %cst_14, %cst_15 : tensor<1x2048xi1, #blocked1>, tensor<1x2048xf32, #blocked1> loc(#loc30)
      %47 = arith.select %45, %cst_11, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc30)
      %48 = arith.subf %31, %46 : tensor<1x2048xf32, #blocked1> loc(#loc31)
      %49 = arith.subf %33, %47 : tensor<1x2048xf32, #blocked> loc(#loc31)
      %50 = arith.mulf %48, %cst_16 : tensor<1x2048xf32, #blocked1> loc(#loc27)
      %51 = arith.mulf %49, %49 : tensor<1x2048xf32, #blocked> loc(#loc32)
      %52 = arith.addf %arg6, %51 : tensor<1x2048xf32, #blocked> loc(#loc33)
      %53 = arith.select %16, %52, %arg6 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc34)
      %54 = tt.addptr %6, %15 : tensor<1x2048x!tt.ptr<bf16>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc4)
      %55 = arith.truncf %31 : tensor<1x2048xf32, #blocked1> to tensor<1x2048xbf16, #blocked1> loc(#loc35)
      tt.store %54, %55, %17 : tensor<1x2048x!tt.ptr<bf16>, #blocked1> loc(#loc35)
      %56 = tt.addptr %7, %15 : tensor<1x2048x!tt.ptr<f32>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc5)
      tt.store %56, %50, %17 : tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc36)
      scf.yield %53 : tensor<1x2048xf32, #blocked> loc(#loc37)
    } loc(#loc6)
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc39)), %arg6: f32 loc(callsite(#loc1 at #loc39))):
      %12 = arith.addf %arg5, %arg6 : f32 loc(#loc47)
      tt.reduce.return %12 : f32 loc(#loc44)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %10 = tt.expand_dims %9 {axis = 1 : i32} : tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc41)
    %11 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc42)
    tt.store %11, %10 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":26:37)
#loc3 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":39:34)
#loc4 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":55:29)
#loc5 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":56:29)
#loc6 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":29:40)
#loc7 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":30:31)
#loc8 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":31:29)
#loc9 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":34:27)
#loc10 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":35:29)
#loc11 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":35:34)
#loc12 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":36:27)
#loc13 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":38:27)
#loc14 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":39:43)
#loc15 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":39:41)
#loc16 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":39:53)
#loc17 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":39:50)
#loc18 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":39:60)
#loc19 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":39:113)
#loc20 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":40:55)
#loc21 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":40:47)
#loc22 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":40:43)
#loc23 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":40:69)
#loc24 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":40:62)
#loc25 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":40:34)
#loc26 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":40:75)
#loc27 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":50:23)
#loc28 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":40:129)
#loc29 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":43:22)
#loc30 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":46:36)
#loc31 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":48:22)
#loc32 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":51:23)
#loc33 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":53:25)
#loc34 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":54:42)
#loc35 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":55:79)
#loc36 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":56:80)
#loc37 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":56:8)
#loc38 = loc("/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language/standard.py":286:36)
#loc40 = loc("/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc41 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":57:30)
#loc42 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":58:68)
#loc43 = loc("results/memory_optimized_experiment/torchinductor_cache_0/io/cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py":58:4)
#loc44 = loc(callsite(#loc38 at #loc39))
#loc46 = loc(callsite(#loc40 at #loc38))
#loc47 = loc(callsite(#loc46 at #loc39))
