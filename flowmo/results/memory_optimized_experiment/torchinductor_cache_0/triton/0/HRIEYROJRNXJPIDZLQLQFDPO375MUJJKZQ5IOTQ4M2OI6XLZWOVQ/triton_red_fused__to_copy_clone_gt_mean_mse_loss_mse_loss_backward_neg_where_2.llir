; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_clone_gt_mean_mse_loss_mse_loss_backward_neg_where_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %8 = and i32 %7, 511, !dbg !9
  %9 = or disjoint i32 %8, 512, !dbg !9
  %10 = or disjoint i32 %8, 1024, !dbg !9
  %11 = or disjoint i32 %8, 1536, !dbg !9
  %12 = shl i32 %7, 2, !dbg !9
  %13 = and i32 %12, 2044, !dbg !9
  %14 = lshr exact i32 %12, 1
  %15 = and i32 %14, 254
  %16 = mul nuw nsw i32 %15, 18
  %17 = zext nneg i32 %13 to i64
  %18 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %17
  %19 = zext nneg i32 %8 to i64
  %20 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %19
  %21 = zext nneg i32 %9 to i64
  %22 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %21
  %23 = zext nneg i32 %10 to i64
  %24 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %23
  %25 = zext nneg i32 %11 to i64
  %26 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %25
  %27 = lshr i32 %8, 1
  %28 = mul nuw nsw i32 %27, 18
  %29 = and i32 %7, 1
  %invariant.op = or disjoint i32 %28, %29, !dbg !10
  %30 = zext nneg i32 %16 to i64, !dbg !10
  %31 = zext nneg i32 %invariant.op to i64, !dbg !10
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !10
  %32 = zext nneg i32 %16 to i64
  %invariant.gep20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !10
  %invariant.gep22 = getelementptr i8, ptr addrspace(1) %invariant.gep20, i64 36, !dbg !10
  %invariant.gep24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !10
  %invariant.gep26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !10
  %invariant.gep28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !10
  %invariant.gep30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !10
  %33 = getelementptr inbounds nuw i8, ptr addrspace(3) %18, i64 2
  %34 = getelementptr inbounds nuw i8, ptr addrspace(3) %18, i64 4
  %35 = getelementptr inbounds nuw i8, ptr addrspace(3) %18, i64 6
  br label %36, !dbg !10

36:                                               ; preds = %6, %36
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %36 ]
  %37 = phi float [ 0.000000e+00, %6 ], [ %130, %36 ]
  %38 = phi float [ 0.000000e+00, %6 ], [ %134, %36 ]
  %39 = phi float [ 0.000000e+00, %6 ], [ %135, %36 ]
  %40 = phi float [ 0.000000e+00, %6 ], [ %136, %36 ]
  %41 = or disjoint i64 %indvars.iv, %21, !dbg !11
  %42 = or disjoint i64 %indvars.iv, %23, !dbg !11
  %43 = or disjoint i64 %indvars.iv, %25, !dbg !11
  %44 = or disjoint i64 %indvars.iv, %17, !dbg !11
  %45 = icmp samesign ult i64 %41, 4608, !dbg !12
  %46 = icmp samesign ult i64 %42, 4608, !dbg !12
  %47 = icmp samesign ult i64 %43, 4608, !dbg !12
  %48 = icmp samesign ult i64 %44, 4608, !dbg !12
  %49 = lshr i64 %44, 8, !dbg !13
  %50 = and i64 %49, 30, !dbg !13
  %51 = lshr i64 %41, 8, !dbg !13
  %52 = and i64 %51, 26, !dbg !13
  %53 = lshr i64 %42, 8, !dbg !13
  %54 = and i64 %53, 28, !dbg !13
  %55 = lshr i64 %43, 8, !dbg !13
  %56 = and i64 %55, 30, !dbg !13
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %50, !dbg !14
  %gep23 = getelementptr bfloat, ptr addrspace(1) %invariant.gep22, i64 %50, !dbg !14
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %gep, i1 %48) #3, !dbg !15
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !15
  %59 = extractelement <2 x bfloat> %58, i64 0, !dbg !15
  %60 = extractelement <2 x bfloat> %58, i64 1, !dbg !15
  %61 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %gep23, i1 %48) #3, !dbg !15
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !15
  %63 = extractelement <2 x bfloat> %62, i64 0, !dbg !15
  %64 = extractelement <2 x bfloat> %62, i64 1, !dbg !15
  %65 = fpext bfloat %59 to float, !dbg !16
  %66 = fpext bfloat %60 to float, !dbg !16
  %67 = fpext bfloat %63 to float, !dbg !16
  %68 = fpext bfloat %64 to float, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %69 = bitcast bfloat %59 to i16, !dbg !16
  %70 = bitcast bfloat %60 to i16, !dbg !16
  %71 = bitcast bfloat %63 to i16, !dbg !16
  %72 = bitcast bfloat %64 to i16, !dbg !16
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %18, i16 %69, i16 %70, i16 %71, i16 %72, i1 true) #3, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %73 = load bfloat, ptr addrspace(3) %20, align 2, !dbg !16
  %74 = load bfloat, ptr addrspace(3) %22, align 2, !dbg !16
  %75 = load bfloat, ptr addrspace(3) %24, align 2, !dbg !16
  %76 = load bfloat, ptr addrspace(3) %26, align 2, !dbg !16
  %77 = fpext bfloat %73 to float, !dbg !16
  %78 = fpext bfloat %74 to float, !dbg !16
  %79 = fpext bfloat %75 to float, !dbg !16
  %80 = fpext bfloat %76 to float, !dbg !16
  %81 = lshr exact i64 %indvars.iv, 7, !dbg !17
  %gep25 = getelementptr i8, ptr addrspace(1) %invariant.gep24, i64 %81, !dbg !17
  %gep27 = getelementptr bfloat, ptr addrspace(1) %invariant.gep26, i64 %52, !dbg !17
  %gep29 = getelementptr bfloat, ptr addrspace(1) %invariant.gep28, i64 %54, !dbg !17
  %gep31 = getelementptr bfloat, ptr addrspace(1) %invariant.gep30, i64 %56, !dbg !17
  %82 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep25, i1 true) #3, !dbg !18
  %83 = bitcast i16 %82 to bfloat, !dbg !18
  %84 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep27, i1 %45) #3, !dbg !18
  %85 = bitcast i16 %84 to bfloat, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep29, i1 %46) #3, !dbg !18
  %87 = bitcast i16 %86 to bfloat, !dbg !18
  %88 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep31, i1 %47) #3, !dbg !18
  %89 = bitcast i16 %88 to bfloat, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %90 = insertelement <1 x i16> poison, i16 %82, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %20, <1 x i16> %90, i1 true) #3, !dbg !19
  %91 = insertelement <1 x i16> poison, i16 %84, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %22, <1 x i16> %91, i1 true) #3, !dbg !19
  %92 = insertelement <1 x i16> poison, i16 %86, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %24, <1 x i16> %92, i1 true) #3, !dbg !19
  %93 = insertelement <1 x i16> poison, i16 %88, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %26, <1 x i16> %93, i1 true) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %94 = load bfloat, ptr addrspace(3) %18, align 8, !dbg !19
  %95 = load bfloat, ptr addrspace(3) %33, align 2, !dbg !19
  %96 = load bfloat, ptr addrspace(3) %34, align 4, !dbg !19
  %97 = load bfloat, ptr addrspace(3) %35, align 2, !dbg !19
  %98 = fcmp ogt bfloat %94, 0xR0000, !dbg !20
  %99 = fcmp ogt bfloat %95, 0xR0000, !dbg !20
  %100 = fcmp ogt bfloat %96, 0xR0000, !dbg !20
  %101 = fcmp ogt bfloat %97, 0xR0000, !dbg !20
  %102 = fcmp ogt bfloat %83, 0xR0000, !dbg !20
  %103 = fcmp ogt bfloat %85, 0xR0000, !dbg !20
  %104 = fcmp ogt bfloat %87, 0xR0000, !dbg !20
  %105 = fcmp ogt bfloat %89, 0xR0000, !dbg !20
  %106 = select i1 %98, float 1.000000e+00, float -1.000000e+00, !dbg !21
  %107 = select i1 %99, float 1.000000e+00, float -1.000000e+00, !dbg !21
  %108 = select i1 %100, float 1.000000e+00, float -1.000000e+00, !dbg !21
  %109 = select i1 %101, float 1.000000e+00, float -1.000000e+00, !dbg !21
  %110 = select i1 %102, float 1.000000e+00, float -1.000000e+00, !dbg !21
  %111 = select i1 %103, float 1.000000e+00, float -1.000000e+00, !dbg !21
  %112 = select i1 %104, float 1.000000e+00, float -1.000000e+00, !dbg !21
  %113 = select i1 %105, float 1.000000e+00, float -1.000000e+00, !dbg !21
  %114 = fsub float %65, %106, !dbg !22
  %115 = fsub float %66, %107, !dbg !22
  %116 = fsub float %67, %108, !dbg !22
  %117 = fsub float %68, %109, !dbg !22
  %118 = fsub float %77, %110, !dbg !22
  %119 = fsub float %78, %111, !dbg !22
  %120 = fsub float %79, %112, !dbg !22
  %121 = fsub float %80, %113, !dbg !22
  %122 = fmul float %114, 2.000000e+00, !dbg !19
  %123 = fmul float %115, 2.000000e+00, !dbg !19
  %124 = fmul float %116, 2.000000e+00, !dbg !19
  %125 = fmul float %117, 2.000000e+00, !dbg !19
  %126 = fmul float %118, %118, !dbg !23
  %127 = fmul float %119, %119, !dbg !23
  %128 = fmul float %120, %120, !dbg !23
  %129 = fmul float %121, %121, !dbg !23
  %130 = fadd float %37, %126, !dbg !24
  %131 = fadd float %38, %127, !dbg !24
  %132 = fadd float %39, %128, !dbg !24
  %133 = fadd float %40, %129, !dbg !24
  %134 = select i1 %45, float %131, float %38, !dbg !25
  %135 = select i1 %46, float %132, float %39, !dbg !25
  %136 = select i1 %47, float %133, float %40, !dbg !25
  %137 = getelementptr bfloat, ptr addrspace(1) %1, i64 %44, !dbg !26
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %57, i32 %61, ptr addrspace(1) %137, i1 %48) #3, !dbg !27
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !28
  %139 = bitcast float %122 to i32, !dbg !29
  %140 = bitcast float %123 to i32, !dbg !29
  %141 = bitcast float %124 to i32, !dbg !29
  %142 = bitcast float %125 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %139, i32 %140, i32 %141, i32 %142, ptr addrspace(1) %138, i1 %48) #3, !dbg !29
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !10
  %143 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !10
  br i1 %143, label %36, label %144, !dbg !10

144:                                              ; preds = %36
  %145 = lshr i32 %7, 5, !dbg !9
  %146 = and i32 %7, 31, !dbg !9
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %147 = fadd float %130, %134, !dbg !34
  %148 = fadd float %135, %147, !dbg !34
  %149 = fadd float %136, %148, !dbg !34
  %150 = bitcast float %149 to i32, !dbg !30
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 16, i32 31), !dbg !30
  %152 = bitcast i32 %151 to float, !dbg !30
  %153 = fadd float %149, %152, !dbg !34
  %154 = bitcast float %153 to i32, !dbg !30
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 8, i32 31), !dbg !30
  %156 = bitcast i32 %155 to float, !dbg !30
  %157 = fadd float %153, %156, !dbg !34
  %158 = bitcast float %157 to i32, !dbg !30
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 4, i32 31), !dbg !30
  %160 = bitcast i32 %159 to float, !dbg !30
  %161 = fadd float %157, %160, !dbg !34
  %162 = bitcast float %161 to i32, !dbg !30
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = fadd float %161, %164, !dbg !34
  %166 = bitcast float %165 to i32, !dbg !30
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  %169 = fadd float %165, %168, !dbg !34
  %170 = and i32 %145, 15, !dbg !30
  %171 = icmp eq i32 %146, 0, !dbg !30
  %172 = zext nneg i32 %170 to i64, !dbg !30
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i64 %172, !dbg !30
  %174 = bitcast float %169 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 %171) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %175 = icmp slt i32 %7, 16, !dbg !30
  %176 = sext i32 %7 to i64, !dbg !30
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !30
  %178 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %177, i1 %175) #3, !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 8, i32 31), !dbg !30
  %181 = bitcast i32 %180 to float, !dbg !30
  %182 = fadd float %179, %181, !dbg !34
  %183 = bitcast float %182 to i32, !dbg !30
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !30
  %185 = bitcast i32 %184 to float, !dbg !30
  %186 = fadd float %182, %185, !dbg !34
  %187 = bitcast float %186 to i32, !dbg !30
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !30
  %189 = bitcast i32 %188 to float, !dbg !30
  %190 = fadd float %186, %189, !dbg !34
  %191 = bitcast float %190 to i32, !dbg !30
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !30
  %193 = bitcast i32 %192 to float, !dbg !30
  %194 = fadd float %190, %193, !dbg !34
  %195 = and i32 %7, 15, !dbg !30
  %196 = icmp eq i32 %195, 0, !dbg !30
  %197 = and i1 %175, %196, !dbg !30
  %198 = bitcast float %194 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %198, i1 %197) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %199 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %200 = icmp eq i32 %8, 0, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %3, i1 %200) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cioxfswbedcqoklpnb7bgicyr34cvhiwdfan5t27onhk53ovrknv.py", directory: "results/memory_optimized_experiment/torchinductor_cache_0/io")
!4 = !{ptr @triton_red_fused__to_copy_clone_gt_mean_mse_loss_mse_loss_backward_neg_where_2, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_clone_gt_mean_mse_loss_mse_loss_backward_neg_where_2", linkageName: "triton_red_fused__to_copy_clone_gt_mean_mse_loss_mse_loss_backward_neg_where_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 26, column: 37, scope: !6)
!10 = !DILocation(line: 29, column: 40, scope: !6)
!11 = !DILocation(line: 30, column: 31, scope: !6)
!12 = !DILocation(line: 31, column: 29, scope: !6)
!13 = !DILocation(line: 39, column: 43, scope: !6)
!14 = !DILocation(line: 39, column: 34, scope: !6)
!15 = !DILocation(line: 39, column: 60, scope: !6)
!16 = !DILocation(line: 39, column: 113, scope: !6)
!17 = !DILocation(line: 40, column: 34, scope: !6)
!18 = !DILocation(line: 40, column: 75, scope: !6)
!19 = !DILocation(line: 50, column: 23, scope: !6)
!20 = !DILocation(line: 43, column: 22, scope: !6)
!21 = !DILocation(line: 46, column: 36, scope: !6)
!22 = !DILocation(line: 48, column: 22, scope: !6)
!23 = !DILocation(line: 51, column: 23, scope: !6)
!24 = !DILocation(line: 53, column: 25, scope: !6)
!25 = !DILocation(line: 54, column: 42, scope: !6)
!26 = !DILocation(line: 55, column: 29, scope: !6)
!27 = !DILocation(line: 55, column: 79, scope: !6)
!28 = !DILocation(line: 56, column: 29, scope: !6)
!29 = !DILocation(line: 56, column: 80, scope: !6)
!30 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/utka/proj/evs/vlm/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 57, column: 27, scope: !6)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 58, column: 68, scope: !6)
!37 = !DILocation(line: 58, column: 4, scope: !6)
